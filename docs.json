[
  {
    "kind": "namespace",
    "name": "Deno",
    "snippet": "export declare namespace Deno {\n  /** The current process id of the runtime. */\n  export let pid: number;\n\n  /** Reflects the NO_COLOR environment variable.\n   *\n   * See: https://no-color.org/ */\n  export let noColor: boolean;\n\n  export type TestFunction = () => void | Promise<void>;\n\n  export interface TestDefinition {\n    fn: TestFunction;\n    name: string;\n    ignore?: boolean;\n    disableOpSanitizer?: boolean;\n    disableResourceSanitizer?: boolean;\n  }\n\n  /** Register a test which will be run when `deno test` is used on the command\n   * line and the containing module looks like a test module, or explicitly\n   * when `Deno.runTests` is used */\n  export function test(t: TestDefinition): void;\n  /** Register a test which will be run when `deno test` is used on the command\n   * line and the containing module looks like a test module, or explicitly\n   * when `Deno.runTests` is used */\n  export function test(fn: TestFunction): void;\n  /** Register a test which will be run when `deno test` is used on the command\n   * line and the containing module looks like a test module, or explicitly\n   * when `Deno.runTests` is used */\n  export function test(name: string, fn: TestFunction): void;\n\n  enum TestStatus {\n    Passed = \"passed\",\n    Failed = \"failed\",\n    Ignored = \"ignored\"\n  }\n\n  interface TestResult {\n    name: string;\n    status: TestStatus;\n    duration?: number;\n    error?: Error;\n  }\n\n  interface TestStats {\n    filtered: number;\n    ignored: number;\n    measured: number;\n    passed: number;\n    failed: number;\n  }\n\n  export enum TestEvent {\n    Start = \"start\",\n    TestStart = \"testStart\",\n    TestEnd = \"testEnd\",\n    End = \"end\"\n  }\n\n  interface TestEventStart {\n    kind: TestEvent.Start;\n    tests: number;\n  }\n\n  interface TestEventTestStart {\n    kind: TestEvent.TestStart;\n    name: string;\n  }\n\n  interface TestEventTestEnd {\n    kind: TestEvent.TestEnd;\n    result: TestResult;\n  }\n\n  interface TestEventEnd {\n    kind: TestEvent.End;\n    stats: TestStats;\n    duration: number;\n    results: TestResult[];\n  }\n\n  interface TestReporter {\n    start(event: TestEventStart): Promise<void>;\n    testStart(msg: TestEventTestStart): Promise<void>;\n    testEnd(msg: TestEventTestEnd): Promise<void>;\n    end(event: TestEventEnd): Promise<void>;\n  }\n\n  export class ConsoleTestReporter implements TestReporter {\n    constructor();\n    start(event: TestEventStart): Promise<void>;\n    testStart(msg: TestEventTestStart): Promise<void>;\n    testEnd(msg: TestEventTestEnd): Promise<void>;\n    end(event: TestEventEnd): Promise<void>;\n  }\n\n  export interface RunTestsOptions {\n    /** If `true`, Deno will exit with status code 1 if there was\n     * test failure. Defaults to `true`. */\n    exitOnFail?: boolean;\n    /** If `true`, Deno will exit upon first test failure Defaults to `false`. */\n    failFast?: boolean;\n    /** String or RegExp used to filter test to run. Only test with names\n     * matching provided `String` or `RegExp` will be run. */\n    only?: string | RegExp;\n    /** String or RegExp used to skip tests to run. Tests with names\n     * matching provided `String` or `RegExp` will not be run. */\n    skip?: string | RegExp;\n    /** Disable logging of the results. Defaults to `false`. */\n    disableLog?: boolean;\n    /** Custom reporter class. If not provided uses console reporter. */\n    reporter?: TestReporter;\n  }\n\n  /** Run any tests which have been registered. Always resolves\n   * asynchronously. */\n  export function runTests(\n    opts?: RunTestsOptions\n  ): Promise<{\n    results: TestResult[];\n    stats: TestStats;\n    duration: number;\n  }>;\n\n  /** Get the `loadavg`. Requires `allow-env` permission.\n   *\n   *       console.log(Deno.loadavg());\n   */\n  export function loadavg(): number[];\n\n  /** Get the `hostname`. Requires `allow-env` permission.\n   *\n   *       console.log(Deno.hostname());\n   */\n  export function hostname(): string;\n\n  /** Get the OS release. Requires `allow-env` permission.\n   *\n   *       console.log(Deno.osRelease());\n   */\n  export function osRelease(): string;\n\n  /** Exit the Deno process with optional exit code. */\n  export function exit(code?: number): never;\n\n  /** Returns a snapshot of the environment variables at invocation. Mutating a\n   * property in the object will set that variable in the environment for the\n   * process. The environment object will only accept `string`s as values.\n   *\n   *       const myEnv = Deno.env();\n   *       console.log(myEnv.SHELL);\n   *       myEnv.TEST_VAR = \"HELLO\";\n   *       const newEnv = Deno.env();\n   *       console.log(myEnv.TEST_VAR == newEnv.TEST_VAR);\n   *\n   * Requires `allow-env` permission. */\n  export function env(): {\n    [index: string]: string;\n  };\n\n  /** Returns the value of an environment variable at invocation. If the\n   * variable is not present, `undefined` will be returned.\n   *\n   *       const myEnv = Deno.env();\n   *       console.log(myEnv.SHELL);\n   *       myEnv.TEST_VAR = \"HELLO\";\n   *       const newEnv = Deno.env();\n   *       console.log(myEnv.TEST_VAR == newEnv.TEST_VAR);\n   *\n   * Requires `allow-env` permission. */\n  export function env(key: string): string | undefined;\n\n  /** **UNSTABLE** */\n  export type DirKind =\n    | \"home\"\n    | \"cache\"\n    | \"config\"\n    | \"executable\"\n    | \"data\"\n    | \"data_local\"\n    | \"audio\"\n    | \"desktop\"\n    | \"document\"\n    | \"download\"\n    | \"font\"\n    | \"picture\"\n    | \"public\"\n    | \"template\"\n    | \"tmp\"\n    | \"video\";\n\n  // TODO(ry) markdown in jsdoc broken https://deno.land/typedoc/index.html#dir\n  /**\n   * **UNSTABLE**: Might rename method `dir` and type alias `DirKind`.\n   *\n   * Returns the user and platform specific directories.\n   *\n   * Requires `allow-env` permission.\n   *\n   * Returns `null` if there is no applicable directory or if any other error\n   * occurs.\n   *\n   * Argument values: `\"home\"`, `\"cache\"`, `\"config\"`, `\"executable\"`, `\"data\"`,\n   * `\"data_local\"`, `\"audio\"`, `\"desktop\"`, `\"document\"`, `\"download\"`,\n   * `\"font\"`, `\"picture\"`, `\"public\"`, `\"template\"`, `\"tmp\"`, `\"video\"`\n   *\n   * `\"cache\"`\n   *\n   * |Platform | Value                               | Example                      |\n   * | ------- | ----------------------------------- | ---------------------------- |\n   * | Linux   | `$XDG_CACHE_HOME` or `$HOME`/.cache | /home/alice/.cache           |\n   * | macOS   | `$HOME`/Library/Caches              | /Users/Alice/Library/Caches  |\n   * | Windows | `{FOLDERID_LocalAppData}`           | C:\\Users\\Alice\\AppData\\Local |\n   *\n   * `\"config\"`\n   *\n   * |Platform | Value                                 | Example                          |\n   * | ------- | ------------------------------------- | -------------------------------- |\n   * | Linux   | `$XDG_CONFIG_HOME` or `$HOME`/.config | /home/alice/.config              |\n   * | macOS   | `$HOME`/Library/Preferences           | /Users/Alice/Library/Preferences |\n   * | Windows | `{FOLDERID_RoamingAppData}`           | C:\\Users\\Alice\\AppData\\Roaming   |\n   *\n   * `\"executable\"`\n   *\n   * |Platform | Value                                                           | Example                |\n   * | ------- | --------------------------------------------------------------- | -----------------------|\n   * | Linux   | `XDG_BIN_HOME` or `$XDG_DATA_HOME`/../bin or `$HOME`/.local/bin | /home/alice/.local/bin |\n   * | macOS   | -                                                               | -                      |\n   * | Windows | -                                                               | -                      |\n   *\n   * `\"data\"`\n   *\n   * |Platform | Value                                    | Example                                  |\n   * | ------- | ---------------------------------------- | ---------------------------------------- |\n   * | Linux   | `$XDG_DATA_HOME` or `$HOME`/.local/share | /home/alice/.local/share                 |\n   * | macOS   | `$HOME`/Library/Application Support      | /Users/Alice/Library/Application Support |\n   * | Windows | `{FOLDERID_RoamingAppData}`              | C:\\Users\\Alice\\AppData\\Roaming           |\n   *\n   * `\"data_local\"`\n   *\n   * |Platform | Value                                    | Example                                  |\n   * | ------- | ---------------------------------------- | ---------------------------------------- |\n   * | Linux   | `$XDG_DATA_HOME` or `$HOME`/.local/share | /home/alice/.local/share                 |\n   * | macOS   | `$HOME`/Library/Application Support      | /Users/Alice/Library/Application Support |\n   * | Windows | `{FOLDERID_LocalAppData}`                | C:\\Users\\Alice\\AppData\\Local             |\n   *\n   * `\"audio\"`\n   *\n   * |Platform | Value              | Example              |\n   * | ------- | ------------------ | -------------------- |\n   * | Linux   | `XDG_MUSIC_DIR`    | /home/alice/Music    |\n   * | macOS   | `$HOME`/Music      | /Users/Alice/Music   |\n   * | Windows | `{FOLDERID_Music}` | C:\\Users\\Alice\\Music |\n   *\n   * `\"desktop\"`\n   *\n   * |Platform | Value                | Example                |\n   * | ------- | -------------------- | ---------------------- |\n   * | Linux   | `XDG_DESKTOP_DIR`    | /home/alice/Desktop    |\n   * | macOS   | `$HOME`/Desktop      | /Users/Alice/Desktop   |\n   * | Windows | `{FOLDERID_Desktop}` | C:\\Users\\Alice\\Desktop |\n   *\n   * `\"document\"`\n   *\n   * |Platform | Value                  | Example                  |\n   * | ------- | ---------------------- | ------------------------ |\n   * | Linux   | `XDG_DOCUMENTS_DIR`    | /home/alice/Documents    |\n   * | macOS   | `$HOME`/Documents      | /Users/Alice/Documents   |\n   * | Windows | `{FOLDERID_Documents}` | C:\\Users\\Alice\\Documents |\n   *\n   * `\"download\"`\n   *\n   * |Platform | Value                  | Example                  |\n   * | ------- | ---------------------- | ------------------------ |\n   * | Linux   | `XDG_DOWNLOAD_DIR`     | /home/alice/Downloads    |\n   * | macOS   | `$HOME`/Downloads      | /Users/Alice/Downloads   |\n   * | Windows | `{FOLDERID_Downloads}` | C:\\Users\\Alice\\Downloads |\n   *\n   * `\"font\"`\n   *\n   * |Platform | Value                                                | Example                        |\n   * | ------- | ---------------------------------------------------- | ------------------------------ |\n   * | Linux   | `$XDG_DATA_HOME`/fonts or `$HOME`/.local/share/fonts | /home/alice/.local/share/fonts |\n   * | macOS   | `$HOME/Library/Fonts`                                | /Users/Alice/Library/Fonts     |\n   * | Windows | –                                                    | –                              |\n   *\n   * `\"picture\"`\n   *\n   * |Platform | Value                 | Example                 |\n   * | ------- | --------------------- | ----------------------- |\n   * | Linux   | `XDG_PICTURES_DIR`    | /home/alice/Pictures    |\n   * | macOS   | `$HOME`/Pictures      | /Users/Alice/Pictures   |\n   * | Windows | `{FOLDERID_Pictures}` | C:\\Users\\Alice\\Pictures |\n   *\n   * `\"public\"`\n   *\n   * |Platform | Value                 | Example             |\n   * | ------- | --------------------- | ------------------- |\n   * | Linux   | `XDG_PUBLICSHARE_DIR` | /home/alice/Public  |\n   * | macOS   | `$HOME`/Public        | /Users/Alice/Public |\n   * | Windows | `{FOLDERID_Public}`   | C:\\Users\\Public     |\n   *\n   * `\"template\"`\n   *\n   * |Platform | Value                  | Example                                                    |\n   * | ------- | ---------------------- | ---------------------------------------------------------- |\n   * | Linux   | `XDG_TEMPLATES_DIR`    | /home/alice/Templates                                      |\n   * | macOS   | –                      | –                                                          |\n   * | Windows | `{FOLDERID_Templates}` | C:\\Users\\Alice\\AppData\\Roaming\\Microsoft\\Windows\\Templates |\n   *\n   * `\"tmp\"`\n   *\n   * |Platform | Value                  | Example                                                    |\n   * | ------- | ---------------------- | ---------------------------------------------------------- |\n   * | Linux   | `TMPDIR`               | /tmp                                                       |\n   * | macOS   | `TMPDIR`               | /tmp                                                       |\n   * | Windows | `{TMP}`                | C:\\Users\\Alice\\AppData\\Local\\Temp                          |\n   *\n   * `\"video\"`\n   *\n   * |Platform | Value               | Example               |\n   * | ------- | ------------------- | --------------------- |\n   * | Linux   | `XDG_VIDEOS_DIR`    | /home/alice/Videos    |\n   * | macOS   | `$HOME`/Movies      | /Users/Alice/Movies   |\n   * | Windows | `{FOLDERID_Videos}` | C:\\Users\\Alice\\Videos |\n   *\n   */\n  export function dir(kind: DirKind): string | null;\n\n  /**\n   * Returns the path to the current deno executable.\n   *\n   * Requires `allow-env` permission.\n   */\n  export function execPath(): string;\n\n  // @url js/dir.d.ts\n\n  /**\n   * **UNSTABLE**: maybe needs permissions.\n   *\n   * Return a string representing the current working directory.\n   *\n   * If the current directory can be reached via multiple paths (due to symbolic\n   * links), `cwd()` may return any one of them.\n   *\n   * Throws `Deno.errors.NotFound` if directory not available.\n   */\n  export function cwd(): string;\n\n  /**\n   * **UNSTABLE**: Currently under evaluation to decide if explicit permission is\n   * required to change the current working directory.\n   *\n   * Change the current working directory to the specified path.\n   *\n   *       Deno.chdir(\"/home/userA\");\n   *       Deno.chdir(\"../userB\");\n   *       Deno.chdir(\"C:\\\\Program Files (x86)\\\\Java\");\n   *\n   * Throws `Deno.errors.NotFound` if directory not found.\n   * Throws `Deno.errors.PermissionDenied` if the user does not have access\n   * rights\n   */\n  export function chdir(directory: string): void;\n\n  /**\n   * **UNSTABLE**: New API. Maybe needs permissions.\n   *\n   * If `mask` is provided, sets the process umask. Always returns what the umask\n   * was before the call.\n   */\n  export function umask(mask?: number): number;\n\n  /** **UNSTABLE**: might move to `Deno.symbols`. */\n  export const EOF: unique symbol;\n  export type EOF = typeof EOF;\n\n  // @url js/io.d.ts\n\n  /** **UNSTABLE**: might remove `\"SEEK_\"` prefix. Might not use all-caps. */\n  export enum SeekMode {\n    SEEK_START = 0,\n    SEEK_CURRENT = 1,\n    SEEK_END = 2\n  }\n\n  /** **UNSTABLE**: might make `Reader` into iterator of some sort. */\n  export interface Reader {\n    /** Reads up to `p.byteLength` bytes into `p`. It resolves to the number of\n     * bytes read (`0` < `n` <= `p.byteLength`) and rejects if any error\n     * encountered. Even if `read()` resolves to `n` < `p.byteLength`, it may\n     * use all of `p` as scratch space during the call. If some data is\n     * available but not `p.byteLength` bytes, `read()` conventionally resolves\n     * to what is available instead of waiting for more.\n     *\n     * When `read()` encounters end-of-file condition, it resolves to\n     * `Deno.EOF` symbol.\n     *\n     * When `read()` encounters an error, it rejects with an error.\n     *\n     * Callers should always process the `n` > `0` bytes returned before\n     * considering the `EOF`. Doing so correctly handles I/O errors that happen\n     * after reading some bytes and also both of the allowed EOF behaviors.\n     *\n     * Implementations should not retain a reference to `p`.\n     */\n    read(p: Uint8Array): Promise<number | EOF>;\n  }\n\n  export interface SyncReader {\n    /** Reads up to `p.byteLength` bytes into `p`. It resolves to the number\n     * of bytes read (`0` < `n` <= `p.byteLength`) and rejects if any error\n     * encountered. Even if `read()` returns `n` < `p.byteLength`, it may use\n     * all of `p` as scratch space during the call. If some data is available\n     * but not `p.byteLength` bytes, `read()` conventionally returns what is\n     * available instead of waiting for more.\n     *\n     * When `readSync()` encounters end-of-file condition, it returns `Deno.EOF`\n     * symbol.\n     *\n     * When `readSync()` encounters an error, it throws with an error.\n     *\n     * Callers should always process the `n` > `0` bytes returned before\n     * considering the `EOF`. Doing so correctly handles I/O errors that happen\n     * after reading some bytes and also both of the allowed EOF behaviors.\n     *\n     * Implementations should not retain a reference to `p`.\n     */\n    readSync(p: Uint8Array): number | EOF;\n  }\n\n  export interface Writer {\n    /** Writes `p.byteLength` bytes from `p` to the underlying data stream. It\n     * resolves to the number of bytes written from `p` (`0` <= `n` <=\n     * `p.byteLength`) or reject with the error encountered that caused the\n     * write to stop early. `write()` must reject with a non-null error if\n     * would resolve to `n` < `p.byteLength`. `write()` must not modify the\n     * slice data, even temporarily.\n     *\n     * Implementations should not retain a reference to `p`.\n     */\n    write(p: Uint8Array): Promise<number>;\n  }\n\n  export interface SyncWriter {\n    /** Writes `p.byteLength` bytes from `p` to the underlying data\n     * stream. It returns the number of bytes written from `p` (`0` <= `n`\n     * <= `p.byteLength`) and any error encountered that caused the write to\n     * stop early. `writeSync()` must throw a non-null error if it returns `n` <\n     * `p.byteLength`. `writeSync()` must not modify the slice data, even\n     * temporarily.\n     *\n     * Implementations should not retain a reference to `p`.\n     */\n    writeSync(p: Uint8Array): number;\n  }\n\n  export interface Closer {\n    close(): void;\n  }\n\n  export interface Seeker {\n    /** Seek sets the offset for the next `read()` or `write()` to offset,\n     * interpreted according to `whence`: `SEEK_START` means relative to the\n     * start of the file, `SEEK_CURRENT` means relative to the current offset,\n     * and `SEEK_END` means relative to the end. Seek resolves to the new offset\n     * relative to the start of the file.\n     *\n     * Seeking to an offset before the start of the file is an error. Seeking to\n     * any positive offset is legal, but the behavior of subsequent I/O\n     * operations on the underlying object is implementation-dependent.\n     * It returns the number of cursor position.\n     */\n    seek(offset: number, whence: SeekMode): Promise<number>;\n  }\n\n  export interface SyncSeeker {\n    /** Seek sets the offset for the next `readSync()` or `writeSync()` to\n     * offset, interpreted according to `whence`: `SEEK_START` means relative\n     * to the start of the file, `SEEK_CURRENT` means relative to the current\n     * offset, and `SEEK_END` means relative to the end.\n     *\n     * Seeking to an offset before the start of the file is an error. Seeking to\n     * any positive offset is legal, but the behavior of subsequent I/O\n     * operations on the underlying object is implementation-dependent.\n     */\n    seekSync(offset: number, whence: SeekMode): number;\n  }\n\n  export interface ReadCloser extends Reader, Closer {}\n  export interface WriteCloser extends Writer, Closer {}\n  export interface ReadSeeker extends Reader, Seeker {}\n  export interface WriteSeeker extends Writer, Seeker {}\n  export interface ReadWriteCloser extends Reader, Writer, Closer {}\n  export interface ReadWriteSeeker extends Reader, Writer, Seeker {}\n\n  /** Copies from `src` to `dst` until either `EOF` is reached on `src` or an\n   * error occurs. It resolves to the number of bytes copied or rejects with\n   * the first error encountered while copying.\n   *\n   * Because `copy()` is defined to read from `src` until `EOF`, it does not\n   * treat an `EOF` from `read()` as an error to be reported.\n   */\n  export function copy(dst: Writer, src: Reader): Promise<number>;\n\n  /** Turns `r` into async iterator.\n   *\n   *      for await (const chunk of toAsyncIterator(reader)) {\n   *        console.log(chunk);\n   *      }\n   */\n  export function toAsyncIterator(r: Reader): AsyncIterableIterator<Uint8Array>;\n\n  // @url js/files.d.ts\n\n  /** Synchronously open a file and return an instance of the `File` object.\n   *\n   *       const file = Deno.openSync(\"/foo/bar.txt\", { read: true, write: true });\n   *\n   * Requires `allow-read` and `allow-write` permissions depending on openMode.\n   */\n  export function openSync(path: string, options?: OpenOptions): File;\n\n  /** Synchronously open a file and return an instance of the `File` object.\n   *\n   *       const file = Deno.openSync(\"/foo/bar.txt\", \"r\");\n   *\n   * Requires `allow-read` and `allow-write` permissions depending on openMode.\n   */\n  export function openSync(path: string, openMode?: OpenMode): File;\n\n  /** Open a file and resolve to an instance of the `File` object.\n   *\n   *     const file = await Deno.open(\"/foo/bar.txt\", { read: true, write: true });\n   *\n   * Requires `allow-read` and `allow-write` permissions depending on openMode.\n   */\n  export function open(path: string, options?: OpenOptions): Promise<File>;\n\n  /** Open a file and resolves to an instance of `Deno.File`.\n   *\n   *     const file = await Deno.open(\"/foo/bar.txt, \"w+\");\n   *\n   * Requires `allow-read` and `allow-write` permissions depending on openMode.\n   */\n  export function open(path: string, openMode?: OpenMode): Promise<File>;\n\n  /** Creates a file if none exists or truncates an existing file and returns\n   *  an instance of `Deno.File`.\n   *\n   *       const file = Deno.createSync(\"/foo/bar.txt\");\n   *\n   * Requires `allow-read` and `allow-write` permissions.\n   */\n  export function createSync(path: string): File;\n\n  /** Creates a file if none exists or truncates an existing file and resolves to\n   *  an instance of `Deno.File`.\n   *\n   *       const file = await Deno.create(\"/foo/bar.txt\");\n   *\n   * Requires `allow-read` and `allow-write` permissions.\n   */\n  export function create(path: string): Promise<File>;\n\n  /** Synchronously read from a file ID into an array buffer.\n   *\n   * Returns `number | EOF` for the operation.\n   *\n   *      const file = Deno.openSync(\"/foo/bar.txt\");\n   *      const buf = new Uint8Array(100);\n   *      const nread = Deno.readSync(file.rid, buf);\n   *      const text = new TextDecoder().decode(buf);\n   */\n  export function readSync(rid: number, p: Uint8Array): number | EOF;\n\n  /** Read from a resource ID into an array buffer.\n   *\n   * Resolves to the `number | EOF` for the operation.\n   *\n   *       const file = await Deno.open(\"/foo/bar.txt\");\n   *       const buf = new Uint8Array(100);\n   *       const nread = await Deno.read(file.rid, buf);\n   *       const text = new TextDecoder().decode(buf);\n   */\n  export function read(rid: number, p: Uint8Array): Promise<number | EOF>;\n\n  /** Synchronously write to the resource ID the contents of the array buffer.\n   *\n   * Resolves to the number of bytes written.\n   *\n   *       const encoder = new TextEncoder();\n   *       const data = encoder.encode(\"Hello world\\n\");\n   *       const file = Deno.openSync(\"/foo/bar.txt\");\n   *       Deno.writeSync(file.rid, data);\n   */\n  export function writeSync(rid: number, p: Uint8Array): number;\n\n  /** Write to the resource ID the contents of the array buffer.\n   *\n   * Resolves to the number of bytes written.\n   *\n   *      const encoder = new TextEncoder();\n   *      const data = encoder.encode(\"Hello world\\n\");\n   *      const file = await Deno.open(\"/foo/bar.txt\");\n   *      await Deno.write(file.rid, data);\n   */\n  export function write(rid: number, p: Uint8Array): Promise<number>;\n\n  /** Synchronously seek a file ID to the given offset under mode given by `whence`.\n   *\n   *       const file = Deno.openSync(\"/foo/bar.txt\");\n   *       Deno.seekSync(file.rid, 0, 0);\n   */\n  export function seekSync(\n    rid: number,\n    offset: number,\n    whence: SeekMode\n  ): number;\n\n  /** Seek a file ID to the given offset under mode given by `whence`.\n   *\n   *      const file = await Deno.open(\"/foo/bar.txt\");\n   *      await Deno.seek(file.rid, 0, 0);\n   */\n  export function seek(\n    rid: number,\n    offset: number,\n    whence: SeekMode\n  ): Promise<number>;\n\n  /** Close the given resource ID. */\n  export function close(rid: number): void;\n\n  /** The Deno abstraction for reading and writing files. */\n  export class File\n    implements\n      Reader,\n      SyncReader,\n      Writer,\n      SyncWriter,\n      Seeker,\n      SyncSeeker,\n      Closer {\n    readonly rid: number;\n    constructor(rid: number);\n    write(p: Uint8Array): Promise<number>;\n    writeSync(p: Uint8Array): number;\n    read(p: Uint8Array): Promise<number | EOF>;\n    readSync(p: Uint8Array): number | EOF;\n    seek(offset: number, whence: SeekMode): Promise<number>;\n    seekSync(offset: number, whence: SeekMode): number;\n    close(): void;\n  }\n\n  /** An instance of `Deno.File` for `stdin`. */\n  export const stdin: File;\n  /** An instance of `Deno.File` for `stdout`. */\n  export const stdout: File;\n  /** An instance of `Deno.File` for `stderr`. */\n  export const stderr: File;\n\n  export interface OpenOptions {\n    /** Sets the option for read access. This option, when `true`, means that the\n     * file should be read-able if opened. */\n    read?: boolean;\n    /** Sets the option for write access. This option, when `true`, means that\n     * the file should be write-able if opened. If the file already exists,\n     * any write calls on it will overwrite its contents, by default without\n     * truncating it. */\n    write?: boolean;\n    /**Sets the option for the append mode. This option, when `true`, means that\n     * writes will append to a file instead of overwriting previous contents.\n     * Note that setting `{ write: true, append: true }` has the same effect as\n     * setting only `{ append: true }`. */\n    append?: boolean;\n    /** Sets the option for truncating a previous file. If a file is\n     * successfully opened with this option set it will truncate the file to `0`\n     * size if it already exists. The file must be opened with write access\n     * for truncate to work. */\n    truncate?: boolean;\n    /** Sets the option to allow creating a new file, if one doesn't already\n     * exist at the specified path. Requires write or append access to be\n     * used. */\n    create?: boolean;\n    /** Defaults to `false`. If set to `true`, no file, directory, or symlink is\n     * allowed to exist at the target location. Requires write or append\n     * access to be used. When createNew is set to `true`, create and truncate\n     * are ignored. */\n    createNew?: boolean;\n    /** Permissions to use if creating the file (defaults to `0o666`, before\n     * the process's umask).\n     * Ignored on Windows. */\n    mode?: number;\n  }\n\n  /** A set of string literals which specify how to open a file.\n   *\n   * |Value |Description                                                                                       |\n   * |------|--------------------------------------------------------------------------------------------------|\n   * |`\"r\"` |Read-only. Default. Starts at beginning of file.                                                  |\n   * |`\"r+\"`|Read-write. Start at beginning of file.                                                           |\n   * |`\"w\"` |Write-only. Opens and truncates existing file or creates new one for writing only.                |\n   * |`\"w+\"`|Read-write. Opens and truncates existing file or creates new one for writing and reading.         |\n   * |`\"a\"` |Write-only. Opens existing file or creates new one. Each write appends content to the end of file.|\n   * |`\"a+\"`|Read-write. Behaves like `\"a\"` and allows to read from file.                                      |\n   * |`\"x\"` |Write-only. Exclusive create - creates new file only if one doesn't exist already.                |\n   * |`\"x+\"`|Read-write. Behaves like `x` and allows reading from file.                                        |\n   */\n  export type OpenMode = \"r\" | \"r+\" | \"w\" | \"w+\" | \"a\" | \"a+\" | \"x\" | \"x+\";\n\n  // @url js/tty.d.ts\n\n  /** **UNSTABLE**: newly added API\n   *\n   *  Check if a given resource is TTY. */\n  export function isatty(rid: number): boolean;\n\n  /** **UNSTABLE**: newly added API\n   *\n   *  Set TTY to be under raw mode or not. */\n  export function setRaw(rid: number, mode: boolean): void;\n\n  // @url js/buffer.d.ts\n\n  /** A variable-sized buffer of bytes with `read()` and `write()` methods.\n   *\n   * Based on [Go Buffer](https://golang.org/pkg/bytes/#Buffer). */\n  export class Buffer implements Reader, SyncReader, Writer, SyncWriter {\n    private buf;\n    private off;\n    private _tryGrowByReslice;\n    private _reslice;\n    private _grow;\n\n    constructor(ab?: ArrayBuffer);\n    /** Returns a slice holding the unread portion of the buffer.\n     *\n     * The slice is valid for use only until the next buffer modification (that\n     * is, only until the next call to a method like `read()`, `write()`,\n     * `reset()`, or `truncate()`). The slice aliases the buffer content at\n     * least until the next buffer modification, so immediate changes to the\n     * slice will affect the result of future reads. */\n    bytes(): Uint8Array;\n    /** Returns the contents of the unread portion of the buffer as a `string`.\n     *\n     * **Warning**: if multibyte characters are present when data is flowing\n     * through the buffer, this method may result in incorrect strings due to a\n     * character being split. */\n    toString(): string;\n    /** Returns whether the unread portion of the buffer is empty. */\n    empty(): boolean;\n    /** A read only number of bytes of the unread portion of the buffer. */\n    readonly length: number;\n    /** The read only capacity of the buffer's underlying byte slice, that is,\n     * the total space allocated for the buffer's data. */\n    readonly capacity: number;\n    /** Discards all but the first `n` unread bytes from the buffer but\n     * continues to use the same allocated storage. It throws if `n` is\n     * negative or greater than the length of the buffer. */\n    truncate(n: number): void;\n    /** Resets the buffer to be empty, but it retains the underlying storage for\n     * use by future writes. `.reset()` is the same as `.truncate(0)`. */\n    reset(): void;\n    /** Reads the next `p.length` bytes from the buffer or until the buffer is\n     * drained. Returns the number of bytes read. If the buffer has no data to\n     * return, the return is `Deno.EOF`. */\n    readSync(p: Uint8Array): number | EOF;\n    /** Reads the next `p.length` bytes from the buffer or until the buffer is\n     * drained. Resolves to the number of bytes read. If the buffer has no\n     * data to return, resolves to `Deno.EOF`. */\n    read(p: Uint8Array): Promise<number | EOF>;\n    writeSync(p: Uint8Array): number;\n    write(p: Uint8Array): Promise<number>;\n    /** Grows the buffer's capacity, if necessary, to guarantee space for\n     * another `n` bytes. After `.grow(n)`, at least `n` bytes can be written to\n     * the buffer without another allocation. If `n` is negative, `.grow()` will\n     * throw. If the buffer can't grow it will throw an error.\n     *\n     * Based on Go Lang's\n     * [Buffer.Grow](https://golang.org/pkg/bytes/#Buffer.Grow). */\n    grow(n: number): void;\n    /** Reads data from `r` until `Deno.EOF` and appends it to the buffer,\n     * growing the buffer as needed. It resolves to the number of bytes read.\n     * If the buffer becomes too large, `.readFrom()` will reject with an error.\n     *\n     * Based on Go Lang's\n     * [Buffer.ReadFrom](https://golang.org/pkg/bytes/#Buffer.ReadFrom). */\n    readFrom(r: Reader): Promise<number>;\n    /** Reads data from `r` until `Deno.EOF` and appends it to the buffer,\n     * growing the buffer as needed. It returns the number of bytes read. If the\n     * buffer becomes too large, `.readFromSync()` will throw an error.\n     *\n     * Based on Go Lang's\n     * [Buffer.ReadFrom](https://golang.org/pkg/bytes/#Buffer.ReadFrom). */\n    readFromSync(r: SyncReader): number;\n  }\n\n  /** Read `r` until `Deno.EOF` and resolves to the content as\n   * `Uint8Array`. */\n  export function readAll(r: Reader): Promise<Uint8Array>;\n\n  /** Read `r` until `Deno.EOF` and returns the content as `Uint8Array`. */\n  export function readAllSync(r: SyncReader): Uint8Array;\n\n  /** Write all the content of `arr` to `w`. */\n  export function writeAll(w: Writer, arr: Uint8Array): Promise<void>;\n\n  /** Synchronously write all the content of `arr` to `w`. */\n  export function writeAllSync(w: SyncWriter, arr: Uint8Array): void;\n\n  // @url js/mkdir.d.ts\n\n  export interface MkdirOptions {\n    /** Defaults to `false`. If set to `true`, means that any intermediate\n     * directories will also be created (as with the shell command `mkdir -p`).\n     * Intermediate directories are created with the same permissions.\n     * When recursive is set to `true`, succeeds silently (without changing any\n     * permissions) if a directory already exists at the path. */\n    recursive?: boolean;\n    /** Permissions to use when creating the directory (defaults to `0o777`,\n     * before the process's umask).\n     * Ignored on Windows. */\n    mode?: number;\n  }\n\n  /** Synchronously creates a new directory with the specified path.\n   *\n   *       Deno.mkdirSync(\"new_dir\");\n   *       Deno.mkdirSync(\"nested/directories\", { recursive: true });\n   *\n   * Requires `allow-write` permission. */\n  export function mkdirSync(path: string, options?: MkdirOptions): void;\n\n  /** @deprecated */\n  export function mkdirSync(\n    path: string,\n    recursive?: boolean,\n    mode?: number\n  ): void;\n\n  /** Creates a new directory with the specified path.\n   *\n   *       await Deno.mkdir(\"new_dir\");\n   *       await Deno.mkdir(\"nested/directories\", { recursive: true });\n   *\n   * Requires `allow-write` permission. */\n  export function mkdir(path: string, options?: MkdirOptions): Promise<void>;\n\n  /** @deprecated */\n  export function mkdir(\n    path: string,\n    recursive?: boolean,\n    mode?: number\n  ): Promise<void>;\n\n  // @url js/make_temp.d.ts\n\n  export interface MakeTempOptions {\n    /** Directory where the temporary directory should be created (defaults to\n     * the env variable TMPDIR, or the system's default, usually /tmp). */\n    dir?: string;\n    /** String that should precede the random portion of the temporary\n     * directory's name. */\n    prefix?: string;\n    /** String that should follow the random portion of the temporary\n     * directory's name. */\n    suffix?: string;\n  }\n\n  /** Synchronously creates a new temporary directory in the directory `dir`,\n   * its name beginning with `prefix` and ending with `suffix`.\n   *\n   * It returns the full path to the newly created directory.\n   *\n   * If `dir` is unspecified, uses the default directory for temporary files.\n   * Multiple programs calling this function simultaneously will create different\n   * directories. It is the caller's responsibility to remove the directory when\n   * no longer needed.\n   *\n   *       const tempDirName0 = Deno.makeTempDirSync();\n   *       const tempDirName1 = Deno.makeTempDirSync({ prefix: 'my_temp' });\n   *\n   * Requires `allow-write` permission. */\n  // TODO(ry) Doesn't check permissions.\n  export function makeTempDirSync(options?: MakeTempOptions): string;\n\n  /** Creates a new temporary directory in the directory `dir`, its name\n   * beginning with `prefix` and ending with `suffix`.\n   *\n   * It resolves to the full path to the newly created directory.\n   *\n   * If `dir` is unspecified, uses the default directory for temporary files.\n   * Multiple programs calling this function simultaneously will create different\n   * directories. It is the caller's responsibility to remove the directory when\n   * no longer needed.\n   *\n   *       const tempDirName0 = await Deno.makeTempDir();\n   *       const tempDirName1 = await Deno.makeTempDir({ prefix: 'my_temp' });\n   *\n   * Requires `allow-write` permission. */\n  // TODO(ry) Doesn't check permissions.\n  export function makeTempDir(options?: MakeTempOptions): Promise<string>;\n\n  /** Synchronously creates a new temporary file in the directory `dir`, its name\n   * beginning with `prefix` and ending with `suffix`.\n   *\n   * It returns the full path to the newly created file.\n   *\n   * If `dir` is unspecified, uses the default directory for temporary files.\n   * Multiple programs calling this function simultaneously will create different\n   * files. It is the caller's responsibility to remove the file when\n   * no longer needed.\n   *\n   *       const tempFileName0 = Deno.makeTempFileSync();\n   *       const tempFileName1 = Deno.makeTempFileSync({ prefix: 'my_temp' });\n   *\n   * Requires `allow-write` permission. */\n  export function makeTempFileSync(options?: MakeTempOptions): string;\n\n  /** Creates a new temporary file in the directory `dir`, its name\n   * beginning with `prefix` and ending with `suffix`.\n   *\n   * It resolves to the full path to the newly created file.\n   *\n   * If `dir` is unspecified, uses the default directory for temporary files.\n   * Multiple programs calling this function simultaneously will create different\n   * files. It is the caller's responsibility to remove the file when\n   * no longer needed.\n   *\n   *       const tempFileName0 = await Deno.makeTempFile();\n   *       const tempFileName1 = await Deno.makeTempFile({ prefix: 'my_temp' });\n   *\n   * Requires `allow-write` permission. */\n  export function makeTempFile(options?: MakeTempOptions): Promise<string>;\n\n  // @url js/chmod.d.ts\n\n  /** Synchronously changes the permission of a specific file/directory of\n   * specified path.  Ignores the process's umask.\n   *\n   *       Deno.chmodSync(\"/path/to/file\", 0o666);\n   *\n   * For a full description, see [chmod](#chmod)\n   *\n   * NOTE: This API currently throws on Windows\n   *\n   * Requires `allow-write` permission. */\n  export function chmodSync(path: string, mode: number): void;\n\n  /** Changes the permission of a specific file/directory of specified path.\n   * Ignores the process's umask.\n   *\n   *       await Deno.chmod(\"/path/to/file\", 0o666);\n   *\n   * The mode is a sequence of 3 octal numbers.  The first/left-most number\n   * specifies the permissions for the owner.  The second number specifies the\n   * permissions for the group. The last/right-most number specifies the\n   * permissions for others.  For example, with a mode of 0o764, the owner (7) can\n   * read/write/execute, the group (6) can read/write and everyone else (4) can\n   * read only.\n   *\n   * | Number | Description |\n   * | ------ | ----------- |\n   * | 7      | read, write, and execute |\n   * | 6      | read and write |\n   * | 5      | read and execute |\n   * | 4      | read only |\n   * | 3      | write and execute |\n   * | 2      | write only |\n   * | 1      | execute only |\n   * | 0      | no permission |\n   *\n   * NOTE: This API currently throws on Windows\n   *\n   * Requires `allow-write` permission. */\n  export function chmod(path: string, mode: number): Promise<void>;\n\n  // @url js/chown.d.ts\n\n  /** Synchronously change owner of a regular file or directory. Linux/Mac OS\n   * only at the moment.\n   *\n   * Requires `allow-write` permission.\n   *\n   * @param path path to the file\n   * @param uid user id of the new owner\n   * @param gid group id of the new owner\n   */\n  export function chownSync(path: string, uid: number, gid: number): void;\n\n  /** Change owner of a regular file or directory. Linux/Mac OS only at the\n   * moment.\n   *\n   * Requires `allow-write` permission.\n   *\n   * @param path path to the file\n   * @param uid user id of the new owner\n   * @param gid group id of the new owner\n   */\n  export function chown(path: string, uid: number, gid: number): Promise<void>;\n\n  // @url js/utime.d.ts\n\n  /** **UNSTABLE**: needs investigation into high precision time.\n   *\n   * Synchronously changes the access and modification times of a file system\n   * object referenced by `path`. Given times are either in seconds (UNIX epoch\n   * time) or as `Date` objects.\n   *\n   *       Deno.utimeSync(\"myfile.txt\", 1556495550, new Date());\n   *\n   * Requires `allow-write` permission. */\n  export function utimeSync(\n    path: string,\n    atime: number | Date,\n    mtime: number | Date\n  ): void;\n\n  /** **UNSTABLE**: needs investigation into high precision time.\n   *\n   * Changes the access and modification times of a file system object\n   * referenced by `path`. Given times are either in seconds (UNIX epoch time)\n   * or as `Date` objects.\n   *\n   *       await Deno.utime(\"myfile.txt\", 1556495550, new Date());\n   *\n   * Requires `allow-write` permission. */\n  export function utime(\n    path: string,\n    atime: number | Date,\n    mtime: number | Date\n  ): Promise<void>;\n\n  // @url js/remove.d.ts\n\n  export interface RemoveOptions {\n    /** Defaults to `false`. If set to `true`, path will be removed even if\n     * it's a non-empty directory. */\n    recursive?: boolean;\n  }\n\n  /** Synchronously removes the named file or directory. Throws error if\n   * permission denied, path not found, or path is a non-empty directory and\n   * the `recursive` option isn't set to `true`.\n   *\n   *       Deno.removeSync(\"/path/to/dir/or/file\", { recursive: false });\n   *\n   * Requires `allow-write` permission. */\n  export function removeSync(path: string, options?: RemoveOptions): void;\n\n  /** Removes the named file or directory. Throws error if permission denied,\n   * path not found, or path is a non-empty directory and the `recursive`\n   * option isn't set to `true`.\n   *\n   *       await Deno.remove(\"/path/to/dir/or/file\", { recursive: false });\n   *\n   * Requires `allow-write` permission. */\n  export function remove(path: string, options?: RemoveOptions): Promise<void>;\n\n  // @url js/rename.d.ts\n\n  /** Synchronously renames (moves) `oldpath` to `newpath`. If `newpath` already\n   * exists and is not a directory, `renameSync()` replaces it. OS-specific\n   * restrictions may apply when `oldpath` and `newpath` are in different\n   * directories.\n   *\n   *       Deno.renameSync(\"old/path\", \"new/path\");\n   *\n   * Requires `allow-read` and `allow-write` permissions. */\n  export function renameSync(oldpath: string, newpath: string): void;\n\n  /** Renames (moves) `oldpath` to `newpath`. If `newpath` already exists and is\n   * not a directory, `rename()` replaces it. OS-specific restrictions may apply\n   * when `oldpath` and `newpath` are in different directories.\n   *\n   *       await Deno.rename(\"old/path\", \"new/path\");\n   *\n   * Requires `allow-read` and `allow-write`. */\n  export function rename(oldpath: string, newpath: string): Promise<void>;\n\n  // @url js/read_file.d.ts\n\n  /** Reads and returns the entire contents of a file.\n   *\n   *       const decoder = new TextDecoder(\"utf-8\");\n   *       const data = Deno.readFileSync(\"hello.txt\");\n   *       console.log(decoder.decode(data));\n   *\n   * Requires `allow-read` permission. */\n  export function readFileSync(path: string): Uint8Array;\n\n  /** Reads and resolves to the entire contents of a file.\n   *\n   *       const decoder = new TextDecoder(\"utf-8\");\n   *       const data = await Deno.readFile(\"hello.txt\");\n   *       console.log(decoder.decode(data));\n   *\n   * Requires `allow-read` permission. */\n  export function readFile(path: string): Promise<Uint8Array>;\n\n  // @url js/file_info.d.ts\n\n  /** A FileInfo describes a file and is returned by `stat`, `lstat`,\n   * `statSync`, `lstatSync`. A list of FileInfo is returned by `readdir`,\n   * `readdirSync`. */\n  export interface FileInfo {\n    /** The size of the file, in bytes. */\n    size: number;\n    /** The last modification time of the file. This corresponds to the `mtime`\n     * field from `stat` on Linux/Mac OS and `ftLastWriteTime` on Windows. This\n     * may not be available on all platforms. */\n    modified: number | null;\n    /** The last access time of the file. This corresponds to the `atime`\n     * field from `stat` on Unix and `ftLastAccessTime` on Windows. This may not\n     * be available on all platforms. */\n    accessed: number | null;\n    /** The last access time of the file. This corresponds to the `birthtime`\n     * field from `stat` on Mac/BSD and `ftCreationTime` on Windows. This may not\n     * be available on all platforms. */\n    created: number | null;\n    /** The file or directory name. */\n    name: string | null;\n    /** ID of the device containing the file.\n     *\n     * _Linux/Mac OS only._ */\n    dev: number | null;\n    /** Inode number.\n     *\n     * _Linux/Mac OS only._ */\n    ino: number | null;\n    /** **UNSTABLE**: Match behavior with Go on Windows for `mode`.\n     *\n     * The underlying raw `st_mode` bits that contain the standard Unix\n     * permissions for this file/directory. */\n    mode: number | null;\n    /** Number of hard links pointing to this file.\n     *\n     * _Linux/Mac OS only._ */\n    nlink: number | null;\n    /** User ID of the owner of this file.\n     *\n     * _Linux/Mac OS only._ */\n    uid: number | null;\n    /** User ID of the owner of this file.\n     *\n     * _Linux/Mac OS only._ */\n    gid: number | null;\n    /** Device ID of this file.\n     *\n     * _Linux/Mac OS only._ */\n    rdev: number | null;\n    /** Blocksize for filesystem I/O.\n     *\n     * _Linux/Mac OS only._ */\n    blksize: number | null;\n    /** Number of blocks allocated to the file, in 512-byte units.\n     *\n     * _Linux/Mac OS only._ */\n    blocks: number | null;\n    /** Returns whether this is info for a regular file. This result is mutually\n     * exclusive to `FileInfo.isDirectory` and `FileInfo.isSymlink`. */\n    isFile(): boolean;\n    /** Returns whether this is info for a regular directory. This result is\n     * mutually exclusive to `FileInfo.isFile` and `FileInfo.isSymlink`. */\n    isDirectory(): boolean;\n    /** Returns whether this is info for a symlink. This result is\n     * mutually exclusive to `FileInfo.isFile` and `FileInfo.isDirectory`. */\n    isSymlink(): boolean;\n  }\n\n  // @url js/realpath.d.ts\n\n  /** Returns absolute normalized path with, symbolic links resolved.\n   *\n   *       const realPath = Deno.realpathSync(\"./some/path\");\n   *\n   * Requires `allow-read` permission. */\n  export function realpathSync(path: string): string;\n\n  /** Resolves to the absolute normalized path, with symbolic links resolved.\n   *\n   *       const realPath = await Deno.realpath(\"./some/path\");\n   *\n   * Requires `allow-read` permission. */\n  export function realpath(path: string): Promise<string>;\n\n  // @url js/read_dir.d.ts\n\n  /** UNSTABLE: need to consider streaming case\n   *\n   * Synchronously reads the directory given by `path` and returns an array of\n   * `Deno.FileInfo`.\n   *\n   *       const files = Deno.readdirSync(\"/\");\n   *\n   * Requires `allow-read` permission. */\n  export function readdirSync(path: string): FileInfo[];\n\n  /** UNSTABLE: Maybe need to return an `AsyncIterable`.\n   *\n   * Reads the directory given by `path` and resolves to an array of `Deno.FileInfo`.\n   *\n   *       const files = await Deno.readdir(\"/\");\n   *\n   * Requires `allow-read` permission. */\n  export function readdir(path: string): Promise<FileInfo[]>;\n\n  // @url js/copy_file.d.ts\n\n  /** Synchronously copies the contents and permissions of one file to another\n   * specified path, by default creating a new file if needed, else overwriting.\n   * Fails if target path is a directory or is unwritable.\n   *\n   *       Deno.copyFileSync(\"from.txt\", \"to.txt\");\n   *\n   * Requires `allow-read` permission on fromPath.\n   * Requires `allow-write` permission on toPath. */\n  export function copyFileSync(fromPath: string, toPath: string): void;\n\n  /** Copies the contents and permissions of one file to another specified path,\n   * by default creating a new file if needed, else overwriting. Fails if target\n   * path is a directory or is unwritable.\n   *\n   *       await Deno.copyFile(\"from.txt\", \"to.txt\");\n   *\n   * Requires `allow-read` permission on fromPath.\n   * Requires `allow-write` permission on toPath. */\n  export function copyFile(fromPath: string, toPath: string): Promise<void>;\n\n  // @url js/read_link.d.ts\n\n  /** Returns the destination of the named symbolic link.\n   *\n   *       const targetPath = Deno.readlinkSync(\"symlink/path\");\n   *\n   * Requires `allow-read` permission. */\n  export function readlinkSync(path: string): string;\n\n  /** Resolves to the destination of the named symbolic link.\n   *\n   *       const targetPath = await Deno.readlink(\"symlink/path\");\n   *\n   * Requires `allow-read` permission. */\n  export function readlink(path: string): Promise<string>;\n\n  // @url js/stat.d.ts\n\n  /** Resolves to a `Deno.FileInfo` for the specified `path`. If `path` is a\n   * symlink, information for the symlink will be returned.\n   *\n   *       const fileInfo = await Deno.lstat(\"hello.txt\");\n   *       assert(fileInfo.isFile());\n   *\n   * Requires `allow-read` permission. */\n  export function lstat(path: string): Promise<FileInfo>;\n\n  /** Synchronously returns a `Deno.FileInfo` for the specified `path`. If\n   * `path` is a symlink, information for the symlink will be returned.\n   *\n   *       const fileInfo = Deno.lstatSync(\"hello.txt\");\n   *       assert(fileInfo.isFile());\n   *\n   * Requires `allow-read` permission. */\n  export function lstatSync(path: string): FileInfo;\n\n  /** Resolves to a `Deno.FileInfo` for the specified `path`. Will always\n   * follow symlinks.\n   *\n   *       const fileInfo = await Deno.stat(\"hello.txt\");\n   *       assert(fileInfo.isFile());\n   *\n   * Requires `allow-read` permission. */\n  export function stat(path: string): Promise<FileInfo>;\n\n  /** Synchronously returns a `Deno.FileInfo` for the specified `path`. Will\n   * always follow symlinks.\n   *\n   *       const fileInfo = Deno.statSync(\"hello.txt\");\n   *       assert(fileInfo.isFile());\n   *\n   * Requires `allow-read` permission. */\n  export function statSync(path: string): FileInfo;\n\n  // @url js/link.d.ts\n\n  /** Creates `newpath` as a hard link to `oldpath`.\n   *\n   *       Deno.linkSync(\"old/name\", \"new/name\");\n   *\n   * Requires `allow-read` and `allow-write` permissions. */\n  export function linkSync(oldpath: string, newpath: string): void;\n\n  /** Creates `newpath` as a hard link to `oldpath`.\n   *\n   *       await Deno.link(\"old/name\", \"new/name\");\n   *\n   * Requires `allow-read` and `allow-write` permissions. */\n  export function link(oldpath: string, newpath: string): Promise<void>;\n\n  // @url js/symlink.d.ts\n\n  /** **UNSTABLE**: `type` argument type may be changed to `\"dir\" | \"file\"`.\n   *\n   * Creates `newpath` as a symbolic link to `oldpath`. The type argument can be\n   * set to `dir` or `file`. Is only available on Windows and ignored on other\n   * platforms.\n   *\n   *       Deno.symlinkSync(\"old/name\", \"new/name\");\n   *\n   * Requires `allow-read` and `allow-write` permissions. */\n  export function symlinkSync(\n    oldpath: string,\n    newpath: string,\n    type?: string\n  ): void;\n\n  /** **UNSTABLE**: `type` argument may be changed to \"dir\" | \"file\"\n   *\n   * Creates `newpath` as a symbolic link to `oldpath`. The type argument can be\n   * set to `dir` or `file`. Is only available on Windows and ignored on other\n   * platforms.\n   *\n   *       await Deno.symlink(\"old/name\", \"new/name\");\n   *\n   * Requires `allow-read` and `allow-write` permissions. */\n  export function symlink(\n    oldpath: string,\n    newpath: string,\n    type?: string\n  ): Promise<void>;\n\n  // @url js/write_file.d.ts\n\n  /** Options for writing to a file. */\n  export interface WriteFileOptions {\n    /** Defaults to `false`. If set to `true`, will append to a file instead of\n     * overwriting previous contents. */\n    append?: boolean;\n    /** Sets the option to allow creating a new file, if one doesn't already\n     * exist at the specified path (defaults to `true`). */\n    create?: boolean;\n    /** Permissions always applied to file. */\n    mode?: number;\n  }\n\n  /** Synchronously write data to the given path, by default creating a new\n   * file if needed, else overwriting.\n   *\n   *       const encoder = new TextEncoder();\n   *       const data = encoder.encode(\"Hello world\\n\");\n   *       Deno.writeFileSync(\"hello.txt\", data);\n   *\n   * Requires `allow-write` permission, and `allow-read` if create is `false`.\n   */\n  export function writeFileSync(\n    path: string,\n    data: Uint8Array,\n    options?: WriteFileOptions\n  ): void;\n\n  /** Write data to the given path, by default creating a new file if needed,\n   * else overwriting.\n   *\n   *       const encoder = new TextEncoder();\n   *       const data = encoder.encode(\"Hello world\\n\");\n   *       await Deno.writeFile(\"hello.txt\", data);\n   *\n   * Requires `allow-write` permission, and `allow-read` if create is `false`.\n   */\n  export function writeFile(\n    path: string,\n    data: Uint8Array,\n    options?: WriteFileOptions\n  ): Promise<void>;\n\n  /** **UNSTABLE**: Should not have same name as `window.location` type. */\n  interface Location {\n    /** The full url for the module, e.g. `file://some/file.ts` or\n     * `https://some/file.ts`. */\n    filename: string;\n    /** The line number in the file. It is assumed to be 1-indexed. */\n    line: number;\n    /** The column number in the file. It is assumed to be 1-indexed. */\n    column: number;\n  }\n\n  /** UNSTABLE: new API, yet to be vetted.\n   *\n   * Given a current location in a module, lookup the source location and return\n   * it.\n   *\n   * When Deno transpiles code, it keep source maps of the transpiled code. This\n   * function can be used to lookup the original location. This is\n   * automatically done when accessing the `.stack` of an error, or when an\n   * uncaught error is logged. This function can be used to perform the lookup\n   * for creating better error handling.\n   *\n   * **Note:** `line` and `column` are 1 indexed, which matches display\n   * expectations, but is not typical of most index numbers in Deno.\n   *\n   * An example:\n   *\n   *       const orig = Deno.applySourceMap({\n   *         location: \"file://my/module.ts\",\n   *         line: 5,\n   *         column: 15\n   *       });\n   *       console.log(`${orig.filename}:${orig.line}:${orig.column}`);\n   */\n  export function applySourceMap(location: Location): Location;\n\n  /** A set of error constructors that are raised by Deno APIs. */\n  export const errors: {\n    NotFound: ErrorConstructor;\n    PermissionDenied: ErrorConstructor;\n    ConnectionRefused: ErrorConstructor;\n    ConnectionReset: ErrorConstructor;\n    ConnectionAborted: ErrorConstructor;\n    NotConnected: ErrorConstructor;\n    AddrInUse: ErrorConstructor;\n    AddrNotAvailable: ErrorConstructor;\n    BrokenPipe: ErrorConstructor;\n    AlreadyExists: ErrorConstructor;\n    InvalidData: ErrorConstructor;\n    TimedOut: ErrorConstructor;\n    Interrupted: ErrorConstructor;\n    WriteZero: ErrorConstructor;\n    UnexpectedEof: ErrorConstructor;\n    BadResource: ErrorConstructor;\n    Http: ErrorConstructor;\n  };\n\n  /** **UNSTABLE**: potentially want names to overlap more with browser.\n   *\n   * The permissions as granted by the caller.\n   *\n   * See: https://w3c.github.io/permissions/#permission-registry */\n  export type PermissionName =\n    | \"run\"\n    | \"read\"\n    | \"write\"\n    | \"net\"\n    | \"env\"\n    | \"plugin\"\n    | \"hrtime\";\n\n  /** The current status of the permission.\n   *\n   * See: https://w3c.github.io/permissions/#status-of-a-permission */\n  export type PermissionState = \"granted\" | \"denied\" | \"prompt\";\n\n  interface RunPermissionDescriptor {\n    name: \"run\";\n  }\n\n  interface ReadWritePermissionDescriptor {\n    name: \"read\" | \"write\";\n    path?: string;\n  }\n\n  interface NetPermissionDescriptor {\n    name: \"net\";\n    url?: string;\n  }\n\n  interface EnvPermissionDescriptor {\n    name: \"env\";\n  }\n\n  interface PluginPermissionDescriptor {\n    name: \"plugin\";\n  }\n\n  interface HrtimePermissionDescriptor {\n    name: \"hrtime\";\n  }\n\n  /** Permission descriptors which define a permission which can be queried,\n   * requested, or revoked.\n   *\n   * See: https://w3c.github.io/permissions/#permission-descriptor */\n  type PermissionDescriptor =\n    | RunPermissionDescriptor\n    | ReadWritePermissionDescriptor\n    | NetPermissionDescriptor\n    | EnvPermissionDescriptor\n    | PluginPermissionDescriptor\n    | HrtimePermissionDescriptor;\n\n  export class Permissions {\n    /** Resolves to the current status of a permission.\n     *\n     *       const status = await Deno.permissions.query({ name: \"read\", path: \"/etc\" });\n     *       if (status.state === \"granted\") {\n     *         data = await Deno.readFile(\"/etc/passwd\");\n     *       }\n     */\n    query(desc: PermissionDescriptor): Promise<PermissionStatus>;\n\n    /** Revokes a permission, and resolves to the state of the permission.\n     *\n     *       const status = await Deno.permissions.revoke({ name: \"run\" });\n     *       assert(status.state !== \"granted\")\n     */\n    revoke(desc: PermissionDescriptor): Promise<PermissionStatus>;\n\n    /** Requests the permission, and resolves to the state of the permission.\n     *\n     *       const status = await Deno.permissions.request({ name: \"env\" });\n     *       if (status.state === \"granted\") {\n     *         console.log(Deno.homeDir());\n     *       } else {\n     *         console.log(\"'env' permission is denied.\");\n     *       }\n     */\n    request(desc: PermissionDescriptor): Promise<PermissionStatus>;\n  }\n\n  /** **UNSTABLE**: maybe move to `navigator.permissions` to match web API. */\n  export const permissions: Permissions;\n\n  /** see: https://w3c.github.io/permissions/#permissionstatus */\n  export class PermissionStatus {\n    state: PermissionState;\n    constructor(state: PermissionState);\n  }\n\n  // @url js/truncate.d.ts\n\n  /** Synchronously truncates or extends the specified file, to reach the\n   * specified `len`.\n   *\n   *       Deno.truncateSync(\"hello.txt\", 10);\n   *\n   * Requires `allow-write` permission. */\n  export function truncateSync(name: string, len?: number): void;\n\n  /** Truncates or extends the specified file, to reach the specified `len`.\n   *\n   *       await Deno.truncate(\"hello.txt\", 10);\n   *\n   * Requires `allow-write` permission. */\n  export function truncate(name: string, len?: number): Promise<void>;\n\n  export interface AsyncHandler {\n    (msg: Uint8Array): void;\n  }\n\n  export interface PluginOp {\n    dispatch(\n      control: Uint8Array,\n      zeroCopy?: ArrayBufferView | null\n    ): Uint8Array | null;\n    setAsyncHandler(handler: AsyncHandler): void;\n  }\n\n  export interface Plugin {\n    ops: {\n      [name: string]: PluginOp;\n    };\n  }\n\n  /** **UNSTABLE**: new API, yet to be vetted.\n   *\n   * Open and initalize a plugin.\n   *\n   *        const plugin = Deno.openPlugin(\"./path/to/some/plugin.so\");\n   *        const some_op = plugin.ops.some_op;\n   *        const response = some_op.dispatch(new Uint8Array([1,2,3,4]));\n   *        console.log(`Response from plugin ${response}`);\n   *\n   * Requires `allow-plugin` permission. */\n  export function openPlugin(filename: string): Plugin;\n\n  export type Transport = \"tcp\" | \"udp\";\n\n  export interface Addr {\n    transport: Transport;\n    hostname: string;\n    port: number;\n  }\n\n  export interface UDPAddr {\n    port: number;\n    transport?: Transport;\n    hostname?: string;\n  }\n\n  /** **UNSTABLE**: Maybe remove `ShutdownMode` entirely.\n   *\n   * Corresponds to `SHUT_RD`, `SHUT_WR`, `SHUT_RDWR` on POSIX-like systems.\n   *\n   * See: http://man7.org/linux/man-pages/man2/shutdown.2.html */\n  export enum ShutdownMode {\n    Read = 0,\n    Write,\n    ReadWrite // TODO(ry) panics on ReadWrite.\n  }\n\n  /** **UNSTABLE**: Maybe should remove `how` parameter maybe remove\n   * `ShutdownMode` entirely.\n   *\n   * Shutdown socket send and receive operations.\n   *\n   * Matches behavior of POSIX shutdown(3).\n   *\n   *       const listener = Deno.listen({ port: 80 });\n   *       const conn = await listener.accept();\n   *       Deno.shutdown(conn.rid, Deno.ShutdownMode.Write);\n   */\n  export function shutdown(rid: number, how: ShutdownMode): void;\n\n  /** **UNSTABLE**: new API, yet to be vetted.\n   *\n   * Waits for the next message to the passed `rid` and writes it on the passed\n   * `Uint8Array`.\n   *\n   * Resolves to the number of bytes written and the remote address. */\n  export function recvfrom(rid: number, p: Uint8Array): Promise<[number, Addr]>;\n\n  /** **UNSTABLE**: new API, yet to be vetted.\n   *\n   * A generic transport listener for message-oriented protocols. */\n  export interface UDPConn extends AsyncIterable<[Uint8Array, Addr]> {\n    /** **UNSTABLE**: new API, yet to be vetted.\n     *\n     * Waits for and resolves to the next message to the `UDPConn`. */\n    receive(p?: Uint8Array): Promise<[Uint8Array, Addr]>;\n    /** UNSTABLE: new API, yet to be vetted.\n     *\n     * Sends a message to the target. */\n    send(p: Uint8Array, addr: UDPAddr): Promise<void>;\n    /** UNSTABLE: new API, yet to be vetted.\n     *\n     * Close closes the socket. Any pending message promises will be rejected\n     * with errors. */\n    close(): void;\n    /** Return the address of the `UDPConn`. */\n    readonly addr: Addr;\n    [Symbol.asyncIterator](): AsyncIterator<[Uint8Array, Addr]>;\n  }\n\n  /** A generic network listener for stream-oriented protocols. */\n  export interface Listener extends AsyncIterable<Conn> {\n    /** Waits for and resolves to the next connection to the `Listener`. */\n    accept(): Promise<Conn>;\n    /** Close closes the listener. Any pending accept promises will be rejected\n     * with errors. */\n    close(): void;\n    /** Return the address of the `Listener`. */\n    readonly addr: Addr;\n    [Symbol.asyncIterator](): AsyncIterator<Conn>;\n  }\n\n  export interface Conn extends Reader, Writer, Closer {\n    /** The local address of the connection. */\n    readonly localAddr: Addr;\n    /** The remote address of the connection. */\n    readonly remoteAddr: Addr;\n    /** The resource ID of the connection. */\n    readonly rid: number;\n    /** Shuts down (`shutdown(2)`) the reading side of the TCP connection. Most\n     * callers should just use `close()`. */\n    closeRead(): void;\n    /** Shuts down (`shutdown(2)`) the writing side of the TCP connection. Most\n     * callers should just use `close()`. */\n    closeWrite(): void;\n  }\n\n  export interface ListenOptions {\n    /** The port to listen on. */\n    port: number;\n    /** A literal IP address or host name that can be resolved to an IP address.\n     * If not specified, defaults to `0.0.0.0`. */\n    hostname?: string;\n    /** Either `\"tcp\"` or `\"udp\"`. Defaults to `\"tcp\"`.\n     *\n     * In the future: `\"tcp4\"`, `\"tcp6\"`, `\"udp4\"`, `\"udp6\"`, `\"ip\"`, `\"ip4\"`,\n     * `\"ip6\"`, `\"unix\"`, `\"unixgram\"`, and `\"unixpacket\"`. */\n    transport?: Transport;\n  }\n\n  /** **UNSTABLE**: new API\n   *\n   * Listen announces on the local transport address.\n   *\n   *      Deno.listen({ port: 80 })\n   *      Deno.listen({ hostname: \"192.0.2.1\", port: 80 })\n   *      Deno.listen({ hostname: \"[2001:db8::1]\", port: 80 });\n   *      Deno.listen({ hostname: \"golang.org\", port: 80, transport: \"tcp\" });\n   *\n   * Requires `allow-net` permission. */\n  export function listen(\n    options: ListenOptions & { transport?: \"tcp\" }\n  ): Listener;\n  /** **UNSTABLE**: new API\n   *\n   * Listen announces on the local transport address.\n   *\n   *      Deno.listen({ port: 80 })\n   *      Deno.listen({ hostname: \"192.0.2.1\", port: 80 })\n   *      Deno.listen({ hostname: \"[2001:db8::1]\", port: 80 });\n   *      Deno.listen({ hostname: \"golang.org\", port: 80, transport: \"tcp\" });\n   *\n   * Requires `allow-net` permission. */\n  export function listen(\n    options: ListenOptions & { transport: \"udp\" }\n  ): UDPConn;\n  /** **UNSTABLE**: new API\n   *\n   * Listen announces on the local transport address.\n   *\n   *      Deno.listen({ port: 80 })\n   *      Deno.listen({ hostname: \"192.0.2.1\", port: 80 })\n   *      Deno.listen({ hostname: \"[2001:db8::1]\", port: 80 });\n   *      Deno.listen({ hostname: \"golang.org\", port: 80, transport: \"tcp\" });\n   *\n   * Requires `allow-net` permission. */\n  export function listen(options: ListenOptions): Listener | UDPConn;\n\n  export interface ListenTLSOptions extends ListenOptions {\n    /** Server certificate file. */\n    certFile: string;\n    /** Server public key file. */\n    keyFile: string;\n  }\n\n  /** Listen announces on the local transport address over TLS (transport layer\n   * security).\n   *\n   *      Deno.listenTLS({ port: 443, certFile: \"./my_server.crt\", keyFile: \"./my_server.key\" });\n   *\n   * Requires `allow-net` permission. */\n  export function listenTLS(options: ListenTLSOptions): Listener;\n\n  export interface ConnectOptions {\n    /** The port to connect to. */\n    port: number;\n    /** A literal IP address or host name that can be resolved to an IP address.\n     * If not specified, defaults to `127.0.0.1`. */\n    hostname?: string;\n    /** Either `\"tcp\"` or `\"udp\"`. Defaults to `\"tcp\"`.\n     *\n     * In the future: `\"tcp4\"`, `\"tcp6\"`, `\"udp4\"`, `\"udp6\"`, `\"ip\"`, `\"ip4\"`,\n     * `\"ip6\"`, `\"unix\"`, `\"unixgram\"`, and `\"unixpacket\"`. */\n    transport?: Transport;\n  }\n\n  /**\n   * Connects to the address on the named transport.\n   *\n   *     Deno.connect({ port: 80 })\n   *     Deno.connect({ hostname: \"192.0.2.1\", port: 80 })\n   *     Deno.connect({ hostname: \"[2001:db8::1]\", port: 80 });\n   *     Deno.connect({ hostname: \"golang.org\", port: 80, transport: \"tcp\" })\n   *\n   * Requires `allow-net` permission. */\n  export function connect(options: ConnectOptions): Promise<Conn>;\n\n  export interface ConnectTLSOptions {\n    /** The port to connect to. */\n    port: number;\n    /** A literal IP address or host name that can be resolved to an IP address.\n     * If not specified, defaults to `127.0.0.1`. */\n    hostname?: string;\n    /** Server certificate file. */\n    certFile?: string;\n  }\n\n  /** Establishes a secure connection over TLS (transport layer security).\n   *\n   * Requires `allow-net` permission. */\n  export function connectTLS(options: ConnectTLSOptions): Promise<Conn>;\n\n  /** **UNSTABLE**: not sure if broken or not */\n  export interface Metrics {\n    opsDispatched: number;\n    opsDispatchedSync: number;\n    opsDispatchedAsync: number;\n    opsDispatchedAsyncUnref: number;\n    opsCompleted: number;\n    opsCompletedSync: number;\n    opsCompletedAsync: number;\n    opsCompletedAsyncUnref: number;\n    bytesSentControl: number;\n    bytesSentData: number;\n    bytesReceived: number;\n  }\n\n  /** **UNSTABLE**: potentially broken.\n   *\n   * Receive metrics from the privileged side of Deno.\n   *\n   *      > console.table(Deno.metrics())\n   *      ┌─────────────────────────┬────────┐\n   *      │         (index)         │ Values │\n   *      ├─────────────────────────┼────────┤\n   *      │      opsDispatched      │   3    │\n   *      │    opsDispatchedSync    │   2    │\n   *      │   opsDispatchedAsync    │   1    │\n   *      │ opsDispatchedAsyncUnref │   0    │\n   *      │      opsCompleted       │   3    │\n   *      │    opsCompletedSync     │   2    │\n   *      │    opsCompletedAsync    │   1    │\n   *      │ opsCompletedAsyncUnref  │   0    │\n   *      │    bytesSentControl     │   73   │\n   *      │      bytesSentData      │   0    │\n   *      │      bytesReceived      │  375   │\n   *      └─────────────────────────┴────────┘\n   */\n  export function metrics(): Metrics;\n\n  /** **UNSTABLE**: reconsider representation. */\n  interface ResourceMap {\n    [rid: number]: string;\n  }\n\n  /** **UNSTABLE**: reconsider return type.\n   *\n   * Returns a map of open _file like_ resource ids along with their string\n   * representations. */\n  export function resources(): ResourceMap;\n\n  /** **UNSTABLE**: new API. Needs docs. */\n  export interface FsEvent {\n    kind: \"any\" | \"access\" | \"create\" | \"modify\" | \"remove\";\n    paths: string[];\n  }\n\n  /** **UNSTABLE**: new API. Needs docs.\n   *\n   * Recursive option is `true` by default. */\n  export function fsEvents(\n    paths: string | string[],\n    options?: { recursive: boolean }\n  ): AsyncIterableIterator<FsEvent>;\n\n  /** How to handle subprocess stdio.\n   *\n   * `\"inherit\"` The default if unspecified. The child inherits from the\n   * corresponding parent descriptor.\n   *\n   * `\"piped\"` A new pipe should be arranged to connect the parent and child\n   * sub-processes.\n   *\n   * `\"null\"` This stream will be ignored. This is the equivalent of attaching\n   * the stream to `/dev/null`. */\n  type ProcessStdio = \"inherit\" | \"piped\" | \"null\";\n\n  /** **UNSTABLE**: the `signo` argument maybe shouldn't be number. Should throw\n   * on Windows instead of silently succeeding.\n   *\n   * Send a signal to process under given `pid`. Linux/Mac OS only currently.\n   *\n   * If `pid` is negative, the signal will be sent to the process group\n   * identified by `pid`.\n   *\n   * Currently no-op on Windows.\n   *\n   * Requires `allow-run` permission. */\n  export function kill(pid: number, signo: number): void;\n\n  /** **UNSTABLE**: There are some issues to work out with respect to when and\n   * how the process should be closed. */\n  export class Process {\n    readonly rid: number;\n    readonly pid: number;\n    readonly stdin?: WriteCloser;\n    readonly stdout?: ReadCloser;\n    readonly stderr?: ReadCloser;\n    /** Resolves to the current status of the process. */\n    status(): Promise<ProcessStatus>;\n    /** Buffer the stdout and return it as `Uint8Array` after `Deno.EOF`.\n     *\n     * You must set stdout to `\"piped\"` when creating the process.\n     *\n     * This calls `close()` on stdout after its done. */\n    output(): Promise<Uint8Array>;\n    /** Buffer the stderr and return it as `Uint8Array` after `Deno.EOF`.\n     *\n     * You must set stderr to `\"piped\"` when creating the process.\n     *\n     * This calls `close()` on stderr after its done. */\n    stderrOutput(): Promise<Uint8Array>;\n    close(): void;\n    kill(signo: number): void;\n  }\n\n  export interface ProcessStatus {\n    success: boolean;\n    code?: number;\n    signal?: number;\n  }\n\n  /** **UNSTABLE**:  Maybe rename `args` to `argv` to differentiate from\n   * `Deno.args`. */\n  export interface RunOptions {\n    /** Arguments to pass. Note, the first element needs to be a path to the\n     * binary */\n    args: string[];\n    cwd?: string;\n    env?: {\n      [key: string]: string;\n    };\n    stdout?: ProcessStdio | number;\n    stderr?: ProcessStdio | number;\n    stdin?: ProcessStdio | number;\n  }\n\n  /** Spawns new subprocess.\n   *\n   * Subprocess uses same working directory as parent process unless `opt.cwd`\n   * is specified.\n   *\n   * Environmental variables for subprocess can be specified using `opt.env`\n   * mapping.\n   *\n   * By default subprocess inherits stdio of parent process. To change that\n   * `opt.stdout`, `opt.stderr` and `opt.stdin` can be specified independently -\n   * they can be set to either `ProcessStdio` or `rid` of open file.\n   *\n   * Requires `allow-run` permission. */\n  export function run(opt: RunOptions): Process;\n\n  enum LinuxSignal {\n    SIGHUP = 1,\n    SIGINT = 2,\n    SIGQUIT = 3,\n    SIGILL = 4,\n    SIGTRAP = 5,\n    SIGABRT = 6,\n    SIGBUS = 7,\n    SIGFPE = 8,\n    SIGKILL = 9,\n    SIGUSR1 = 10,\n    SIGSEGV = 11,\n    SIGUSR2 = 12,\n    SIGPIPE = 13,\n    SIGALRM = 14,\n    SIGTERM = 15,\n    SIGSTKFLT = 16,\n    SIGCHLD = 17,\n    SIGCONT = 18,\n    SIGSTOP = 19,\n    SIGTSTP = 20,\n    SIGTTIN = 21,\n    SIGTTOU = 22,\n    SIGURG = 23,\n    SIGXCPU = 24,\n    SIGXFSZ = 25,\n    SIGVTALRM = 26,\n    SIGPROF = 27,\n    SIGWINCH = 28,\n    SIGIO = 29,\n    SIGPWR = 30,\n    SIGSYS = 31\n  }\n  enum MacOSSignal {\n    SIGHUP = 1,\n    SIGINT = 2,\n    SIGQUIT = 3,\n    SIGILL = 4,\n    SIGTRAP = 5,\n    SIGABRT = 6,\n    SIGEMT = 7,\n    SIGFPE = 8,\n    SIGKILL = 9,\n    SIGBUS = 10,\n    SIGSEGV = 11,\n    SIGSYS = 12,\n    SIGPIPE = 13,\n    SIGALRM = 14,\n    SIGTERM = 15,\n    SIGURG = 16,\n    SIGSTOP = 17,\n    SIGTSTP = 18,\n    SIGCONT = 19,\n    SIGCHLD = 20,\n    SIGTTIN = 21,\n    SIGTTOU = 22,\n    SIGIO = 23,\n    SIGXCPU = 24,\n    SIGXFSZ = 25,\n    SIGVTALRM = 26,\n    SIGPROF = 27,\n    SIGWINCH = 28,\n    SIGINFO = 29,\n    SIGUSR1 = 30,\n    SIGUSR2 = 31\n  }\n\n  /** **UNSTABLE**: make platform independent.\n   *\n   * Signals numbers. This is platform dependent. */\n  export const Signal: typeof MacOSSignal | typeof LinuxSignal;\n\n  /** **UNSTABLE**: rename to `InspectOptions`. */\n  interface ConsoleOptions {\n    showHidden?: boolean;\n    depth?: number;\n    colors?: boolean;\n    indentLevel?: number;\n  }\n\n  /** **UNSTABLE**: `ConsoleOptions` rename to `InspectOptions`. Also the exact\n   * form of string output subject to change.\n   *\n   * Converts input into string that has the same format as printed by\n   * `console.log()`. */\n  export function inspect(value: unknown, options?: ConsoleOptions): string;\n\n  export type OperatingSystem = \"mac\" | \"win\" | \"linux\";\n\n  export type Arch = \"x64\" | \"arm64\";\n\n  interface BuildInfo {\n    /** The CPU architecture. */\n    arch: Arch;\n    /** The operating system. */\n    os: OperatingSystem;\n  }\n\n  /** Build related information. */\n  export const build: BuildInfo;\n\n  interface Version {\n    deno: string;\n    v8: string;\n    typescript: string;\n  }\n  /** Version related information. */\n  export const version: Version;\n\n  /** The log category for a diagnostic message. */\n  export enum DiagnosticCategory {\n    Log = 0,\n    Debug = 1,\n    Info = 2,\n    Error = 3,\n    Warning = 4,\n    Suggestion = 5\n  }\n\n  export interface DiagnosticMessageChain {\n    message: string;\n    category: DiagnosticCategory;\n    code: number;\n    next?: DiagnosticMessageChain[];\n  }\n\n  export interface DiagnosticItem {\n    /** A string message summarizing the diagnostic. */\n    message: string;\n    /** An ordered array of further diagnostics. */\n    messageChain?: DiagnosticMessageChain;\n    /** Information related to the diagnostic. This is present when there is a\n     * suggestion or other additional diagnostic information */\n    relatedInformation?: DiagnosticItem[];\n    /** The text of the source line related to the diagnostic. */\n    sourceLine?: string;\n    /** The line number that is related to the diagnostic. */\n    lineNumber?: number;\n    /** The name of the script resource related to the diagnostic. */\n    scriptResourceName?: string;\n    /** The start position related to the diagnostic. */\n    startPosition?: number;\n    /** The end position related to the diagnostic. */\n    endPosition?: number;\n    /** The category of the diagnostic. */\n    category: DiagnosticCategory;\n    /** A number identifier. */\n    code: number;\n    /** The the start column of the sourceLine related to the diagnostic. */\n    startColumn?: number;\n    /** The end column of the sourceLine related to the diagnostic. */\n    endColumn?: number;\n  }\n\n  export interface Diagnostic {\n    /** An array of diagnostic items. */\n    items: DiagnosticItem[];\n  }\n\n  /** **UNSTABLE**: new API, yet to be vetted.\n   *\n   * Format an array of diagnostic items and return them as a single string.\n   * @param items An array of diagnostic items to format\n   */\n  export function formatDiagnostics(items: DiagnosticItem[]): string;\n\n  /** **UNSTABLE**: new API, yet to be vetted.\n   *\n   * A specific subset TypeScript compiler options that can be supported by the\n   * Deno TypeScript compiler. */\n  export interface CompilerOptions {\n    /** Allow JavaScript files to be compiled. Defaults to `true`. */\n    allowJs?: boolean;\n    /** Allow default imports from modules with no default export. This does not\n     * affect code emit, just typechecking. Defaults to `false`. */\n    allowSyntheticDefaultImports?: boolean;\n    /** Allow accessing UMD globals from modules. Defaults to `false`. */\n    allowUmdGlobalAccess?: boolean;\n    /** Do not report errors on unreachable code. Defaults to `false`. */\n    allowUnreachableCode?: boolean;\n    /** Do not report errors on unused labels. Defaults to `false` */\n    allowUnusedLabels?: boolean;\n    /** Parse in strict mode and emit `\"use strict\"` for each source file.\n     * Defaults to `true`. */\n    alwaysStrict?: boolean;\n    /** Base directory to resolve non-relative module names. Defaults to\n     * `undefined`. */\n    baseUrl?: string;\n    /** Report errors in `.js` files. Use in conjunction with `allowJs`. Defaults\n     * to `false`. */\n    checkJs?: boolean;\n    /** Generates corresponding `.d.ts` file. Defaults to `false`. */\n    declaration?: boolean;\n    /** Output directory for generated declaration files. */\n    declarationDir?: string;\n    /** Generates a source map for each corresponding `.d.ts` file. Defaults to\n     * `false`. */\n    declarationMap?: boolean;\n    /** Provide full support for iterables in `for..of`, spread and\n     * destructuring when targeting ES5 or ES3. Defaults to `false`. */\n    downlevelIteration?: boolean;\n    /** Emit a UTF-8 Byte Order Mark (BOM) in the beginning of output files.\n     * Defaults to `false`. */\n    emitBOM?: boolean;\n    /** Only emit `.d.ts` declaration files. Defaults to `false`. */\n    emitDeclarationOnly?: boolean;\n    /** Emit design-type metadata for decorated declarations in source. See issue\n     * [microsoft/TypeScript#2577](https://github.com/Microsoft/TypeScript/issues/2577)\n     * for details. Defaults to `false`. */\n    emitDecoratorMetadata?: boolean;\n    /** Emit `__importStar` and `__importDefault` helpers for runtime babel\n     * ecosystem compatibility and enable `allowSyntheticDefaultImports` for type\n     * system compatibility. Defaults to `true`. */\n    esModuleInterop?: boolean;\n    /** Enables experimental support for ES decorators. Defaults to `false`. */\n    experimentalDecorators?: boolean;\n    /** Emit a single file with source maps instead of having a separate file.\n     * Defaults to `false`. */\n    inlineSourceMap?: boolean;\n    /** Emit the source alongside the source maps within a single file; requires\n     * `inlineSourceMap` or `sourceMap` to be set. Defaults to `false`. */\n    inlineSources?: boolean;\n    /** Perform additional checks to ensure that transpile only would be safe.\n     * Defaults to `false`. */\n    isolatedModules?: boolean;\n    /** Support JSX in `.tsx` files: `\"react\"`, `\"preserve\"`, `\"react-native\"`.\n     * Defaults to `\"react\"`. */\n    jsx?: \"react\" | \"preserve\" | \"react-native\";\n    /** Specify the JSX factory function to use when targeting react JSX emit,\n     * e.g. `React.createElement` or `h`. Defaults to `React.createElement`. */\n    jsxFactory?: string;\n    /** Resolve keyof to string valued property names only (no numbers or\n     * symbols). Defaults to `false`. */\n    keyofStringsOnly?: string;\n    /** Emit class fields with ECMAScript-standard semantics. Defaults to `false`.\n     * Does not apply to `\"esnext\"` target. */\n    useDefineForClassFields?: boolean;\n    /** List of library files to be included in the compilation. If omitted,\n     * then the Deno main runtime libs are used. */\n    lib?: string[];\n    /** The locale to use to show error messages. */\n    locale?: string;\n    /** Specifies the location where debugger should locate map files instead of\n     * generated locations. Use this flag if the `.map` files will be located at\n     * run-time in a different location than the `.js` files. The location\n     * specified will be embedded in the source map to direct the debugger where\n     * the map files will be located. Defaults to `undefined`. */\n    mapRoot?: string;\n    /** Specify the module format for the emitted code. Defaults to\n     * `\"esnext\"`. */\n    module?:\n      | \"none\"\n      | \"commonjs\"\n      | \"amd\"\n      | \"system\"\n      | \"umd\"\n      | \"es6\"\n      | \"es2015\"\n      | \"esnext\";\n    /** Do not generate custom helper functions like `__extends` in compiled\n     * output. Defaults to `false`. */\n    noEmitHelpers?: boolean;\n    /** Report errors for fallthrough cases in switch statement. Defaults to\n     * `false`. */\n    noFallthroughCasesInSwitch?: boolean;\n    /** Raise error on expressions and declarations with an implied any type.\n     * Defaults to `true`. */\n    noImplicitAny?: boolean;\n    /** Report an error when not all code paths in function return a value.\n     * Defaults to `false`. */\n    noImplicitReturns?: boolean;\n    /** Raise error on `this` expressions with an implied `any` type. Defaults to\n     * `true`. */\n    noImplicitThis?: boolean;\n    /** Do not emit `\"use strict\"` directives in module output. Defaults to\n     * `false`. */\n    noImplicitUseStrict?: boolean;\n    /** Do not add triple-slash references or module import targets to the list of\n     * compiled files. Defaults to `false`. */\n    noResolve?: boolean;\n    /** Disable strict checking of generic signatures in function types. Defaults\n     * to `false`. */\n    noStrictGenericChecks?: boolean;\n    /** Report errors on unused locals. Defaults to `false`. */\n    noUnusedLocals?: boolean;\n    /** Report errors on unused parameters. Defaults to `false`. */\n    noUnusedParameters?: boolean;\n    /** Redirect output structure to the directory. This only impacts\n     * `Deno.compile` and only changes the emitted file names. Defaults to\n     * `undefined`. */\n    outDir?: string;\n    /** List of path mapping entries for module names to locations relative to the\n     * `baseUrl`. Defaults to `undefined`. */\n    paths?: Record<string, string[]>;\n    /** Do not erase const enum declarations in generated code. Defaults to\n     * `false`. */\n    preserveConstEnums?: boolean;\n    /** Remove all comments except copy-right header comments beginning with\n     * `/*!`. Defaults to `true`. */\n    removeComments?: boolean;\n    /** Include modules imported with `.json` extension. Defaults to `true`. */\n    resolveJsonModule?: boolean;\n    /** Specifies the root directory of input files. Only use to control the\n     * output directory structure with `outDir`. Defaults to `undefined`. */\n    rootDir?: string;\n    /** List of _root_ folders whose combined content represent the structure of\n     * the project at runtime. Defaults to `undefined`. */\n    rootDirs?: string[];\n    /** Generates corresponding `.map` file. Defaults to `false`. */\n    sourceMap?: boolean;\n    /** Specifies the location where debugger should locate TypeScript files\n     * instead of source locations. Use this flag if the sources will be located\n     * at run-time in a different location than that at design-time. The location\n     * specified will be embedded in the sourceMap to direct the debugger where\n     * the source files will be located. Defaults to `undefined`. */\n    sourceRoot?: string;\n    /** Enable all strict type checking options. Enabling `strict` enables\n     * `noImplicitAny`, `noImplicitThis`, `alwaysStrict`, `strictBindCallApply`,\n     * `strictNullChecks`, `strictFunctionTypes` and\n     * `strictPropertyInitialization`. Defaults to `true`. */\n    strict?: boolean;\n    /** Enable stricter checking of the `bind`, `call`, and `apply` methods on\n     * functions. Defaults to `true`. */\n    strictBindCallApply?: boolean;\n    /** Disable bivariant parameter checking for function types. Defaults to\n     * `true`. */\n    strictFunctionTypes?: boolean;\n    /** Ensure non-undefined class properties are initialized in the constructor.\n     * This option requires `strictNullChecks` be enabled in order to take effect.\n     * Defaults to `true`. */\n    strictPropertyInitialization?: boolean;\n    /** In strict null checking mode, the `null` and `undefined` values are not in\n     * the domain of every type and are only assignable to themselves and `any`\n     * (the one exception being that `undefined` is also assignable to `void`). */\n    strictNullChecks?: boolean;\n    /** Suppress excess property checks for object literals. Defaults to\n     * `false`. */\n    suppressExcessPropertyErrors?: boolean;\n    /** Suppress `noImplicitAny` errors for indexing objects lacking index\n     * signatures. */\n    suppressImplicitAnyIndexErrors?: boolean;\n    /** Specify ECMAScript target version. Defaults to `esnext`. */\n    target?:\n      | \"es3\"\n      | \"es5\"\n      | \"es6\"\n      | \"es2015\"\n      | \"es2016\"\n      | \"es2017\"\n      | \"es2018\"\n      | \"es2019\"\n      | \"es2020\"\n      | \"esnext\";\n    /** List of names of type definitions to include. Defaults to `undefined`.\n     *\n     * The type definitions are resolved according to the normal Deno resolution\n     * irrespective of if sources are provided on the call. Like other Deno\n     * modules, there is no \"magical\" resolution. For example:\n     *\n     *      Deno.compile(\n     *        \"./foo.js\",\n     *        undefined,\n     *        {\n     *          types: [ \"./foo.d.ts\", \"https://deno.land/x/example/types.d.ts\" ]\n     *        }\n     *      );\n     */\n    types?: string[];\n  }\n\n  /** **UNSTABLE**: new API, yet to be vetted.\n   *\n   * The results of a transpile only command, where the `source` contains the\n   * emitted source, and `map` optionally contains the source map. */\n  export interface TranspileOnlyResult {\n    source: string;\n    map?: string;\n  }\n\n  /** **UNSTABLE**: new API, yet to be vetted.\n   *\n   * Takes a set of TypeScript sources and resolves to a map where the key was\n   * the original file name provided in sources and the result contains the\n   * `source` and optionally the `map` from the transpile operation. This does no\n   * type checking and validation, it effectively \"strips\" the types from the\n   * file.\n   *\n   *      const results =  await Deno.transpileOnly({\n   *        \"foo.ts\": `const foo: string = \"foo\";`\n   *      });\n   *\n   * @param sources A map where the key is the filename and the value is the text\n   *                to transpile. The filename is only used in the transpile and\n   *                not resolved, for example to fill in the source name in the\n   *                source map.\n   * @param options An option object of options to send to the compiler. This is\n   *                a subset of ts.CompilerOptions which can be supported by Deno.\n   *                Many of the options related to type checking and emitting\n   *                type declaration files will have no impact on the output.\n   */\n  export function transpileOnly(\n    sources: Record<string, string>,\n    options?: CompilerOptions\n  ): Promise<Record<string, TranspileOnlyResult>>;\n\n  /** **UNSTABLE**: new API, yet to be vetted.\n   *\n   * Takes a root module name, any optionally a record set of sources. Resolves\n   * with a compiled set of modules. If just a root name is provided, the modules\n   * will be resolved as if the root module had been passed on the command line.\n   *\n   * If sources are passed, all modules will be resolved out of this object, where\n   * the key is the module name and the value is the content. The extension of\n   * the module name will be used to determine the media type of the module.\n   *\n   *      const [ maybeDiagnostics1, output1 ] = await Deno.compile(\"foo.ts\");\n   *\n   *      const [ maybeDiagnostics2, output2 ] = await Deno.compile(\"/foo.ts\", {\n   *        \"/foo.ts\": `export * from \"./bar.ts\";`,\n   *        \"/bar.ts\": `export const bar = \"bar\";`\n   *      });\n   *\n   * @param rootName The root name of the module which will be used as the\n   *                 \"starting point\". If no `sources` is specified, Deno will\n   *                 resolve the module externally as if the `rootName` had been\n   *                 specified on the command line.\n   * @param sources An optional key/value map of sources to be used when resolving\n   *                modules, where the key is the module name, and the value is\n   *                the source content. The extension of the key will determine\n   *                the media type of the file when processing. If supplied,\n   *                Deno will not attempt to resolve any modules externally.\n   * @param options An optional object of options to send to the compiler. This is\n   *                a subset of ts.CompilerOptions which can be supported by Deno.\n   */\n  export function compile(\n    rootName: string,\n    sources?: Record<string, string>,\n    options?: CompilerOptions\n  ): Promise<[DiagnosticItem[] | undefined, Record<string, string>]>;\n\n  /** **UNSTABLE**: new API, yet to be vetted.\n   *\n   * `bundle()` is part the compiler API.  A full description of this functionality\n   * can be found in the [manual](https://deno.land/std/manual.md#denobundle).\n   *\n   * Takes a root module name, and optionally a record set of sources. Resolves\n   * with a single JavaScript string (and bundle diagnostics if issues arise with\n   * the bundling) that is like the output of a `deno bundle` command. If just\n   * a root name is provided, the modules will be resolved as if the root module\n   * had been passed on the command line.\n   *\n   * If sources are passed, all modules will be resolved out of this object, where\n   * the key is the module name and the value is the content. The extension of the\n   * module name will be used to determine the media type of the module.\n   *\n   *      //equivalent to \"deno bundle foo.ts\" from the command line\n   *      const [ maybeDiagnostics1, output1 ] = await Deno.bundle(\"foo.ts\");\n   *\n   *      const [ maybeDiagnostics2, output2 ] = await Deno.bundle(\"/foo.ts\", {\n   *        \"/foo.ts\": `export * from \"./bar.ts\";`,\n   *        \"/bar.ts\": `export const bar = \"bar\";`\n   *      });\n   *\n   * @param rootName The root name of the module which will be used as the\n   *                 \"starting point\". If no `sources` is specified, Deno will\n   *                 resolve the module externally as if the `rootName` had been\n   *                 specified on the command line.\n   * @param sources An optional key/value map of sources to be used when resolving\n   *                modules, where the key is the module name, and the value is\n   *                the source content. The extension of the key will determine\n   *                the media type of the file when processing. If supplied,\n   *                Deno will not attempt to resolve any modules externally.\n   * @param options An optional object of options to send to the compiler. This is\n   *                a subset of ts.CompilerOptions which can be supported by Deno.\n   */\n  export function bundle(\n    rootName: string,\n    sources?: Record<string, string>,\n    options?: CompilerOptions\n  ): Promise<[DiagnosticItem[] | undefined, string]>;\n\n  /** Returns the script arguments to the program. If for example we run a\n   * program:\n   *\n   *      deno --allow-read https://deno.land/std/examples/cat.ts /etc/passwd\n   *\n   * Then `Deno.args` will contain:\n   *\n   *      [ \"/etc/passwd\" ]\n   */\n  export const args: string[];\n\n  /** **UNSTABLE**: new API, yet to be vetted.\n   *\n   * Represents the stream of signals, implements both `AsyncIterator` and\n   * `PromiseLike`. */\n  export class SignalStream\n    implements AsyncIterableIterator<void>, PromiseLike<void> {\n    constructor(signal: typeof Deno.Signal);\n    then<T, S>(\n      f: (v: void) => T | Promise<T>,\n      g?: (v: void) => S | Promise<S>\n    ): Promise<T | S>;\n    next(): Promise<IteratorResult<void>>;\n    [Symbol.asyncIterator](): AsyncIterableIterator<void>;\n    dispose(): void;\n  }\n\n  /** **UNSTABLE**: new API, yet to be vetted.\n   *\n   * Returns the stream of the given signal number. You can use it as an async\n   * iterator.\n   *\n   *      for await (const _ of Deno.signal(Deno.Signal.SIGTERM)) {\n   *        console.log(\"got SIGTERM!\");\n   *      }\n   *\n   * You can also use it as a promise. In this case you can only receive the\n   * first one.\n   *\n   *      await Deno.signal(Deno.Signal.SIGTERM);\n   *      console.log(\"SIGTERM received!\")\n   *\n   * If you want to stop receiving the signals, you can use `.dispose()` method\n   * of the signal stream object.\n   *\n   *      const sig = Deno.signal(Deno.Signal.SIGTERM);\n   *      setTimeout(() => { sig.dispose(); }, 5000);\n   *      for await (const _ of sig) {\n   *        console.log(\"SIGTERM!\")\n   *      }\n   *\n   * The above for-await loop exits after 5 seconds when `sig.dispose()` is\n   * called. */\n  export function signal(signo: number): SignalStream;\n\n  /** **UNSTABLE**: new API, yet to be vetted. */\n  export const signals: {\n    /** Returns the stream of SIGALRM signals.\n     *\n     * This method is the shorthand for `Deno.signal(Deno.Signal.SIGALRM)`. */\n    alarm: () => SignalStream;\n    /** Returns the stream of SIGCHLD signals.\n     *\n     * This method is the shorthand for `Deno.signal(Deno.Signal.SIGCHLD)`. */\n    child: () => SignalStream;\n    /** Returns the stream of SIGHUP signals.\n     *\n     * This method is the shorthand for `Deno.signal(Deno.Signal.SIGHUP)`. */\n    hungup: () => SignalStream;\n    /** Returns the stream of SIGINT signals.\n     *\n     * This method is the shorthand for `Deno.signal(Deno.Signal.SIGINT)`. */\n    interrupt: () => SignalStream;\n    /** Returns the stream of SIGIO signals.\n     *\n     * This method is the shorthand for `Deno.signal(Deno.Signal.SIGIO)`. */\n    io: () => SignalStream;\n    /** Returns the stream of SIGPIPE signals.\n     *\n     * This method is the shorthand for `Deno.signal(Deno.Signal.SIGPIPE)`. */\n    pipe: () => SignalStream;\n    /** Returns the stream of SIGQUIT signals.\n     *\n     * This method is the shorthand for `Deno.signal(Deno.Signal.SIGQUIT)`. */\n    quit: () => SignalStream;\n    /** Returns the stream of SIGTERM signals.\n     *\n     * This method is the shorthand for `Deno.signal(Deno.Signal.SIGTERM)`. */\n    terminate: () => SignalStream;\n    /** Returns the stream of SIGUSR1 signals.\n     *\n     * This method is the shorthand for `Deno.signal(Deno.Signal.SIGUSR1)`. */\n    userDefined1: () => SignalStream;\n    /** Returns the stream of SIGUSR2 signals.\n     *\n     * This method is the shorthand for `Deno.signal(Deno.Signal.SIGUSR2)`. */\n    userDefined2: () => SignalStream;\n    /** Returns the stream of SIGWINCH signals.\n     *\n     * This method is the shorthand for `Deno.signal(Deno.Signal.SIGWINCH)`. */\n    windowChange: () => SignalStream;\n  };\n\n  /** **UNSTABLE**: new API. Maybe move `Deno.EOF` here.\n   *\n   * Special Deno related symbols. */\n  export const symbols: {\n    /** Symbol to access exposed internal Deno API */\n    readonly internal: unique symbol;\n    /** A symbol which can be used as a key for a custom method which will be\n     * called when `Deno.inspect()` is called, or when the object is logged to\n     * the console. */\n    readonly customInspect: unique symbol;\n    // TODO(ry) move EOF here?\n  };\n}",
    "location": {
      "filename": "./deno.ts",
      "line": 6,
      "col": 0
    },
    "jsDoc": null,
    "namespaceDef": {
      "elements": [
        {
          "kind": "variable",
          "name": "pid",
          "snippet": "export let pid: number;",
          "location": {
            "filename": "./deno.ts",
            "line": 8,
            "col": 2
          },
          "jsDoc": "The current process id of the runtime.",
          "variableDef": {
            "tsType": {
              "repr": "number",
              "kind": "keyword",
              "keyword": "number"
            },
            "kind": "let"
          }
        },
        {
          "kind": "variable",
          "name": "noColor",
          "snippet": "export let noColor: boolean;",
          "location": {
            "filename": "./deno.ts",
            "line": 13,
            "col": 2
          },
          "jsDoc": "Reflects the NO_COLOR environment variable.\n\nSee: https://no-color.org/",
          "variableDef": {
            "tsType": {
              "repr": "boolean",
              "kind": "keyword",
              "keyword": "boolean"
            },
            "kind": "let"
          }
        },
        {
          "kind": "typeAlias",
          "name": "TestFunction",
          "snippet": "export type TestFunction = () => void | Promise<void>;",
          "location": {
            "filename": "./deno.ts",
            "line": 15,
            "col": 2
          },
          "jsDoc": null
        },
        {
          "kind": "interface",
          "name": "TestDefinition",
          "snippet": "export interface TestDefinition {\n  fn: TestFunction;\n  name: string;\n  ignore?: boolean;\n  disableOpSanitizer?: boolean;\n  disableResourceSanitizer?: boolean;\n}",
          "location": {
            "filename": "./deno.ts",
            "line": 17,
            "col": 2
          },
          "jsDoc": null,
          "interfaceDef": {
            "methods": [],
            "properties": [
              {
                "name": "fn",
                "snippet": "fn: TestFunction;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 18,
                  "col": 4
                },
                "jsDoc": null,
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "TestFunction",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeName": "TestFunction"
                  }
                }
              },
              {
                "name": "name",
                "snippet": "name: string;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 19,
                  "col": 4
                },
                "jsDoc": null,
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "name": "ignore",
                "snippet": "ignore?: boolean;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 20,
                  "col": 4
                },
                "jsDoc": null,
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                }
              },
              {
                "name": "disableOpSanitizer",
                "snippet": "disableOpSanitizer?: boolean;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 21,
                  "col": 4
                },
                "jsDoc": null,
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                }
              },
              {
                "name": "disableResourceSanitizer",
                "snippet": "disableResourceSanitizer?: boolean;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 22,
                  "col": 4
                },
                "jsDoc": null,
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                }
              }
            ],
            "callSignatures": []
          }
        },
        {
          "kind": "function",
          "name": "test",
          "snippet": "export function test(t: TestDefinition): void;",
          "location": {
            "filename": "./deno.ts",
            "line": 28,
            "col": 2
          },
          "jsDoc": "Register a test which will be run when `deno test` is used on the command\nline and the containing module looks like a test module, or explicitly\nwhen `Deno.runTests` is used",
          "functionDef": {
            "params": [
              {
                "name": "t",
                "tsType": {
                  "repr": "TestDefinition",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeName": "TestDefinition"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false
          }
        },
        {
          "kind": "function",
          "name": "test",
          "snippet": "export function test(fn: TestFunction): void;",
          "location": {
            "filename": "./deno.ts",
            "line": 32,
            "col": 2
          },
          "jsDoc": "Register a test which will be run when `deno test` is used on the command\nline and the containing module looks like a test module, or explicitly\nwhen `Deno.runTests` is used",
          "functionDef": {
            "params": [
              {
                "name": "fn",
                "tsType": {
                  "repr": "TestFunction",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeName": "TestFunction"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false
          }
        },
        {
          "kind": "function",
          "name": "test",
          "snippet": "export function test(name: string, fn: TestFunction): void;",
          "location": {
            "filename": "./deno.ts",
            "line": 36,
            "col": 2
          },
          "jsDoc": "Register a test which will be run when `deno test` is used on the command\nline and the containing module looks like a test module, or explicitly\nwhen `Deno.runTests` is used",
          "functionDef": {
            "params": [
              {
                "name": "name",
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "name": "fn",
                "tsType": {
                  "repr": "TestFunction",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeName": "TestFunction"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false
          }
        },
        {
          "kind": "enum",
          "name": "TestEvent",
          "snippet": "export enum TestEvent {\n    Start = \"start\",\n    TestStart = \"testStart\",\n    TestEnd = \"testEnd\",\n    End = \"end\"\n  }",
          "location": {
            "filename": "./deno.ts",
            "line": 59,
            "col": 2
          },
          "jsDoc": null,
          "enumDef": {
            "members": [
              {
                "name": "Start"
              },
              {
                "name": "TestStart"
              },
              {
                "name": "TestEnd"
              },
              {
                "name": "End"
              }
            ]
          }
        },
        {
          "kind": "class",
          "name": "ConsoleTestReporter",
          "snippet": "export class ConsoleTestReporter implements TestReporter",
          "location": {
            "filename": "./deno.ts",
            "line": 95,
            "col": 2
          },
          "jsDoc": null,
          "classDef": {
            "isAbstract": false,
            "constructors": [
              {
                "jsDoc": null,
                "snippet": "constructor();",
                "accessibility": null,
                "name": "constructor",
                "params": [],
                "location": {
                  "filename": "./deno.ts",
                  "line": 96,
                  "col": 4
                }
              }
            ],
            "properties": [],
            "methods": [
              {
                "jsDoc": null,
                "snippet": "start(event: TestEventStart): Promise<void>;",
                "accessibility": null,
                "isAbstract": false,
                "isStatic": false,
                "name": "start",
                "kind": "method",
                "functionDef": {
                  "params": [
                    {
                      "name": "event",
                      "tsType": {
                        "repr": "TestEventStart",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeName": "TestEventStart"
                        }
                      }
                    }
                  ],
                  "returnType": {
                    "repr": "Promise",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeName": "Promise"
                    }
                  },
                  "isAsync": false,
                  "isGenerator": false
                },
                "location": {
                  "filename": "./deno.ts",
                  "line": 97,
                  "col": 4
                }
              },
              {
                "jsDoc": null,
                "snippet": "testStart(msg: TestEventTestStart): Promise<void>;",
                "accessibility": null,
                "isAbstract": false,
                "isStatic": false,
                "name": "testStart",
                "kind": "method",
                "functionDef": {
                  "params": [
                    {
                      "name": "msg",
                      "tsType": {
                        "repr": "TestEventTestStart",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeName": "TestEventTestStart"
                        }
                      }
                    }
                  ],
                  "returnType": {
                    "repr": "Promise",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeName": "Promise"
                    }
                  },
                  "isAsync": false,
                  "isGenerator": false
                },
                "location": {
                  "filename": "./deno.ts",
                  "line": 98,
                  "col": 4
                }
              },
              {
                "jsDoc": null,
                "snippet": "testEnd(msg: TestEventTestEnd): Promise<void>;",
                "accessibility": null,
                "isAbstract": false,
                "isStatic": false,
                "name": "testEnd",
                "kind": "method",
                "functionDef": {
                  "params": [
                    {
                      "name": "msg",
                      "tsType": {
                        "repr": "TestEventTestEnd",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeName": "TestEventTestEnd"
                        }
                      }
                    }
                  ],
                  "returnType": {
                    "repr": "Promise",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeName": "Promise"
                    }
                  },
                  "isAsync": false,
                  "isGenerator": false
                },
                "location": {
                  "filename": "./deno.ts",
                  "line": 99,
                  "col": 4
                }
              },
              {
                "jsDoc": null,
                "snippet": "end(event: TestEventEnd): Promise<void>;",
                "accessibility": null,
                "isAbstract": false,
                "isStatic": false,
                "name": "end",
                "kind": "method",
                "functionDef": {
                  "params": [
                    {
                      "name": "event",
                      "tsType": {
                        "repr": "TestEventEnd",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeName": "TestEventEnd"
                        }
                      }
                    }
                  ],
                  "returnType": {
                    "repr": "Promise",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeName": "Promise"
                    }
                  },
                  "isAsync": false,
                  "isGenerator": false
                },
                "location": {
                  "filename": "./deno.ts",
                  "line": 100,
                  "col": 4
                }
              }
            ]
          }
        },
        {
          "kind": "interface",
          "name": "RunTestsOptions",
          "snippet": "export interface RunTestsOptions {\n  /** If `true`, Deno will exit with status code 1 if there was\n   * test failure. Defaults to `true`. */\n  exitOnFail?: boolean;\n  /** If `true`, Deno will exit upon first test failure Defaults to `false`. */\n  failFast?: boolean;\n  /** String or RegExp used to filter test to run. Only test with names\n   * matching provided `String` or `RegExp` will be run. */\n  only?: string | RegExp;\n  /** String or RegExp used to skip tests to run. Tests with names\n   * matching provided `String` or `RegExp` will not be run. */\n  skip?: string | RegExp;\n  /** Disable logging of the results. Defaults to `false`. */\n  disableLog?: boolean;\n  /** Custom reporter class. If not provided uses console reporter. */\n  reporter?: TestReporter;\n}",
          "location": {
            "filename": "./deno.ts",
            "line": 103,
            "col": 2
          },
          "jsDoc": null,
          "interfaceDef": {
            "methods": [],
            "properties": [
              {
                "name": "exitOnFail",
                "snippet": "exitOnFail?: boolean;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 106,
                  "col": 4
                },
                "jsDoc": "If `true`, Deno will exit with status code 1 if there was\ntest failure. Defaults to `true`.",
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                }
              },
              {
                "name": "failFast",
                "snippet": "failFast?: boolean;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 108,
                  "col": 4
                },
                "jsDoc": "If `true`, Deno will exit upon first test failure Defaults to `false`.",
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                }
              },
              {
                "name": "only",
                "snippet": "only?: string | RegExp;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 111,
                  "col": 4
                },
                "jsDoc": "String or RegExp used to filter test to run. Only test with names\nmatching provided `String` or `RegExp` will be run.",
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    {
                      "repr": "RegExp",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "RegExp"
                      }
                    }
                  ]
                }
              },
              {
                "name": "skip",
                "snippet": "skip?: string | RegExp;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 114,
                  "col": 4
                },
                "jsDoc": "String or RegExp used to skip tests to run. Tests with names\nmatching provided `String` or `RegExp` will not be run.",
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    {
                      "repr": "RegExp",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "RegExp"
                      }
                    }
                  ]
                }
              },
              {
                "name": "disableLog",
                "snippet": "disableLog?: boolean;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 116,
                  "col": 4
                },
                "jsDoc": "Disable logging of the results. Defaults to `false`.",
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                }
              },
              {
                "name": "reporter",
                "snippet": "reporter?: TestReporter;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 118,
                  "col": 4
                },
                "jsDoc": "Custom reporter class. If not provided uses console reporter.",
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "TestReporter",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeName": "TestReporter"
                  }
                }
              }
            ],
            "callSignatures": []
          }
        },
        {
          "kind": "function",
          "name": "runTests",
          "snippet": "export function runTests(\n    opts?: RunTestsOptions\n  ): Promise<{\n    results: TestResult[];\n    stats: TestStats;\n    duration: number;\n  }>;",
          "location": {
            "filename": "./deno.ts",
            "line": 123,
            "col": 2
          },
          "jsDoc": "Run any tests which have been registered. Always resolves\nasynchronously.",
          "functionDef": {
            "params": [
              {
                "name": "opts",
                "tsType": {
                  "repr": "RunTestsOptions",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeName": "RunTestsOptions"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeName": "Promise"
              }
            },
            "isAsync": false,
            "isGenerator": false
          }
        },
        {
          "kind": "function",
          "name": "loadavg",
          "snippet": "export function loadavg(): number[];",
          "location": {
            "filename": "./deno.ts",
            "line": 135,
            "col": 2
          },
          "jsDoc": "Get the `loadavg`. Requires `allow-env` permission.\n\n      console.log(Deno.loadavg());",
          "functionDef": {
            "params": [],
            "returnType": {
              "repr": "",
              "kind": "array",
              "array": {
                "repr": "number",
                "kind": "keyword",
                "keyword": "number"
              }
            },
            "isAsync": false,
            "isGenerator": false
          }
        },
        {
          "kind": "function",
          "name": "hostname",
          "snippet": "export function hostname(): string;",
          "location": {
            "filename": "./deno.ts",
            "line": 141,
            "col": 2
          },
          "jsDoc": "Get the `hostname`. Requires `allow-env` permission.\n\n      console.log(Deno.hostname());",
          "functionDef": {
            "params": [],
            "returnType": {
              "repr": "string",
              "kind": "keyword",
              "keyword": "string"
            },
            "isAsync": false,
            "isGenerator": false
          }
        },
        {
          "kind": "function",
          "name": "osRelease",
          "snippet": "export function osRelease(): string;",
          "location": {
            "filename": "./deno.ts",
            "line": 147,
            "col": 2
          },
          "jsDoc": "Get the OS release. Requires `allow-env` permission.\n\n      console.log(Deno.osRelease());",
          "functionDef": {
            "params": [],
            "returnType": {
              "repr": "string",
              "kind": "keyword",
              "keyword": "string"
            },
            "isAsync": false,
            "isGenerator": false
          }
        },
        {
          "kind": "function",
          "name": "exit",
          "snippet": "export function exit(code?: number): never;",
          "location": {
            "filename": "./deno.ts",
            "line": 150,
            "col": 2
          },
          "jsDoc": "Exit the Deno process with optional exit code.",
          "functionDef": {
            "params": [
              {
                "name": "code",
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              }
            ],
            "returnType": {
              "repr": "never",
              "kind": "keyword",
              "keyword": "never"
            },
            "isAsync": false,
            "isGenerator": false
          }
        },
        {
          "kind": "function",
          "name": "env",
          "snippet": "export function env(): {\n    [index: string]: string;\n  };",
          "location": {
            "filename": "./deno.ts",
            "line": 163,
            "col": 2
          },
          "jsDoc": "Returns a snapshot of the environment variables at invocation. Mutating a\nproperty in the object will set that variable in the environment for the\nprocess. The environment object will only accept `string`s as values.\n\n      const myEnv = Deno.env();\n      console.log(myEnv.SHELL);\n      myEnv.TEST_VAR = \"HELLO\";\n      const newEnv = Deno.env();\n      console.log(myEnv.TEST_VAR == newEnv.TEST_VAR);\n\nRequires `allow-env` permission.",
          "functionDef": {
            "params": [],
            "returnType": {
              "repr": "",
              "kind": "typeLiteral",
              "typeLiteral": {
                "methods": [],
                "properties": [],
                "callSignatures": []
              }
            },
            "isAsync": false,
            "isGenerator": false
          }
        },
        {
          "kind": "function",
          "name": "env",
          "snippet": "export function env(key: string): string | undefined;",
          "location": {
            "filename": "./deno.ts",
            "line": 177,
            "col": 2
          },
          "jsDoc": "Returns the value of an environment variable at invocation. If the\nvariable is not present, `undefined` will be returned.\n\n      const myEnv = Deno.env();\n      console.log(myEnv.SHELL);\n      myEnv.TEST_VAR = \"HELLO\";\n      const newEnv = Deno.env();\n      console.log(myEnv.TEST_VAR == newEnv.TEST_VAR);\n\nRequires `allow-env` permission.",
          "functionDef": {
            "params": [
              {
                "name": "key",
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              }
            ],
            "returnType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                {
                  "repr": "undefined",
                  "kind": "keyword",
                  "keyword": "undefined"
                }
              ]
            },
            "isAsync": false,
            "isGenerator": false
          }
        },
        {
          "kind": "typeAlias",
          "name": "DirKind",
          "snippet": "export type DirKind =\n    | \"home\"\n    | \"cache\"\n    | \"config\"\n    | \"executable\"\n    | \"data\"\n    | \"data_local\"\n    | \"audio\"\n    | \"desktop\"\n    | \"document\"\n    | \"download\"\n    | \"font\"\n    | \"picture\"\n    | \"public\"\n    | \"template\"\n    | \"tmp\"\n    | \"video\";",
          "location": {
            "filename": "./deno.ts",
            "line": 180,
            "col": 2
          },
          "jsDoc": "**UNSTABLE**"
        },
        {
          "kind": "function",
          "name": "dir",
          "snippet": "export function dir(kind: DirKind): string | null;",
          "location": {
            "filename": "./deno.ts",
            "line": 334,
            "col": 2
          },
          "jsDoc": "**UNSTABLE**: Might rename method `dir` and type alias `DirKind`.\n\nReturns the user and platform specific directories.\n\nRequires `allow-env` permission.\n\nReturns `null` if there is no applicable directory or if any other error\noccurs.\n\nArgument values: `\"home\"`, `\"cache\"`, `\"config\"`, `\"executable\"`, `\"data\"`,\n`\"data_local\"`, `\"audio\"`, `\"desktop\"`, `\"document\"`, `\"download\"`,\n`\"font\"`, `\"picture\"`, `\"public\"`, `\"template\"`, `\"tmp\"`, `\"video\"`\n\n`\"cache\"`\n\n|Platform | Value                               | Example                      |\n| ------- | ----------------------------------- | ---------------------------- |\n| Linux   | `$XDG_CACHE_HOME` or `$HOME`/.cache | /home/alice/.cache           |\n| macOS   | `$HOME`/Library/Caches              | /Users/Alice/Library/Caches  |\n| Windows | `{FOLDERID_LocalAppData}`           | C:\\Users\\Alice\\AppData\\Local |\n\n`\"config\"`\n\n|Platform | Value                                 | Example                          |\n| ------- | ------------------------------------- | -------------------------------- |\n| Linux   | `$XDG_CONFIG_HOME` or `$HOME`/.config | /home/alice/.config              |\n| macOS   | `$HOME`/Library/Preferences           | /Users/Alice/Library/Preferences |\n| Windows | `{FOLDERID_RoamingAppData}`           | C:\\Users\\Alice\\AppData\\Roaming   |\n\n`\"executable\"`\n\n|Platform | Value                                                           | Example                |\n| ------- | --------------------------------------------------------------- | -----------------------|\n| Linux   | `XDG_BIN_HOME` or `$XDG_DATA_HOME`/../bin or `$HOME`/.local/bin | /home/alice/.local/bin |\n| macOS   | -                                                               | -                      |\n| Windows | -                                                               | -                      |\n\n`\"data\"`\n\n|Platform | Value                                    | Example                                  |\n| ------- | ---------------------------------------- | ---------------------------------------- |\n| Linux   | `$XDG_DATA_HOME` or `$HOME`/.local/share | /home/alice/.local/share                 |\n| macOS   | `$HOME`/Library/Application Support      | /Users/Alice/Library/Application Support |\n| Windows | `{FOLDERID_RoamingAppData}`              | C:\\Users\\Alice\\AppData\\Roaming           |\n\n`\"data_local\"`\n\n|Platform | Value                                    | Example                                  |\n| ------- | ---------------------------------------- | ---------------------------------------- |\n| Linux   | `$XDG_DATA_HOME` or `$HOME`/.local/share | /home/alice/.local/share                 |\n| macOS   | `$HOME`/Library/Application Support      | /Users/Alice/Library/Application Support |\n| Windows | `{FOLDERID_LocalAppData}`                | C:\\Users\\Alice\\AppData\\Local             |\n\n`\"audio\"`\n\n|Platform | Value              | Example              |\n| ------- | ------------------ | -------------------- |\n| Linux   | `XDG_MUSIC_DIR`    | /home/alice/Music    |\n| macOS   | `$HOME`/Music      | /Users/Alice/Music   |\n| Windows | `{FOLDERID_Music}` | C:\\Users\\Alice\\Music |\n\n`\"desktop\"`\n\n|Platform | Value                | Example                |\n| ------- | -------------------- | ---------------------- |\n| Linux   | `XDG_DESKTOP_DIR`    | /home/alice/Desktop    |\n| macOS   | `$HOME`/Desktop      | /Users/Alice/Desktop   |\n| Windows | `{FOLDERID_Desktop}` | C:\\Users\\Alice\\Desktop |\n\n`\"document\"`\n\n|Platform | Value                  | Example                  |\n| ------- | ---------------------- | ------------------------ |\n| Linux   | `XDG_DOCUMENTS_DIR`    | /home/alice/Documents    |\n| macOS   | `$HOME`/Documents      | /Users/Alice/Documents   |\n| Windows | `{FOLDERID_Documents}` | C:\\Users\\Alice\\Documents |\n\n`\"download\"`\n\n|Platform | Value                  | Example                  |\n| ------- | ---------------------- | ------------------------ |\n| Linux   | `XDG_DOWNLOAD_DIR`     | /home/alice/Downloads    |\n| macOS   | `$HOME`/Downloads      | /Users/Alice/Downloads   |\n| Windows | `{FOLDERID_Downloads}` | C:\\Users\\Alice\\Downloads |\n\n`\"font\"`\n\n|Platform | Value                                                | Example                        |\n| ------- | ---------------------------------------------------- | ------------------------------ |\n| Linux   | `$XDG_DATA_HOME`/fonts or `$HOME`/.local/share/fonts | /home/alice/.local/share/fonts |\n| macOS   | `$HOME/Library/Fonts`                                | /Users/Alice/Library/Fonts     |\n| Windows | –                                                    | –                              |\n\n`\"picture\"`\n\n|Platform | Value                 | Example                 |\n| ------- | --------------------- | ----------------------- |\n| Linux   | `XDG_PICTURES_DIR`    | /home/alice/Pictures    |\n| macOS   | `$HOME`/Pictures      | /Users/Alice/Pictures   |\n| Windows | `{FOLDERID_Pictures}` | C:\\Users\\Alice\\Pictures |\n\n`\"public\"`\n\n|Platform | Value                 | Example             |\n| ------- | --------------------- | ------------------- |\n| Linux   | `XDG_PUBLICSHARE_DIR` | /home/alice/Public  |\n| macOS   | `$HOME`/Public        | /Users/Alice/Public |\n| Windows | `{FOLDERID_Public}`   | C:\\Users\\Public     |\n\n`\"template\"`\n\n|Platform | Value                  | Example                                                    |\n| ------- | ---------------------- | ---------------------------------------------------------- |\n| Linux   | `XDG_TEMPLATES_DIR`    | /home/alice/Templates                                      |\n| macOS   | –                      | –                                                          |\n| Windows | `{FOLDERID_Templates}` | C:\\Users\\Alice\\AppData\\Roaming\\Microsoft\\Windows\\Templates |\n\n`\"tmp\"`\n\n|Platform | Value                  | Example                                                    |\n| ------- | ---------------------- | ---------------------------------------------------------- |\n| Linux   | `TMPDIR`               | /tmp                                                       |\n| macOS   | `TMPDIR`               | /tmp                                                       |\n| Windows | `{TMP}`                | C:\\Users\\Alice\\AppData\\Local\\Temp                          |\n\n`\"video\"`\n\n|Platform | Value               | Example               |\n| ------- | ------------------- | --------------------- |\n| Linux   | `XDG_VIDEOS_DIR`    | /home/alice/Videos    |\n| macOS   | `$HOME`/Movies      | /Users/Alice/Movies   |\n| Windows | `{FOLDERID_Videos}` | C:\\Users\\Alice\\Videos |",
          "functionDef": {
            "params": [
              {
                "name": "kind",
                "tsType": {
                  "repr": "DirKind",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeName": "DirKind"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                {
                  "repr": "null",
                  "kind": "keyword",
                  "keyword": "null"
                }
              ]
            },
            "isAsync": false,
            "isGenerator": false
          }
        },
        {
          "kind": "function",
          "name": "execPath",
          "snippet": "export function execPath(): string;",
          "location": {
            "filename": "./deno.ts",
            "line": 341,
            "col": 2
          },
          "jsDoc": "Returns the path to the current deno executable.\n\nRequires `allow-env` permission.",
          "functionDef": {
            "params": [],
            "returnType": {
              "repr": "string",
              "kind": "keyword",
              "keyword": "string"
            },
            "isAsync": false,
            "isGenerator": false
          }
        },
        {
          "kind": "function",
          "name": "cwd",
          "snippet": "export function cwd(): string;",
          "location": {
            "filename": "./deno.ts",
            "line": 355,
            "col": 2
          },
          "jsDoc": "**UNSTABLE**: maybe needs permissions.\n\nReturn a string representing the current working directory.\n\nIf the current directory can be reached via multiple paths (due to symbolic\nlinks), `cwd()` may return any one of them.\n\nThrows `Deno.errors.NotFound` if directory not available.",
          "functionDef": {
            "params": [],
            "returnType": {
              "repr": "string",
              "kind": "keyword",
              "keyword": "string"
            },
            "isAsync": false,
            "isGenerator": false
          }
        },
        {
          "kind": "function",
          "name": "chdir",
          "snippet": "export function chdir(directory: string): void;",
          "location": {
            "filename": "./deno.ts",
            "line": 371,
            "col": 2
          },
          "jsDoc": "**UNSTABLE**: Currently under evaluation to decide if explicit permission is\nrequired to change the current working directory.\n\nChange the current working directory to the specified path.\n\n      Deno.chdir(\"/home/userA\");\n      Deno.chdir(\"../userB\");\n      Deno.chdir(\"C:\\\\Program Files (x86)\\\\Java\");\n\nThrows `Deno.errors.NotFound` if directory not found.\nThrows `Deno.errors.PermissionDenied` if the user does not have access\nrights",
          "functionDef": {
            "params": [
              {
                "name": "directory",
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              }
            ],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false
          }
        },
        {
          "kind": "function",
          "name": "umask",
          "snippet": "export function umask(mask?: number): number;",
          "location": {
            "filename": "./deno.ts",
            "line": 379,
            "col": 2
          },
          "jsDoc": "**UNSTABLE**: New API. Maybe needs permissions.\n\nIf `mask` is provided, sets the process umask. Always returns what the umask\nwas before the call.",
          "functionDef": {
            "params": [
              {
                "name": "mask",
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              }
            ],
            "returnType": {
              "repr": "number",
              "kind": "keyword",
              "keyword": "number"
            },
            "isAsync": false,
            "isGenerator": false
          }
        },
        {
          "kind": "variable",
          "name": "EOF",
          "snippet": "export const EOF: unique symbol;",
          "location": {
            "filename": "./deno.ts",
            "line": 382,
            "col": 2
          },
          "jsDoc": "**UNSTABLE**: might move to `Deno.symbols`.",
          "variableDef": {
            "tsType": {
              "repr": "",
              "kind": "typeOperator",
              "typeOperator": {
                "operator": "unique",
                "tsType": {
                  "repr": "symbol",
                  "kind": "keyword",
                  "keyword": "symbol"
                }
              }
            },
            "kind": "const"
          }
        },
        {
          "kind": "typeAlias",
          "name": "EOF",
          "snippet": "export type EOF = typeof EOF;",
          "location": {
            "filename": "./deno.ts",
            "line": 383,
            "col": 2
          },
          "jsDoc": null
        },
        {
          "kind": "enum",
          "name": "SeekMode",
          "snippet": "export enum SeekMode {\n    SEEK_START = 0,\n    SEEK_CURRENT = 1,\n    SEEK_END = 2\n  }",
          "location": {
            "filename": "./deno.ts",
            "line": 388,
            "col": 2
          },
          "jsDoc": "**UNSTABLE**: might remove `\"SEEK_\"` prefix. Might not use all-caps.",
          "enumDef": {
            "members": [
              {
                "name": "SEEK_START"
              },
              {
                "name": "SEEK_CURRENT"
              },
              {
                "name": "SEEK_END"
              }
            ]
          }
        },
        {
          "kind": "interface",
          "name": "Reader",
          "snippet": "export interface Reader {\n  /** Reads up to `p.byteLength` bytes into `p`. It resolves to the number of\n   * bytes read (`0` < `n` <= `p.byteLength`) and rejects if any error\n   * encountered. Even if `read()` resolves to `n` < `p.byteLength`, it may\n   * use all of `p` as scratch space during the call. If some data is\n   * available but not `p.byteLength` bytes, `read()` conventionally resolves\n   * to what is available instead of waiting for more.\n   *\n   * When `read()` encounters end-of-file condition, it resolves to\n   * `Deno.EOF` symbol.\n   *\n   * When `read()` encounters an error, it rejects with an error.\n   *\n   * Callers should always process the `n` > `0` bytes returned before\n   * considering the `EOF`. Doing so correctly handles I/O errors that happen\n   * after reading some bytes and also both of the allowed EOF behaviors.\n   *\n   * Implementations should not retain a reference to `p`.\n   */\n  read(p: Uint8Array): Promise<number | EOF>;\n}",
          "location": {
            "filename": "./deno.ts",
            "line": 395,
            "col": 2
          },
          "jsDoc": "**UNSTABLE**: might make `Reader` into iterator of some sort.",
          "interfaceDef": {
            "methods": [
              {
                "snippet": "read(p: Uint8Array): Promise<number | EOF>;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 414,
                  "col": 4
                },
                "jsDoc": "Reads up to `p.byteLength` bytes into `p`. It resolves to the number of\nbytes read (`0` < `n` <= `p.byteLength`) and rejects if any error\nencountered. Even if `read()` resolves to `n` < `p.byteLength`, it may\nuse all of `p` as scratch space during the call. If some data is\navailable but not `p.byteLength` bytes, `read()` conventionally resolves\nto what is available instead of waiting for more.\n\nWhen `read()` encounters end-of-file condition, it resolves to\n`Deno.EOF` symbol.\n\nWhen `read()` encounters an error, it rejects with an error.\n\nCallers should always process the `n` > `0` bytes returned before\nconsidering the `EOF`. Doing so correctly handles I/O errors that happen\nafter reading some bytes and also both of the allowed EOF behaviors.\n\nImplementations should not retain a reference to `p`.",
                "params": [
                  {
                    "name": "p",
                    "tsType": {
                      "repr": "Uint8Array",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "Uint8Array"
                      }
                    }
                  }
                ],
                "returnType": {
                  "repr": "Promise",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeName": "Promise"
                  }
                }
              }
            ],
            "properties": [],
            "callSignatures": []
          }
        },
        {
          "kind": "interface",
          "name": "SyncReader",
          "snippet": "export interface SyncReader {\n  /** Reads up to `p.byteLength` bytes into `p`. It resolves to the number\n   * of bytes read (`0` < `n` <= `p.byteLength`) and rejects if any error\n   * encountered. Even if `read()` returns `n` < `p.byteLength`, it may use\n   * all of `p` as scratch space during the call. If some data is available\n   * but not `p.byteLength` bytes, `read()` conventionally returns what is\n   * available instead of waiting for more.\n   *\n   * When `readSync()` encounters end-of-file condition, it returns `Deno.EOF`\n   * symbol.\n   *\n   * When `readSync()` encounters an error, it throws with an error.\n   *\n   * Callers should always process the `n` > `0` bytes returned before\n   * considering the `EOF`. Doing so correctly handles I/O errors that happen\n   * after reading some bytes and also both of the allowed EOF behaviors.\n   *\n   * Implementations should not retain a reference to `p`.\n   */\n  readSync(p: Uint8Array): number | EOF;\n}",
          "location": {
            "filename": "./deno.ts",
            "line": 417,
            "col": 2
          },
          "jsDoc": null,
          "interfaceDef": {
            "methods": [
              {
                "snippet": "readSync(p: Uint8Array): number | EOF;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 436,
                  "col": 4
                },
                "jsDoc": "Reads up to `p.byteLength` bytes into `p`. It resolves to the number\nof bytes read (`0` < `n` <= `p.byteLength`) and rejects if any error\nencountered. Even if `read()` returns `n` < `p.byteLength`, it may use\nall of `p` as scratch space during the call. If some data is available\nbut not `p.byteLength` bytes, `read()` conventionally returns what is\navailable instead of waiting for more.\n\nWhen `readSync()` encounters end-of-file condition, it returns `Deno.EOF`\nsymbol.\n\nWhen `readSync()` encounters an error, it throws with an error.\n\nCallers should always process the `n` > `0` bytes returned before\nconsidering the `EOF`. Doing so correctly handles I/O errors that happen\nafter reading some bytes and also both of the allowed EOF behaviors.\n\nImplementations should not retain a reference to `p`.",
                "params": [
                  {
                    "name": "p",
                    "tsType": {
                      "repr": "Uint8Array",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "Uint8Array"
                      }
                    }
                  }
                ],
                "returnType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    {
                      "repr": "EOF",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "EOF"
                      }
                    }
                  ]
                }
              }
            ],
            "properties": [],
            "callSignatures": []
          }
        },
        {
          "kind": "interface",
          "name": "Writer",
          "snippet": "export interface Writer {\n  /** Writes `p.byteLength` bytes from `p` to the underlying data stream. It\n   * resolves to the number of bytes written from `p` (`0` <= `n` <=\n   * `p.byteLength`) or reject with the error encountered that caused the\n   * write to stop early. `write()` must reject with a non-null error if\n   * would resolve to `n` < `p.byteLength`. `write()` must not modify the\n   * slice data, even temporarily.\n   *\n   * Implementations should not retain a reference to `p`.\n   */\n  write(p: Uint8Array): Promise<number>;\n}",
          "location": {
            "filename": "./deno.ts",
            "line": 439,
            "col": 2
          },
          "jsDoc": null,
          "interfaceDef": {
            "methods": [
              {
                "snippet": "write(p: Uint8Array): Promise<number>;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 449,
                  "col": 4
                },
                "jsDoc": "Writes `p.byteLength` bytes from `p` to the underlying data stream. It\nresolves to the number of bytes written from `p` (`0` <= `n` <=\n`p.byteLength`) or reject with the error encountered that caused the\nwrite to stop early. `write()` must reject with a non-null error if\nwould resolve to `n` < `p.byteLength`. `write()` must not modify the\nslice data, even temporarily.\n\nImplementations should not retain a reference to `p`.",
                "params": [
                  {
                    "name": "p",
                    "tsType": {
                      "repr": "Uint8Array",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "Uint8Array"
                      }
                    }
                  }
                ],
                "returnType": {
                  "repr": "Promise",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeName": "Promise"
                  }
                }
              }
            ],
            "properties": [],
            "callSignatures": []
          }
        },
        {
          "kind": "interface",
          "name": "SyncWriter",
          "snippet": "export interface SyncWriter {\n  /** Writes `p.byteLength` bytes from `p` to the underlying data\n   * stream. It returns the number of bytes written from `p` (`0` <= `n`\n   * <= `p.byteLength`) and any error encountered that caused the write to\n   * stop early. `writeSync()` must throw a non-null error if it returns `n` <\n   * `p.byteLength`. `writeSync()` must not modify the slice data, even\n   * temporarily.\n   *\n   * Implementations should not retain a reference to `p`.\n   */\n  writeSync(p: Uint8Array): number;\n}",
          "location": {
            "filename": "./deno.ts",
            "line": 452,
            "col": 2
          },
          "jsDoc": null,
          "interfaceDef": {
            "methods": [
              {
                "snippet": "writeSync(p: Uint8Array): number;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 462,
                  "col": 4
                },
                "jsDoc": "Writes `p.byteLength` bytes from `p` to the underlying data\nstream. It returns the number of bytes written from `p` (`0` <= `n`\n<= `p.byteLength`) and any error encountered that caused the write to\nstop early. `writeSync()` must throw a non-null error if it returns `n` <\n`p.byteLength`. `writeSync()` must not modify the slice data, even\ntemporarily.\n\nImplementations should not retain a reference to `p`.",
                "params": [
                  {
                    "name": "p",
                    "tsType": {
                      "repr": "Uint8Array",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "Uint8Array"
                      }
                    }
                  }
                ],
                "returnType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              }
            ],
            "properties": [],
            "callSignatures": []
          }
        },
        {
          "kind": "interface",
          "name": "Closer",
          "snippet": "export interface Closer {\n  close(): void;\n}",
          "location": {
            "filename": "./deno.ts",
            "line": 465,
            "col": 2
          },
          "jsDoc": null,
          "interfaceDef": {
            "methods": [
              {
                "snippet": "close(): void;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 466,
                  "col": 4
                },
                "jsDoc": null,
                "params": [],
                "returnType": {
                  "repr": "void",
                  "kind": "keyword",
                  "keyword": "void"
                }
              }
            ],
            "properties": [],
            "callSignatures": []
          }
        },
        {
          "kind": "interface",
          "name": "Seeker",
          "snippet": "export interface Seeker {\n  /** Seek sets the offset for the next `read()` or `write()` to offset,\n   * interpreted according to `whence`: `SEEK_START` means relative to the\n   * start of the file, `SEEK_CURRENT` means relative to the current offset,\n   * and `SEEK_END` means relative to the end. Seek resolves to the new offset\n   * relative to the start of the file.\n   *\n   * Seeking to an offset before the start of the file is an error. Seeking to\n   * any positive offset is legal, but the behavior of subsequent I/O\n   * operations on the underlying object is implementation-dependent.\n   * It returns the number of cursor position.\n   */\n  seek(offset: number, whence: SeekMode): Promise<number>;\n}",
          "location": {
            "filename": "./deno.ts",
            "line": 469,
            "col": 2
          },
          "jsDoc": null,
          "interfaceDef": {
            "methods": [
              {
                "snippet": "seek(offset: number, whence: SeekMode): Promise<number>;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 481,
                  "col": 4
                },
                "jsDoc": "Seek sets the offset for the next `read()` or `write()` to offset,\ninterpreted according to `whence`: `SEEK_START` means relative to the\nstart of the file, `SEEK_CURRENT` means relative to the current offset,\nand `SEEK_END` means relative to the end. Seek resolves to the new offset\nrelative to the start of the file.\n\nSeeking to an offset before the start of the file is an error. Seeking to\nany positive offset is legal, but the behavior of subsequent I/O\noperations on the underlying object is implementation-dependent.\nIt returns the number of cursor position.",
                "params": [
                  {
                    "name": "offset",
                    "tsType": {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    }
                  },
                  {
                    "name": "whence",
                    "tsType": {
                      "repr": "SeekMode",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "SeekMode"
                      }
                    }
                  }
                ],
                "returnType": {
                  "repr": "Promise",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeName": "Promise"
                  }
                }
              }
            ],
            "properties": [],
            "callSignatures": []
          }
        },
        {
          "kind": "interface",
          "name": "SyncSeeker",
          "snippet": "export interface SyncSeeker {\n  /** Seek sets the offset for the next `readSync()` or `writeSync()` to\n   * offset, interpreted according to `whence`: `SEEK_START` means relative\n   * to the start of the file, `SEEK_CURRENT` means relative to the current\n   * offset, and `SEEK_END` means relative to the end.\n   *\n   * Seeking to an offset before the start of the file is an error. Seeking to\n   * any positive offset is legal, but the behavior of subsequent I/O\n   * operations on the underlying object is implementation-dependent.\n   */\n  seekSync(offset: number, whence: SeekMode): number;\n}",
          "location": {
            "filename": "./deno.ts",
            "line": 484,
            "col": 2
          },
          "jsDoc": null,
          "interfaceDef": {
            "methods": [
              {
                "snippet": "seekSync(offset: number, whence: SeekMode): number;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 494,
                  "col": 4
                },
                "jsDoc": "Seek sets the offset for the next `readSync()` or `writeSync()` to\noffset, interpreted according to `whence`: `SEEK_START` means relative\nto the start of the file, `SEEK_CURRENT` means relative to the current\noffset, and `SEEK_END` means relative to the end.\n\nSeeking to an offset before the start of the file is an error. Seeking to\nany positive offset is legal, but the behavior of subsequent I/O\noperations on the underlying object is implementation-dependent.",
                "params": [
                  {
                    "name": "offset",
                    "tsType": {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    }
                  },
                  {
                    "name": "whence",
                    "tsType": {
                      "repr": "SeekMode",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "SeekMode"
                      }
                    }
                  }
                ],
                "returnType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              }
            ],
            "properties": [],
            "callSignatures": []
          }
        },
        {
          "kind": "interface",
          "name": "ReadCloser",
          "snippet": "export interface ReadCloser extends Reader, Closer {}",
          "location": {
            "filename": "./deno.ts",
            "line": 497,
            "col": 2
          },
          "jsDoc": null,
          "interfaceDef": {
            "methods": [],
            "properties": [],
            "callSignatures": []
          }
        },
        {
          "kind": "interface",
          "name": "WriteCloser",
          "snippet": "export interface WriteCloser extends Writer, Closer {}",
          "location": {
            "filename": "./deno.ts",
            "line": 498,
            "col": 2
          },
          "jsDoc": null,
          "interfaceDef": {
            "methods": [],
            "properties": [],
            "callSignatures": []
          }
        },
        {
          "kind": "interface",
          "name": "ReadSeeker",
          "snippet": "export interface ReadSeeker extends Reader, Seeker {}",
          "location": {
            "filename": "./deno.ts",
            "line": 499,
            "col": 2
          },
          "jsDoc": null,
          "interfaceDef": {
            "methods": [],
            "properties": [],
            "callSignatures": []
          }
        },
        {
          "kind": "interface",
          "name": "WriteSeeker",
          "snippet": "export interface WriteSeeker extends Writer, Seeker {}",
          "location": {
            "filename": "./deno.ts",
            "line": 500,
            "col": 2
          },
          "jsDoc": null,
          "interfaceDef": {
            "methods": [],
            "properties": [],
            "callSignatures": []
          }
        },
        {
          "kind": "interface",
          "name": "ReadWriteCloser",
          "snippet": "export interface ReadWriteCloser extends Reader, Writer, Closer {}",
          "location": {
            "filename": "./deno.ts",
            "line": 501,
            "col": 2
          },
          "jsDoc": null,
          "interfaceDef": {
            "methods": [],
            "properties": [],
            "callSignatures": []
          }
        },
        {
          "kind": "interface",
          "name": "ReadWriteSeeker",
          "snippet": "export interface ReadWriteSeeker extends Reader, Writer, Seeker {}",
          "location": {
            "filename": "./deno.ts",
            "line": 502,
            "col": 2
          },
          "jsDoc": null,
          "interfaceDef": {
            "methods": [],
            "properties": [],
            "callSignatures": []
          }
        },
        {
          "kind": "function",
          "name": "copy",
          "snippet": "export function copy(dst: Writer, src: Reader): Promise<number>;",
          "location": {
            "filename": "./deno.ts",
            "line": 511,
            "col": 2
          },
          "jsDoc": "Copies from `src` to `dst` until either `EOF` is reached on `src` or an\nerror occurs. It resolves to the number of bytes copied or rejects with\nthe first error encountered while copying.\n\nBecause `copy()` is defined to read from `src` until `EOF`, it does not\ntreat an `EOF` from `read()` as an error to be reported.",
          "functionDef": {
            "params": [
              {
                "name": "dst",
                "tsType": {
                  "repr": "Writer",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeName": "Writer"
                  }
                }
              },
              {
                "name": "src",
                "tsType": {
                  "repr": "Reader",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeName": "Reader"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeName": "Promise"
              }
            },
            "isAsync": false,
            "isGenerator": false
          }
        },
        {
          "kind": "function",
          "name": "toAsyncIterator",
          "snippet": "export function toAsyncIterator(r: Reader): AsyncIterableIterator<Uint8Array>;",
          "location": {
            "filename": "./deno.ts",
            "line": 519,
            "col": 2
          },
          "jsDoc": "Turns `r` into async iterator.\n\n     for await (const chunk of toAsyncIterator(reader)) {\n       console.log(chunk);\n     }",
          "functionDef": {
            "params": [
              {
                "name": "r",
                "tsType": {
                  "repr": "Reader",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeName": "Reader"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "AsyncIterableIterator",
              "kind": "typeRef",
              "typeRef": {
                "typeName": "AsyncIterableIterator"
              }
            },
            "isAsync": false,
            "isGenerator": false
          }
        },
        {
          "kind": "function",
          "name": "openSync",
          "snippet": "export function openSync(path: string, options?: OpenOptions): File;",
          "location": {
            "filename": "./deno.ts",
            "line": 529,
            "col": 2
          },
          "jsDoc": "Synchronously open a file and return an instance of the `File` object.\n\n      const file = Deno.openSync(\"/foo/bar.txt\", { read: true, write: true });\n\nRequires `allow-read` and `allow-write` permissions depending on openMode.",
          "functionDef": {
            "params": [
              {
                "name": "path",
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "name": "options",
                "tsType": {
                  "repr": "OpenOptions",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeName": "OpenOptions"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "File",
              "kind": "typeRef",
              "typeRef": {
                "typeName": "File"
              }
            },
            "isAsync": false,
            "isGenerator": false
          }
        },
        {
          "kind": "function",
          "name": "openSync",
          "snippet": "export function openSync(path: string, openMode?: OpenMode): File;",
          "location": {
            "filename": "./deno.ts",
            "line": 537,
            "col": 2
          },
          "jsDoc": "Synchronously open a file and return an instance of the `File` object.\n\n      const file = Deno.openSync(\"/foo/bar.txt\", \"r\");\n\nRequires `allow-read` and `allow-write` permissions depending on openMode.",
          "functionDef": {
            "params": [
              {
                "name": "path",
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "name": "openMode",
                "tsType": {
                  "repr": "OpenMode",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeName": "OpenMode"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "File",
              "kind": "typeRef",
              "typeRef": {
                "typeName": "File"
              }
            },
            "isAsync": false,
            "isGenerator": false
          }
        },
        {
          "kind": "function",
          "name": "open",
          "snippet": "export function open(path: string, options?: OpenOptions): Promise<File>;",
          "location": {
            "filename": "./deno.ts",
            "line": 545,
            "col": 2
          },
          "jsDoc": "Open a file and resolve to an instance of the `File` object.\n\n    const file = await Deno.open(\"/foo/bar.txt\", { read: true, write: true });\n\nRequires `allow-read` and `allow-write` permissions depending on openMode.",
          "functionDef": {
            "params": [
              {
                "name": "path",
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "name": "options",
                "tsType": {
                  "repr": "OpenOptions",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeName": "OpenOptions"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeName": "Promise"
              }
            },
            "isAsync": false,
            "isGenerator": false
          }
        },
        {
          "kind": "function",
          "name": "open",
          "snippet": "export function open(path: string, openMode?: OpenMode): Promise<File>;",
          "location": {
            "filename": "./deno.ts",
            "line": 553,
            "col": 2
          },
          "jsDoc": "Open a file and resolves to an instance of `Deno.File`.\n\n    const file = await Deno.open(\"/foo/bar.txt, \"w+\");\n\nRequires `allow-read` and `allow-write` permissions depending on openMode.",
          "functionDef": {
            "params": [
              {
                "name": "path",
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "name": "openMode",
                "tsType": {
                  "repr": "OpenMode",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeName": "OpenMode"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeName": "Promise"
              }
            },
            "isAsync": false,
            "isGenerator": false
          }
        },
        {
          "kind": "function",
          "name": "createSync",
          "snippet": "export function createSync(path: string): File;",
          "location": {
            "filename": "./deno.ts",
            "line": 562,
            "col": 2
          },
          "jsDoc": "Creates a file if none exists or truncates an existing file and returns\n an instance of `Deno.File`.\n\n      const file = Deno.createSync(\"/foo/bar.txt\");\n\nRequires `allow-read` and `allow-write` permissions.",
          "functionDef": {
            "params": [
              {
                "name": "path",
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              }
            ],
            "returnType": {
              "repr": "File",
              "kind": "typeRef",
              "typeRef": {
                "typeName": "File"
              }
            },
            "isAsync": false,
            "isGenerator": false
          }
        },
        {
          "kind": "function",
          "name": "create",
          "snippet": "export function create(path: string): Promise<File>;",
          "location": {
            "filename": "./deno.ts",
            "line": 571,
            "col": 2
          },
          "jsDoc": "Creates a file if none exists or truncates an existing file and resolves to\n an instance of `Deno.File`.\n\n      const file = await Deno.create(\"/foo/bar.txt\");\n\nRequires `allow-read` and `allow-write` permissions.",
          "functionDef": {
            "params": [
              {
                "name": "path",
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              }
            ],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeName": "Promise"
              }
            },
            "isAsync": false,
            "isGenerator": false
          }
        },
        {
          "kind": "function",
          "name": "readSync",
          "snippet": "export function readSync(rid: number, p: Uint8Array): number | EOF;",
          "location": {
            "filename": "./deno.ts",
            "line": 582,
            "col": 2
          },
          "jsDoc": "Synchronously read from a file ID into an array buffer.\n\nReturns `number | EOF` for the operation.\n\n     const file = Deno.openSync(\"/foo/bar.txt\");\n     const buf = new Uint8Array(100);\n     const nread = Deno.readSync(file.rid, buf);\n     const text = new TextDecoder().decode(buf);",
          "functionDef": {
            "params": [
              {
                "name": "rid",
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              },
              {
                "name": "p",
                "tsType": {
                  "repr": "Uint8Array",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeName": "Uint8Array"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                {
                  "repr": "EOF",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeName": "EOF"
                  }
                }
              ]
            },
            "isAsync": false,
            "isGenerator": false
          }
        },
        {
          "kind": "function",
          "name": "read",
          "snippet": "export function read(rid: number, p: Uint8Array): Promise<number | EOF>;",
          "location": {
            "filename": "./deno.ts",
            "line": 593,
            "col": 2
          },
          "jsDoc": "Read from a resource ID into an array buffer.\n\nResolves to the `number | EOF` for the operation.\n\n      const file = await Deno.open(\"/foo/bar.txt\");\n      const buf = new Uint8Array(100);\n      const nread = await Deno.read(file.rid, buf);\n      const text = new TextDecoder().decode(buf);",
          "functionDef": {
            "params": [
              {
                "name": "rid",
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              },
              {
                "name": "p",
                "tsType": {
                  "repr": "Uint8Array",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeName": "Uint8Array"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeName": "Promise"
              }
            },
            "isAsync": false,
            "isGenerator": false
          }
        },
        {
          "kind": "function",
          "name": "writeSync",
          "snippet": "export function writeSync(rid: number, p: Uint8Array): number;",
          "location": {
            "filename": "./deno.ts",
            "line": 604,
            "col": 2
          },
          "jsDoc": "Synchronously write to the resource ID the contents of the array buffer.\n\nResolves to the number of bytes written.\n\n      const encoder = new TextEncoder();\n      const data = encoder.encode(\"Hello world\\n\");\n      const file = Deno.openSync(\"/foo/bar.txt\");\n      Deno.writeSync(file.rid, data);",
          "functionDef": {
            "params": [
              {
                "name": "rid",
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              },
              {
                "name": "p",
                "tsType": {
                  "repr": "Uint8Array",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeName": "Uint8Array"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "number",
              "kind": "keyword",
              "keyword": "number"
            },
            "isAsync": false,
            "isGenerator": false
          }
        },
        {
          "kind": "function",
          "name": "write",
          "snippet": "export function write(rid: number, p: Uint8Array): Promise<number>;",
          "location": {
            "filename": "./deno.ts",
            "line": 615,
            "col": 2
          },
          "jsDoc": "Write to the resource ID the contents of the array buffer.\n\nResolves to the number of bytes written.\n\n     const encoder = new TextEncoder();\n     const data = encoder.encode(\"Hello world\\n\");\n     const file = await Deno.open(\"/foo/bar.txt\");\n     await Deno.write(file.rid, data);",
          "functionDef": {
            "params": [
              {
                "name": "rid",
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              },
              {
                "name": "p",
                "tsType": {
                  "repr": "Uint8Array",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeName": "Uint8Array"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeName": "Promise"
              }
            },
            "isAsync": false,
            "isGenerator": false
          }
        },
        {
          "kind": "function",
          "name": "seekSync",
          "snippet": "export function seekSync(\n    rid: number,\n    offset: number,\n    whence: SeekMode\n  ): number;",
          "location": {
            "filename": "./deno.ts",
            "line": 622,
            "col": 2
          },
          "jsDoc": "Synchronously seek a file ID to the given offset under mode given by `whence`.\n\n      const file = Deno.openSync(\"/foo/bar.txt\");\n      Deno.seekSync(file.rid, 0, 0);",
          "functionDef": {
            "params": [
              {
                "name": "rid",
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              },
              {
                "name": "offset",
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              },
              {
                "name": "whence",
                "tsType": {
                  "repr": "SeekMode",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeName": "SeekMode"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "number",
              "kind": "keyword",
              "keyword": "number"
            },
            "isAsync": false,
            "isGenerator": false
          }
        },
        {
          "kind": "function",
          "name": "seek",
          "snippet": "export function seek(\n    rid: number,\n    offset: number,\n    whence: SeekMode\n  ): Promise<number>;",
          "location": {
            "filename": "./deno.ts",
            "line": 633,
            "col": 2
          },
          "jsDoc": "Seek a file ID to the given offset under mode given by `whence`.\n\n     const file = await Deno.open(\"/foo/bar.txt\");\n     await Deno.seek(file.rid, 0, 0);",
          "functionDef": {
            "params": [
              {
                "name": "rid",
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              },
              {
                "name": "offset",
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              },
              {
                "name": "whence",
                "tsType": {
                  "repr": "SeekMode",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeName": "SeekMode"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeName": "Promise"
              }
            },
            "isAsync": false,
            "isGenerator": false
          }
        },
        {
          "kind": "function",
          "name": "close",
          "snippet": "export function close(rid: number): void;",
          "location": {
            "filename": "./deno.ts",
            "line": 640,
            "col": 2
          },
          "jsDoc": "Close the given resource ID.",
          "functionDef": {
            "params": [
              {
                "name": "rid",
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              }
            ],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false
          }
        },
        {
          "kind": "class",
          "name": "File",
          "snippet": "export class File\n    implements\n      Reader,\n      SyncReader,\n      Writer,\n      SyncWriter,\n      Seeker,\n      SyncSeeker,\n      Closer",
          "location": {
            "filename": "./deno.ts",
            "line": 643,
            "col": 2
          },
          "jsDoc": "The Deno abstraction for reading and writing files.",
          "classDef": {
            "isAbstract": false,
            "constructors": [
              {
                "jsDoc": null,
                "snippet": "constructor(rid: number);",
                "accessibility": null,
                "name": "constructor",
                "params": [
                  {
                    "name": "rid",
                    "tsType": {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    }
                  }
                ],
                "location": {
                  "filename": "./deno.ts",
                  "line": 653,
                  "col": 4
                }
              }
            ],
            "properties": [
              {
                "jsDoc": null,
                "snippet": "readonly rid: number;",
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                "readonly": true,
                "accessibility": null,
                "isAbstract": false,
                "isStatic": false,
                "name": "rid",
                "location": {
                  "filename": "./deno.ts",
                  "line": 652,
                  "col": 4
                }
              }
            ],
            "methods": [
              {
                "jsDoc": null,
                "snippet": "write(p: Uint8Array): Promise<number>;",
                "accessibility": null,
                "isAbstract": false,
                "isStatic": false,
                "name": "write",
                "kind": "method",
                "functionDef": {
                  "params": [
                    {
                      "name": "p",
                      "tsType": {
                        "repr": "Uint8Array",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeName": "Uint8Array"
                        }
                      }
                    }
                  ],
                  "returnType": {
                    "repr": "Promise",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeName": "Promise"
                    }
                  },
                  "isAsync": false,
                  "isGenerator": false
                },
                "location": {
                  "filename": "./deno.ts",
                  "line": 654,
                  "col": 4
                }
              },
              {
                "jsDoc": null,
                "snippet": "writeSync(p: Uint8Array): number;",
                "accessibility": null,
                "isAbstract": false,
                "isStatic": false,
                "name": "writeSync",
                "kind": "method",
                "functionDef": {
                  "params": [
                    {
                      "name": "p",
                      "tsType": {
                        "repr": "Uint8Array",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeName": "Uint8Array"
                        }
                      }
                    }
                  ],
                  "returnType": {
                    "repr": "number",
                    "kind": "keyword",
                    "keyword": "number"
                  },
                  "isAsync": false,
                  "isGenerator": false
                },
                "location": {
                  "filename": "./deno.ts",
                  "line": 655,
                  "col": 4
                }
              },
              {
                "jsDoc": null,
                "snippet": "read(p: Uint8Array): Promise<number | EOF>;",
                "accessibility": null,
                "isAbstract": false,
                "isStatic": false,
                "name": "read",
                "kind": "method",
                "functionDef": {
                  "params": [
                    {
                      "name": "p",
                      "tsType": {
                        "repr": "Uint8Array",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeName": "Uint8Array"
                        }
                      }
                    }
                  ],
                  "returnType": {
                    "repr": "Promise",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeName": "Promise"
                    }
                  },
                  "isAsync": false,
                  "isGenerator": false
                },
                "location": {
                  "filename": "./deno.ts",
                  "line": 656,
                  "col": 4
                }
              },
              {
                "jsDoc": null,
                "snippet": "readSync(p: Uint8Array): number | EOF;",
                "accessibility": null,
                "isAbstract": false,
                "isStatic": false,
                "name": "readSync",
                "kind": "method",
                "functionDef": {
                  "params": [
                    {
                      "name": "p",
                      "tsType": {
                        "repr": "Uint8Array",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeName": "Uint8Array"
                        }
                      }
                    }
                  ],
                  "returnType": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "number",
                        "kind": "keyword",
                        "keyword": "number"
                      },
                      {
                        "repr": "EOF",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeName": "EOF"
                        }
                      }
                    ]
                  },
                  "isAsync": false,
                  "isGenerator": false
                },
                "location": {
                  "filename": "./deno.ts",
                  "line": 657,
                  "col": 4
                }
              },
              {
                "jsDoc": null,
                "snippet": "seek(offset: number, whence: SeekMode): Promise<number>;",
                "accessibility": null,
                "isAbstract": false,
                "isStatic": false,
                "name": "seek",
                "kind": "method",
                "functionDef": {
                  "params": [
                    {
                      "name": "offset",
                      "tsType": {
                        "repr": "number",
                        "kind": "keyword",
                        "keyword": "number"
                      }
                    },
                    {
                      "name": "whence",
                      "tsType": {
                        "repr": "SeekMode",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeName": "SeekMode"
                        }
                      }
                    }
                  ],
                  "returnType": {
                    "repr": "Promise",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeName": "Promise"
                    }
                  },
                  "isAsync": false,
                  "isGenerator": false
                },
                "location": {
                  "filename": "./deno.ts",
                  "line": 658,
                  "col": 4
                }
              },
              {
                "jsDoc": null,
                "snippet": "seekSync(offset: number, whence: SeekMode): number;",
                "accessibility": null,
                "isAbstract": false,
                "isStatic": false,
                "name": "seekSync",
                "kind": "method",
                "functionDef": {
                  "params": [
                    {
                      "name": "offset",
                      "tsType": {
                        "repr": "number",
                        "kind": "keyword",
                        "keyword": "number"
                      }
                    },
                    {
                      "name": "whence",
                      "tsType": {
                        "repr": "SeekMode",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeName": "SeekMode"
                        }
                      }
                    }
                  ],
                  "returnType": {
                    "repr": "number",
                    "kind": "keyword",
                    "keyword": "number"
                  },
                  "isAsync": false,
                  "isGenerator": false
                },
                "location": {
                  "filename": "./deno.ts",
                  "line": 659,
                  "col": 4
                }
              },
              {
                "jsDoc": null,
                "snippet": "close(): void;",
                "accessibility": null,
                "isAbstract": false,
                "isStatic": false,
                "name": "close",
                "kind": "method",
                "functionDef": {
                  "params": [],
                  "returnType": {
                    "repr": "void",
                    "kind": "keyword",
                    "keyword": "void"
                  },
                  "isAsync": false,
                  "isGenerator": false
                },
                "location": {
                  "filename": "./deno.ts",
                  "line": 660,
                  "col": 4
                }
              }
            ]
          }
        },
        {
          "kind": "variable",
          "name": "stdin",
          "snippet": "export const stdin: File;",
          "location": {
            "filename": "./deno.ts",
            "line": 664,
            "col": 2
          },
          "jsDoc": "An instance of `Deno.File` for `stdin`.",
          "variableDef": {
            "tsType": {
              "repr": "File",
              "kind": "typeRef",
              "typeRef": {
                "typeName": "File"
              }
            },
            "kind": "const"
          }
        },
        {
          "kind": "variable",
          "name": "stdout",
          "snippet": "export const stdout: File;",
          "location": {
            "filename": "./deno.ts",
            "line": 666,
            "col": 2
          },
          "jsDoc": "An instance of `Deno.File` for `stdout`.",
          "variableDef": {
            "tsType": {
              "repr": "File",
              "kind": "typeRef",
              "typeRef": {
                "typeName": "File"
              }
            },
            "kind": "const"
          }
        },
        {
          "kind": "variable",
          "name": "stderr",
          "snippet": "export const stderr: File;",
          "location": {
            "filename": "./deno.ts",
            "line": 668,
            "col": 2
          },
          "jsDoc": "An instance of `Deno.File` for `stderr`.",
          "variableDef": {
            "tsType": {
              "repr": "File",
              "kind": "typeRef",
              "typeRef": {
                "typeName": "File"
              }
            },
            "kind": "const"
          }
        },
        {
          "kind": "interface",
          "name": "OpenOptions",
          "snippet": "export interface OpenOptions {\n  /** Sets the option for read access. This option, when `true`, means that the\n   * file should be read-able if opened. */\n  read?: boolean;\n  /** Sets the option for write access. This option, when `true`, means that\n   * the file should be write-able if opened. If the file already exists,\n   * any write calls on it will overwrite its contents, by default without\n   * truncating it. */\n  write?: boolean;\n  /**Sets the option for the append mode. This option, when `true`, means that\n   * writes will append to a file instead of overwriting previous contents.\n   * Note that setting `{ write: true, append: true }` has the same effect as\n   * setting only `{ append: true }`. */\n  append?: boolean;\n  /** Sets the option for truncating a previous file. If a file is\n   * successfully opened with this option set it will truncate the file to `0`\n   * size if it already exists. The file must be opened with write access\n   * for truncate to work. */\n  truncate?: boolean;\n  /** Sets the option to allow creating a new file, if one doesn't already\n   * exist at the specified path. Requires write or append access to be\n   * used. */\n  create?: boolean;\n  /** Defaults to `false`. If set to `true`, no file, directory, or symlink is\n   * allowed to exist at the target location. Requires write or append\n   * access to be used. When createNew is set to `true`, create and truncate\n   * are ignored. */\n  createNew?: boolean;\n  /** Permissions to use if creating the file (defaults to `0o666`, before\n   * the process's umask).\n   * Ignored on Windows. */\n  mode?: number;\n}",
          "location": {
            "filename": "./deno.ts",
            "line": 670,
            "col": 2
          },
          "jsDoc": null,
          "interfaceDef": {
            "methods": [],
            "properties": [
              {
                "name": "read",
                "snippet": "read?: boolean;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 673,
                  "col": 4
                },
                "jsDoc": "Sets the option for read access. This option, when `true`, means that the\nfile should be read-able if opened.",
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                }
              },
              {
                "name": "write",
                "snippet": "write?: boolean;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 678,
                  "col": 4
                },
                "jsDoc": "Sets the option for write access. This option, when `true`, means that\nthe file should be write-able if opened. If the file already exists,\nany write calls on it will overwrite its contents, by default without\ntruncating it.",
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                }
              },
              {
                "name": "append",
                "snippet": "append?: boolean;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 683,
                  "col": 4
                },
                "jsDoc": "Sets the option for the append mode. This option, when `true`, means that\nwrites will append to a file instead of overwriting previous contents.\nNote that setting `{ write: true, append: true }` has the same effect as\nsetting only `{ append: true }`.",
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                }
              },
              {
                "name": "truncate",
                "snippet": "truncate?: boolean;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 688,
                  "col": 4
                },
                "jsDoc": "Sets the option for truncating a previous file. If a file is\nsuccessfully opened with this option set it will truncate the file to `0`\nsize if it already exists. The file must be opened with write access\nfor truncate to work.",
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                }
              },
              {
                "name": "create",
                "snippet": "create?: boolean;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 692,
                  "col": 4
                },
                "jsDoc": "Sets the option to allow creating a new file, if one doesn't already\nexist at the specified path. Requires write or append access to be\nused.",
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                }
              },
              {
                "name": "createNew",
                "snippet": "createNew?: boolean;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 697,
                  "col": 4
                },
                "jsDoc": "Defaults to `false`. If set to `true`, no file, directory, or symlink is\nallowed to exist at the target location. Requires write or append\naccess to be used. When createNew is set to `true`, create and truncate\nare ignored.",
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                }
              },
              {
                "name": "mode",
                "snippet": "mode?: number;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 701,
                  "col": 4
                },
                "jsDoc": "Permissions to use if creating the file (defaults to `0o666`, before\nthe process's umask).\nIgnored on Windows.",
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              }
            ],
            "callSignatures": []
          }
        },
        {
          "kind": "typeAlias",
          "name": "OpenMode",
          "snippet": "export type OpenMode = \"r\" | \"r+\" | \"w\" | \"w+\" | \"a\" | \"a+\" | \"x\" | \"x+\";",
          "location": {
            "filename": "./deno.ts",
            "line": 717,
            "col": 2
          },
          "jsDoc": "A set of string literals which specify how to open a file.\n\n|Value |Description                                                                                       |\n|------|--------------------------------------------------------------------------------------------------|\n|`\"r\"` |Read-only. Default. Starts at beginning of file.                                                  |\n|`\"r+\"`|Read-write. Start at beginning of file.                                                           |\n|`\"w\"` |Write-only. Opens and truncates existing file or creates new one for writing only.                |\n|`\"w+\"`|Read-write. Opens and truncates existing file or creates new one for writing and reading.         |\n|`\"a\"` |Write-only. Opens existing file or creates new one. Each write appends content to the end of file.|\n|`\"a+\"`|Read-write. Behaves like `\"a\"` and allows to read from file.                                      |\n|`\"x\"` |Write-only. Exclusive create - creates new file only if one doesn't exist already.                |\n|`\"x+\"`|Read-write. Behaves like `x` and allows reading from file.                                        |"
        },
        {
          "kind": "function",
          "name": "isatty",
          "snippet": "export function isatty(rid: number): boolean;",
          "location": {
            "filename": "./deno.ts",
            "line": 724,
            "col": 2
          },
          "jsDoc": "**UNSTABLE**: newly added API\n\n Check if a given resource is TTY.",
          "functionDef": {
            "params": [
              {
                "name": "rid",
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              }
            ],
            "returnType": {
              "repr": "boolean",
              "kind": "keyword",
              "keyword": "boolean"
            },
            "isAsync": false,
            "isGenerator": false
          }
        },
        {
          "kind": "function",
          "name": "setRaw",
          "snippet": "export function setRaw(rid: number, mode: boolean): void;",
          "location": {
            "filename": "./deno.ts",
            "line": 729,
            "col": 2
          },
          "jsDoc": "**UNSTABLE**: newly added API\n\n Set TTY to be under raw mode or not.",
          "functionDef": {
            "params": [
              {
                "name": "rid",
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              },
              {
                "name": "mode",
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                }
              }
            ],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false
          }
        },
        {
          "kind": "class",
          "name": "Buffer",
          "snippet": "export class Buffer implements Reader, SyncReader, Writer, SyncWriter",
          "location": {
            "filename": "./deno.ts",
            "line": 736,
            "col": 2
          },
          "jsDoc": "A variable-sized buffer of bytes with `read()` and `write()` methods.\n\nBased on [Go Buffer](https://golang.org/pkg/bytes/#Buffer).",
          "classDef": {
            "isAbstract": false,
            "constructors": [
              {
                "jsDoc": null,
                "snippet": "constructor(ab?: ArrayBuffer);",
                "accessibility": null,
                "name": "constructor",
                "params": [
                  {
                    "name": "ab",
                    "tsType": {
                      "repr": "ArrayBuffer",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "ArrayBuffer"
                      }
                    }
                  }
                ],
                "location": {
                  "filename": "./deno.ts",
                  "line": 743,
                  "col": 4
                }
              }
            ],
            "properties": [
              {
                "jsDoc": null,
                "snippet": "private buf;",
                "tsType": null,
                "readonly": false,
                "accessibility": "private",
                "isAbstract": false,
                "isStatic": false,
                "name": "buf",
                "location": {
                  "filename": "./deno.ts",
                  "line": 737,
                  "col": 4
                }
              },
              {
                "jsDoc": null,
                "snippet": "private off;",
                "tsType": null,
                "readonly": false,
                "accessibility": "private",
                "isAbstract": false,
                "isStatic": false,
                "name": "off",
                "location": {
                  "filename": "./deno.ts",
                  "line": 738,
                  "col": 4
                }
              },
              {
                "jsDoc": null,
                "snippet": "private _tryGrowByReslice;",
                "tsType": null,
                "readonly": false,
                "accessibility": "private",
                "isAbstract": false,
                "isStatic": false,
                "name": "_tryGrowByReslice",
                "location": {
                  "filename": "./deno.ts",
                  "line": 739,
                  "col": 4
                }
              },
              {
                "jsDoc": null,
                "snippet": "private _reslice;",
                "tsType": null,
                "readonly": false,
                "accessibility": "private",
                "isAbstract": false,
                "isStatic": false,
                "name": "_reslice",
                "location": {
                  "filename": "./deno.ts",
                  "line": 740,
                  "col": 4
                }
              },
              {
                "jsDoc": null,
                "snippet": "private _grow;",
                "tsType": null,
                "readonly": false,
                "accessibility": "private",
                "isAbstract": false,
                "isStatic": false,
                "name": "_grow",
                "location": {
                  "filename": "./deno.ts",
                  "line": 741,
                  "col": 4
                }
              },
              {
                "jsDoc": "A read only number of bytes of the unread portion of the buffer.",
                "snippet": "readonly length: number;",
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                "readonly": true,
                "accessibility": null,
                "isAbstract": false,
                "isStatic": false,
                "name": "length",
                "location": {
                  "filename": "./deno.ts",
                  "line": 761,
                  "col": 4
                }
              },
              {
                "jsDoc": "The read only capacity of the buffer's underlying byte slice, that is,\nthe total space allocated for the buffer's data.",
                "snippet": "readonly capacity: number;",
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                "readonly": true,
                "accessibility": null,
                "isAbstract": false,
                "isStatic": false,
                "name": "capacity",
                "location": {
                  "filename": "./deno.ts",
                  "line": 764,
                  "col": 4
                }
              }
            ],
            "methods": [
              {
                "jsDoc": "Returns a slice holding the unread portion of the buffer.\n\nThe slice is valid for use only until the next buffer modification (that\nis, only until the next call to a method like `read()`, `write()`,\n`reset()`, or `truncate()`). The slice aliases the buffer content at\nleast until the next buffer modification, so immediate changes to the\nslice will affect the result of future reads.",
                "snippet": "bytes(): Uint8Array;",
                "accessibility": null,
                "isAbstract": false,
                "isStatic": false,
                "name": "bytes",
                "kind": "method",
                "functionDef": {
                  "params": [],
                  "returnType": {
                    "repr": "Uint8Array",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeName": "Uint8Array"
                    }
                  },
                  "isAsync": false,
                  "isGenerator": false
                },
                "location": {
                  "filename": "./deno.ts",
                  "line": 751,
                  "col": 4
                }
              },
              {
                "jsDoc": "Returns the contents of the unread portion of the buffer as a `string`.\n\n**Warning**: if multibyte characters are present when data is flowing\nthrough the buffer, this method may result in incorrect strings due to a\ncharacter being split.",
                "snippet": "toString(): string;",
                "accessibility": null,
                "isAbstract": false,
                "isStatic": false,
                "name": "toString",
                "kind": "method",
                "functionDef": {
                  "params": [],
                  "returnType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  },
                  "isAsync": false,
                  "isGenerator": false
                },
                "location": {
                  "filename": "./deno.ts",
                  "line": 757,
                  "col": 4
                }
              },
              {
                "jsDoc": "Returns whether the unread portion of the buffer is empty.",
                "snippet": "empty(): boolean;",
                "accessibility": null,
                "isAbstract": false,
                "isStatic": false,
                "name": "empty",
                "kind": "method",
                "functionDef": {
                  "params": [],
                  "returnType": {
                    "repr": "boolean",
                    "kind": "keyword",
                    "keyword": "boolean"
                  },
                  "isAsync": false,
                  "isGenerator": false
                },
                "location": {
                  "filename": "./deno.ts",
                  "line": 759,
                  "col": 4
                }
              },
              {
                "jsDoc": "Discards all but the first `n` unread bytes from the buffer but\ncontinues to use the same allocated storage. It throws if `n` is\nnegative or greater than the length of the buffer.",
                "snippet": "truncate(n: number): void;",
                "accessibility": null,
                "isAbstract": false,
                "isStatic": false,
                "name": "truncate",
                "kind": "method",
                "functionDef": {
                  "params": [
                    {
                      "name": "n",
                      "tsType": {
                        "repr": "number",
                        "kind": "keyword",
                        "keyword": "number"
                      }
                    }
                  ],
                  "returnType": {
                    "repr": "void",
                    "kind": "keyword",
                    "keyword": "void"
                  },
                  "isAsync": false,
                  "isGenerator": false
                },
                "location": {
                  "filename": "./deno.ts",
                  "line": 768,
                  "col": 4
                }
              },
              {
                "jsDoc": "Resets the buffer to be empty, but it retains the underlying storage for\nuse by future writes. `.reset()` is the same as `.truncate(0)`.",
                "snippet": "reset(): void;",
                "accessibility": null,
                "isAbstract": false,
                "isStatic": false,
                "name": "reset",
                "kind": "method",
                "functionDef": {
                  "params": [],
                  "returnType": {
                    "repr": "void",
                    "kind": "keyword",
                    "keyword": "void"
                  },
                  "isAsync": false,
                  "isGenerator": false
                },
                "location": {
                  "filename": "./deno.ts",
                  "line": 771,
                  "col": 4
                }
              },
              {
                "jsDoc": "Reads the next `p.length` bytes from the buffer or until the buffer is\ndrained. Returns the number of bytes read. If the buffer has no data to\nreturn, the return is `Deno.EOF`.",
                "snippet": "readSync(p: Uint8Array): number | EOF;",
                "accessibility": null,
                "isAbstract": false,
                "isStatic": false,
                "name": "readSync",
                "kind": "method",
                "functionDef": {
                  "params": [
                    {
                      "name": "p",
                      "tsType": {
                        "repr": "Uint8Array",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeName": "Uint8Array"
                        }
                      }
                    }
                  ],
                  "returnType": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "number",
                        "kind": "keyword",
                        "keyword": "number"
                      },
                      {
                        "repr": "EOF",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeName": "EOF"
                        }
                      }
                    ]
                  },
                  "isAsync": false,
                  "isGenerator": false
                },
                "location": {
                  "filename": "./deno.ts",
                  "line": 775,
                  "col": 4
                }
              },
              {
                "jsDoc": "Reads the next `p.length` bytes from the buffer or until the buffer is\ndrained. Resolves to the number of bytes read. If the buffer has no\ndata to return, resolves to `Deno.EOF`.",
                "snippet": "read(p: Uint8Array): Promise<number | EOF>;",
                "accessibility": null,
                "isAbstract": false,
                "isStatic": false,
                "name": "read",
                "kind": "method",
                "functionDef": {
                  "params": [
                    {
                      "name": "p",
                      "tsType": {
                        "repr": "Uint8Array",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeName": "Uint8Array"
                        }
                      }
                    }
                  ],
                  "returnType": {
                    "repr": "Promise",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeName": "Promise"
                    }
                  },
                  "isAsync": false,
                  "isGenerator": false
                },
                "location": {
                  "filename": "./deno.ts",
                  "line": 779,
                  "col": 4
                }
              },
              {
                "jsDoc": null,
                "snippet": "writeSync(p: Uint8Array): number;",
                "accessibility": null,
                "isAbstract": false,
                "isStatic": false,
                "name": "writeSync",
                "kind": "method",
                "functionDef": {
                  "params": [
                    {
                      "name": "p",
                      "tsType": {
                        "repr": "Uint8Array",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeName": "Uint8Array"
                        }
                      }
                    }
                  ],
                  "returnType": {
                    "repr": "number",
                    "kind": "keyword",
                    "keyword": "number"
                  },
                  "isAsync": false,
                  "isGenerator": false
                },
                "location": {
                  "filename": "./deno.ts",
                  "line": 780,
                  "col": 4
                }
              },
              {
                "jsDoc": null,
                "snippet": "write(p: Uint8Array): Promise<number>;",
                "accessibility": null,
                "isAbstract": false,
                "isStatic": false,
                "name": "write",
                "kind": "method",
                "functionDef": {
                  "params": [
                    {
                      "name": "p",
                      "tsType": {
                        "repr": "Uint8Array",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeName": "Uint8Array"
                        }
                      }
                    }
                  ],
                  "returnType": {
                    "repr": "Promise",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeName": "Promise"
                    }
                  },
                  "isAsync": false,
                  "isGenerator": false
                },
                "location": {
                  "filename": "./deno.ts",
                  "line": 781,
                  "col": 4
                }
              },
              {
                "jsDoc": "Grows the buffer's capacity, if necessary, to guarantee space for\nanother `n` bytes. After `.grow(n)`, at least `n` bytes can be written to\nthe buffer without another allocation. If `n` is negative, `.grow()` will\nthrow. If the buffer can't grow it will throw an error.\n\nBased on Go Lang's\n[Buffer.Grow](https://golang.org/pkg/bytes/#Buffer.Grow).",
                "snippet": "grow(n: number): void;",
                "accessibility": null,
                "isAbstract": false,
                "isStatic": false,
                "name": "grow",
                "kind": "method",
                "functionDef": {
                  "params": [
                    {
                      "name": "n",
                      "tsType": {
                        "repr": "number",
                        "kind": "keyword",
                        "keyword": "number"
                      }
                    }
                  ],
                  "returnType": {
                    "repr": "void",
                    "kind": "keyword",
                    "keyword": "void"
                  },
                  "isAsync": false,
                  "isGenerator": false
                },
                "location": {
                  "filename": "./deno.ts",
                  "line": 789,
                  "col": 4
                }
              },
              {
                "jsDoc": "Reads data from `r` until `Deno.EOF` and appends it to the buffer,\ngrowing the buffer as needed. It resolves to the number of bytes read.\nIf the buffer becomes too large, `.readFrom()` will reject with an error.\n\nBased on Go Lang's\n[Buffer.ReadFrom](https://golang.org/pkg/bytes/#Buffer.ReadFrom).",
                "snippet": "readFrom(r: Reader): Promise<number>;",
                "accessibility": null,
                "isAbstract": false,
                "isStatic": false,
                "name": "readFrom",
                "kind": "method",
                "functionDef": {
                  "params": [
                    {
                      "name": "r",
                      "tsType": {
                        "repr": "Reader",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeName": "Reader"
                        }
                      }
                    }
                  ],
                  "returnType": {
                    "repr": "Promise",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeName": "Promise"
                    }
                  },
                  "isAsync": false,
                  "isGenerator": false
                },
                "location": {
                  "filename": "./deno.ts",
                  "line": 796,
                  "col": 4
                }
              },
              {
                "jsDoc": "Reads data from `r` until `Deno.EOF` and appends it to the buffer,\ngrowing the buffer as needed. It returns the number of bytes read. If the\nbuffer becomes too large, `.readFromSync()` will throw an error.\n\nBased on Go Lang's\n[Buffer.ReadFrom](https://golang.org/pkg/bytes/#Buffer.ReadFrom).",
                "snippet": "readFromSync(r: SyncReader): number;",
                "accessibility": null,
                "isAbstract": false,
                "isStatic": false,
                "name": "readFromSync",
                "kind": "method",
                "functionDef": {
                  "params": [
                    {
                      "name": "r",
                      "tsType": {
                        "repr": "SyncReader",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeName": "SyncReader"
                        }
                      }
                    }
                  ],
                  "returnType": {
                    "repr": "number",
                    "kind": "keyword",
                    "keyword": "number"
                  },
                  "isAsync": false,
                  "isGenerator": false
                },
                "location": {
                  "filename": "./deno.ts",
                  "line": 803,
                  "col": 4
                }
              }
            ]
          }
        },
        {
          "kind": "function",
          "name": "readAll",
          "snippet": "export function readAll(r: Reader): Promise<Uint8Array>;",
          "location": {
            "filename": "./deno.ts",
            "line": 808,
            "col": 2
          },
          "jsDoc": "Read `r` until `Deno.EOF` and resolves to the content as\n`Uint8Array`.",
          "functionDef": {
            "params": [
              {
                "name": "r",
                "tsType": {
                  "repr": "Reader",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeName": "Reader"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeName": "Promise"
              }
            },
            "isAsync": false,
            "isGenerator": false
          }
        },
        {
          "kind": "function",
          "name": "readAllSync",
          "snippet": "export function readAllSync(r: SyncReader): Uint8Array;",
          "location": {
            "filename": "./deno.ts",
            "line": 811,
            "col": 2
          },
          "jsDoc": "Read `r` until `Deno.EOF` and returns the content as `Uint8Array`.",
          "functionDef": {
            "params": [
              {
                "name": "r",
                "tsType": {
                  "repr": "SyncReader",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeName": "SyncReader"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "Uint8Array",
              "kind": "typeRef",
              "typeRef": {
                "typeName": "Uint8Array"
              }
            },
            "isAsync": false,
            "isGenerator": false
          }
        },
        {
          "kind": "function",
          "name": "writeAll",
          "snippet": "export function writeAll(w: Writer, arr: Uint8Array): Promise<void>;",
          "location": {
            "filename": "./deno.ts",
            "line": 814,
            "col": 2
          },
          "jsDoc": "Write all the content of `arr` to `w`.",
          "functionDef": {
            "params": [
              {
                "name": "w",
                "tsType": {
                  "repr": "Writer",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeName": "Writer"
                  }
                }
              },
              {
                "name": "arr",
                "tsType": {
                  "repr": "Uint8Array",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeName": "Uint8Array"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeName": "Promise"
              }
            },
            "isAsync": false,
            "isGenerator": false
          }
        },
        {
          "kind": "function",
          "name": "writeAllSync",
          "snippet": "export function writeAllSync(w: SyncWriter, arr: Uint8Array): void;",
          "location": {
            "filename": "./deno.ts",
            "line": 817,
            "col": 2
          },
          "jsDoc": "Synchronously write all the content of `arr` to `w`.",
          "functionDef": {
            "params": [
              {
                "name": "w",
                "tsType": {
                  "repr": "SyncWriter",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeName": "SyncWriter"
                  }
                }
              },
              {
                "name": "arr",
                "tsType": {
                  "repr": "Uint8Array",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeName": "Uint8Array"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false
          }
        },
        {
          "kind": "interface",
          "name": "MkdirOptions",
          "snippet": "export interface MkdirOptions {\n  /** Defaults to `false`. If set to `true`, means that any intermediate\n   * directories will also be created (as with the shell command `mkdir -p`).\n   * Intermediate directories are created with the same permissions.\n   * When recursive is set to `true`, succeeds silently (without changing any\n   * permissions) if a directory already exists at the path. */\n  recursive?: boolean;\n  /** Permissions to use when creating the directory (defaults to `0o777`,\n   * before the process's umask).\n   * Ignored on Windows. */\n  mode?: number;\n}",
          "location": {
            "filename": "./deno.ts",
            "line": 821,
            "col": 2
          },
          "jsDoc": null,
          "interfaceDef": {
            "methods": [],
            "properties": [
              {
                "name": "recursive",
                "snippet": "recursive?: boolean;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 827,
                  "col": 4
                },
                "jsDoc": "Defaults to `false`. If set to `true`, means that any intermediate\ndirectories will also be created (as with the shell command `mkdir -p`).\nIntermediate directories are created with the same permissions.\nWhen recursive is set to `true`, succeeds silently (without changing any\npermissions) if a directory already exists at the path.",
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                }
              },
              {
                "name": "mode",
                "snippet": "mode?: number;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 831,
                  "col": 4
                },
                "jsDoc": "Permissions to use when creating the directory (defaults to `0o777`,\nbefore the process's umask).\nIgnored on Windows.",
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              }
            ],
            "callSignatures": []
          }
        },
        {
          "kind": "function",
          "name": "mkdirSync",
          "snippet": "export function mkdirSync(path: string, options?: MkdirOptions): void;",
          "location": {
            "filename": "./deno.ts",
            "line": 840,
            "col": 2
          },
          "jsDoc": "Synchronously creates a new directory with the specified path.\n\n      Deno.mkdirSync(\"new_dir\");\n      Deno.mkdirSync(\"nested/directories\", { recursive: true });\n\nRequires `allow-write` permission.",
          "functionDef": {
            "params": [
              {
                "name": "path",
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "name": "options",
                "tsType": {
                  "repr": "MkdirOptions",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeName": "MkdirOptions"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false
          }
        },
        {
          "kind": "function",
          "name": "mkdirSync",
          "snippet": "export function mkdirSync(\n    path: string,\n    recursive?: boolean,\n    mode?: number\n  ): void;",
          "location": {
            "filename": "./deno.ts",
            "line": 843,
            "col": 2
          },
          "jsDoc": "@deprecated",
          "functionDef": {
            "params": [
              {
                "name": "path",
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "name": "recursive",
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                }
              },
              {
                "name": "mode",
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              }
            ],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false
          }
        },
        {
          "kind": "function",
          "name": "mkdir",
          "snippet": "export function mkdir(path: string, options?: MkdirOptions): Promise<void>;",
          "location": {
            "filename": "./deno.ts",
            "line": 855,
            "col": 2
          },
          "jsDoc": "Creates a new directory with the specified path.\n\n      await Deno.mkdir(\"new_dir\");\n      await Deno.mkdir(\"nested/directories\", { recursive: true });\n\nRequires `allow-write` permission.",
          "functionDef": {
            "params": [
              {
                "name": "path",
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "name": "options",
                "tsType": {
                  "repr": "MkdirOptions",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeName": "MkdirOptions"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeName": "Promise"
              }
            },
            "isAsync": false,
            "isGenerator": false
          }
        },
        {
          "kind": "function",
          "name": "mkdir",
          "snippet": "export function mkdir(\n    path: string,\n    recursive?: boolean,\n    mode?: number\n  ): Promise<void>;",
          "location": {
            "filename": "./deno.ts",
            "line": 858,
            "col": 2
          },
          "jsDoc": "@deprecated",
          "functionDef": {
            "params": [
              {
                "name": "path",
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "name": "recursive",
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                }
              },
              {
                "name": "mode",
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              }
            ],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeName": "Promise"
              }
            },
            "isAsync": false,
            "isGenerator": false
          }
        },
        {
          "kind": "interface",
          "name": "MakeTempOptions",
          "snippet": "export interface MakeTempOptions {\n  /** Directory where the temporary directory should be created (defaults to\n   * the env variable TMPDIR, or the system's default, usually /tmp). */\n  dir?: string;\n  /** String that should precede the random portion of the temporary\n   * directory's name. */\n  prefix?: string;\n  /** String that should follow the random portion of the temporary\n   * directory's name. */\n  suffix?: string;\n}",
          "location": {
            "filename": "./deno.ts",
            "line": 866,
            "col": 2
          },
          "jsDoc": null,
          "interfaceDef": {
            "methods": [],
            "properties": [
              {
                "name": "dir",
                "snippet": "dir?: string;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 869,
                  "col": 4
                },
                "jsDoc": "Directory where the temporary directory should be created (defaults to\nthe env variable TMPDIR, or the system's default, usually /tmp).",
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "name": "prefix",
                "snippet": "prefix?: string;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 872,
                  "col": 4
                },
                "jsDoc": "String that should precede the random portion of the temporary\ndirectory's name.",
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "name": "suffix",
                "snippet": "suffix?: string;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 875,
                  "col": 4
                },
                "jsDoc": "String that should follow the random portion of the temporary\ndirectory's name.",
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              }
            ],
            "callSignatures": []
          }
        },
        {
          "kind": "function",
          "name": "makeTempDirSync",
          "snippet": "export function makeTempDirSync(options?: MakeTempOptions): string;",
          "location": {
            "filename": "./deno.ts",
            "line": 893,
            "col": 2
          },
          "jsDoc": "Synchronously creates a new temporary directory in the directory `dir`,\nits name beginning with `prefix` and ending with `suffix`.\n\nIt returns the full path to the newly created directory.\n\nIf `dir` is unspecified, uses the default directory for temporary files.\nMultiple programs calling this function simultaneously will create different\ndirectories. It is the caller's responsibility to remove the directory when\nno longer needed.\n\n      const tempDirName0 = Deno.makeTempDirSync();\n      const tempDirName1 = Deno.makeTempDirSync({ prefix: 'my_temp' });\n\nRequires `allow-write` permission.",
          "functionDef": {
            "params": [
              {
                "name": "options",
                "tsType": {
                  "repr": "MakeTempOptions",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeName": "MakeTempOptions"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "string",
              "kind": "keyword",
              "keyword": "string"
            },
            "isAsync": false,
            "isGenerator": false
          }
        },
        {
          "kind": "function",
          "name": "makeTempDir",
          "snippet": "export function makeTempDir(options?: MakeTempOptions): Promise<string>;",
          "location": {
            "filename": "./deno.ts",
            "line": 910,
            "col": 2
          },
          "jsDoc": "Creates a new temporary directory in the directory `dir`, its name\nbeginning with `prefix` and ending with `suffix`.\n\nIt resolves to the full path to the newly created directory.\n\nIf `dir` is unspecified, uses the default directory for temporary files.\nMultiple programs calling this function simultaneously will create different\ndirectories. It is the caller's responsibility to remove the directory when\nno longer needed.\n\n      const tempDirName0 = await Deno.makeTempDir();\n      const tempDirName1 = await Deno.makeTempDir({ prefix: 'my_temp' });\n\nRequires `allow-write` permission.",
          "functionDef": {
            "params": [
              {
                "name": "options",
                "tsType": {
                  "repr": "MakeTempOptions",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeName": "MakeTempOptions"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeName": "Promise"
              }
            },
            "isAsync": false,
            "isGenerator": false
          }
        },
        {
          "kind": "function",
          "name": "makeTempFileSync",
          "snippet": "export function makeTempFileSync(options?: MakeTempOptions): string;",
          "location": {
            "filename": "./deno.ts",
            "line": 926,
            "col": 2
          },
          "jsDoc": "Synchronously creates a new temporary file in the directory `dir`, its name\nbeginning with `prefix` and ending with `suffix`.\n\nIt returns the full path to the newly created file.\n\nIf `dir` is unspecified, uses the default directory for temporary files.\nMultiple programs calling this function simultaneously will create different\nfiles. It is the caller's responsibility to remove the file when\nno longer needed.\n\n      const tempFileName0 = Deno.makeTempFileSync();\n      const tempFileName1 = Deno.makeTempFileSync({ prefix: 'my_temp' });\n\nRequires `allow-write` permission.",
          "functionDef": {
            "params": [
              {
                "name": "options",
                "tsType": {
                  "repr": "MakeTempOptions",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeName": "MakeTempOptions"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "string",
              "kind": "keyword",
              "keyword": "string"
            },
            "isAsync": false,
            "isGenerator": false
          }
        },
        {
          "kind": "function",
          "name": "makeTempFile",
          "snippet": "export function makeTempFile(options?: MakeTempOptions): Promise<string>;",
          "location": {
            "filename": "./deno.ts",
            "line": 942,
            "col": 2
          },
          "jsDoc": "Creates a new temporary file in the directory `dir`, its name\nbeginning with `prefix` and ending with `suffix`.\n\nIt resolves to the full path to the newly created file.\n\nIf `dir` is unspecified, uses the default directory for temporary files.\nMultiple programs calling this function simultaneously will create different\nfiles. It is the caller's responsibility to remove the file when\nno longer needed.\n\n      const tempFileName0 = await Deno.makeTempFile();\n      const tempFileName1 = await Deno.makeTempFile({ prefix: 'my_temp' });\n\nRequires `allow-write` permission.",
          "functionDef": {
            "params": [
              {
                "name": "options",
                "tsType": {
                  "repr": "MakeTempOptions",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeName": "MakeTempOptions"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeName": "Promise"
              }
            },
            "isAsync": false,
            "isGenerator": false
          }
        },
        {
          "kind": "function",
          "name": "chmodSync",
          "snippet": "export function chmodSync(path: string, mode: number): void;",
          "location": {
            "filename": "./deno.ts",
            "line": 956,
            "col": 2
          },
          "jsDoc": "Synchronously changes the permission of a specific file/directory of\nspecified path.  Ignores the process's umask.\n\n      Deno.chmodSync(\"/path/to/file\", 0o666);\n\nFor a full description, see [chmod](#chmod)\n\nNOTE: This API currently throws on Windows\n\nRequires `allow-write` permission.",
          "functionDef": {
            "params": [
              {
                "name": "path",
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "name": "mode",
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              }
            ],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false
          }
        },
        {
          "kind": "function",
          "name": "chmod",
          "snippet": "export function chmod(path: string, mode: number): Promise<void>;",
          "location": {
            "filename": "./deno.ts",
            "line": 984,
            "col": 2
          },
          "jsDoc": "Changes the permission of a specific file/directory of specified path.\nIgnores the process's umask.\n\n      await Deno.chmod(\"/path/to/file\", 0o666);\n\nThe mode is a sequence of 3 octal numbers.  The first/left-most number\nspecifies the permissions for the owner.  The second number specifies the\npermissions for the group. The last/right-most number specifies the\npermissions for others.  For example, with a mode of 0o764, the owner (7) can\nread/write/execute, the group (6) can read/write and everyone else (4) can\nread only.\n\n| Number | Description |\n| ------ | ----------- |\n| 7      | read, write, and execute |\n| 6      | read and write |\n| 5      | read and execute |\n| 4      | read only |\n| 3      | write and execute |\n| 2      | write only |\n| 1      | execute only |\n| 0      | no permission |\n\nNOTE: This API currently throws on Windows\n\nRequires `allow-write` permission.",
          "functionDef": {
            "params": [
              {
                "name": "path",
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "name": "mode",
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              }
            ],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeName": "Promise"
              }
            },
            "isAsync": false,
            "isGenerator": false
          }
        },
        {
          "kind": "function",
          "name": "chownSync",
          "snippet": "export function chownSync(path: string, uid: number, gid: number): void;",
          "location": {
            "filename": "./deno.ts",
            "line": 997,
            "col": 2
          },
          "jsDoc": "Synchronously change owner of a regular file or directory. Linux/Mac OS\nonly at the moment.\n\nRequires `allow-write` permission.\n\n@param path path to the file\n@param uid user id of the new owner\n@param gid group id of the new owner",
          "functionDef": {
            "params": [
              {
                "name": "path",
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "name": "uid",
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              },
              {
                "name": "gid",
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              }
            ],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false
          }
        },
        {
          "kind": "function",
          "name": "chown",
          "snippet": "export function chown(path: string, uid: number, gid: number): Promise<void>;",
          "location": {
            "filename": "./deno.ts",
            "line": 1008,
            "col": 2
          },
          "jsDoc": "Change owner of a regular file or directory. Linux/Mac OS only at the\nmoment.\n\nRequires `allow-write` permission.\n\n@param path path to the file\n@param uid user id of the new owner\n@param gid group id of the new owner",
          "functionDef": {
            "params": [
              {
                "name": "path",
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "name": "uid",
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              },
              {
                "name": "gid",
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              }
            ],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeName": "Promise"
              }
            },
            "isAsync": false,
            "isGenerator": false
          }
        },
        {
          "kind": "function",
          "name": "utimeSync",
          "snippet": "export function utimeSync(\n    path: string,\n    atime: number | Date,\n    mtime: number | Date\n  ): void;",
          "location": {
            "filename": "./deno.ts",
            "line": 1021,
            "col": 2
          },
          "jsDoc": "**UNSTABLE**: needs investigation into high precision time.\n\nSynchronously changes the access and modification times of a file system\nobject referenced by `path`. Given times are either in seconds (UNIX epoch\ntime) or as `Date` objects.\n\n      Deno.utimeSync(\"myfile.txt\", 1556495550, new Date());\n\nRequires `allow-write` permission.",
          "functionDef": {
            "params": [
              {
                "name": "path",
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "name": "atime",
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    {
                      "repr": "Date",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "Date"
                      }
                    }
                  ]
                }
              },
              {
                "name": "mtime",
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    {
                      "repr": "Date",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "Date"
                      }
                    }
                  ]
                }
              }
            ],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false
          }
        },
        {
          "kind": "function",
          "name": "utime",
          "snippet": "export function utime(\n    path: string,\n    atime: number | Date,\n    mtime: number | Date\n  ): Promise<void>;",
          "location": {
            "filename": "./deno.ts",
            "line": 1036,
            "col": 2
          },
          "jsDoc": "**UNSTABLE**: needs investigation into high precision time.\n\nChanges the access and modification times of a file system object\nreferenced by `path`. Given times are either in seconds (UNIX epoch time)\nor as `Date` objects.\n\n      await Deno.utime(\"myfile.txt\", 1556495550, new Date());\n\nRequires `allow-write` permission.",
          "functionDef": {
            "params": [
              {
                "name": "path",
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "name": "atime",
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    {
                      "repr": "Date",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "Date"
                      }
                    }
                  ]
                }
              },
              {
                "name": "mtime",
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    {
                      "repr": "Date",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "Date"
                      }
                    }
                  ]
                }
              }
            ],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeName": "Promise"
              }
            },
            "isAsync": false,
            "isGenerator": false
          }
        },
        {
          "kind": "interface",
          "name": "RemoveOptions",
          "snippet": "export interface RemoveOptions {\n  /** Defaults to `false`. If set to `true`, path will be removed even if\n   * it's a non-empty directory. */\n  recursive?: boolean;\n}",
          "location": {
            "filename": "./deno.ts",
            "line": 1044,
            "col": 2
          },
          "jsDoc": null,
          "interfaceDef": {
            "methods": [],
            "properties": [
              {
                "name": "recursive",
                "snippet": "recursive?: boolean;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 1047,
                  "col": 4
                },
                "jsDoc": "Defaults to `false`. If set to `true`, path will be removed even if\nit's a non-empty directory.",
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                }
              }
            ],
            "callSignatures": []
          }
        },
        {
          "kind": "function",
          "name": "removeSync",
          "snippet": "export function removeSync(path: string, options?: RemoveOptions): void;",
          "location": {
            "filename": "./deno.ts",
            "line": 1057,
            "col": 2
          },
          "jsDoc": "Synchronously removes the named file or directory. Throws error if\npermission denied, path not found, or path is a non-empty directory and\nthe `recursive` option isn't set to `true`.\n\n      Deno.removeSync(\"/path/to/dir/or/file\", { recursive: false });\n\nRequires `allow-write` permission.",
          "functionDef": {
            "params": [
              {
                "name": "path",
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "name": "options",
                "tsType": {
                  "repr": "RemoveOptions",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeName": "RemoveOptions"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false
          }
        },
        {
          "kind": "function",
          "name": "remove",
          "snippet": "export function remove(path: string, options?: RemoveOptions): Promise<void>;",
          "location": {
            "filename": "./deno.ts",
            "line": 1066,
            "col": 2
          },
          "jsDoc": "Removes the named file or directory. Throws error if permission denied,\npath not found, or path is a non-empty directory and the `recursive`\noption isn't set to `true`.\n\n      await Deno.remove(\"/path/to/dir/or/file\", { recursive: false });\n\nRequires `allow-write` permission.",
          "functionDef": {
            "params": [
              {
                "name": "path",
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "name": "options",
                "tsType": {
                  "repr": "RemoveOptions",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeName": "RemoveOptions"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeName": "Promise"
              }
            },
            "isAsync": false,
            "isGenerator": false
          }
        },
        {
          "kind": "function",
          "name": "renameSync",
          "snippet": "export function renameSync(oldpath: string, newpath: string): void;",
          "location": {
            "filename": "./deno.ts",
            "line": 1078,
            "col": 2
          },
          "jsDoc": "Synchronously renames (moves) `oldpath` to `newpath`. If `newpath` already\nexists and is not a directory, `renameSync()` replaces it. OS-specific\nrestrictions may apply when `oldpath` and `newpath` are in different\ndirectories.\n\n      Deno.renameSync(\"old/path\", \"new/path\");\n\nRequires `allow-read` and `allow-write` permissions.",
          "functionDef": {
            "params": [
              {
                "name": "oldpath",
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "name": "newpath",
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              }
            ],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false
          }
        },
        {
          "kind": "function",
          "name": "rename",
          "snippet": "export function rename(oldpath: string, newpath: string): Promise<void>;",
          "location": {
            "filename": "./deno.ts",
            "line": 1087,
            "col": 2
          },
          "jsDoc": "Renames (moves) `oldpath` to `newpath`. If `newpath` already exists and is\nnot a directory, `rename()` replaces it. OS-specific restrictions may apply\nwhen `oldpath` and `newpath` are in different directories.\n\n      await Deno.rename(\"old/path\", \"new/path\");\n\nRequires `allow-read` and `allow-write`.",
          "functionDef": {
            "params": [
              {
                "name": "oldpath",
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "name": "newpath",
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              }
            ],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeName": "Promise"
              }
            },
            "isAsync": false,
            "isGenerator": false
          }
        },
        {
          "kind": "function",
          "name": "readFileSync",
          "snippet": "export function readFileSync(path: string): Uint8Array;",
          "location": {
            "filename": "./deno.ts",
            "line": 1098,
            "col": 2
          },
          "jsDoc": "Reads and returns the entire contents of a file.\n\n      const decoder = new TextDecoder(\"utf-8\");\n      const data = Deno.readFileSync(\"hello.txt\");\n      console.log(decoder.decode(data));\n\nRequires `allow-read` permission.",
          "functionDef": {
            "params": [
              {
                "name": "path",
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              }
            ],
            "returnType": {
              "repr": "Uint8Array",
              "kind": "typeRef",
              "typeRef": {
                "typeName": "Uint8Array"
              }
            },
            "isAsync": false,
            "isGenerator": false
          }
        },
        {
          "kind": "function",
          "name": "readFile",
          "snippet": "export function readFile(path: string): Promise<Uint8Array>;",
          "location": {
            "filename": "./deno.ts",
            "line": 1107,
            "col": 2
          },
          "jsDoc": "Reads and resolves to the entire contents of a file.\n\n      const decoder = new TextDecoder(\"utf-8\");\n      const data = await Deno.readFile(\"hello.txt\");\n      console.log(decoder.decode(data));\n\nRequires `allow-read` permission.",
          "functionDef": {
            "params": [
              {
                "name": "path",
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              }
            ],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeName": "Promise"
              }
            },
            "isAsync": false,
            "isGenerator": false
          }
        },
        {
          "kind": "interface",
          "name": "FileInfo",
          "snippet": "export interface FileInfo {\n  /** The size of the file, in bytes. */\n  size: number;\n  /** The last modification time of the file. This corresponds to the `mtime`\n   * field from `stat` on Linux/Mac OS and `ftLastWriteTime` on Windows. This\n   * may not be available on all platforms. */\n  modified: number | null;\n  /** The last access time of the file. This corresponds to the `atime`\n   * field from `stat` on Unix and `ftLastAccessTime` on Windows. This may not\n   * be available on all platforms. */\n  accessed: number | null;\n  /** The last access time of the file. This corresponds to the `birthtime`\n   * field from `stat` on Mac/BSD and `ftCreationTime` on Windows. This may not\n   * be available on all platforms. */\n  created: number | null;\n  /** The file or directory name. */\n  name: string | null;\n  /** ID of the device containing the file.\n   *\n   * _Linux/Mac OS only._ */\n  dev: number | null;\n  /** Inode number.\n   *\n   * _Linux/Mac OS only._ */\n  ino: number | null;\n  /** **UNSTABLE**: Match behavior with Go on Windows for `mode`.\n   *\n   * The underlying raw `st_mode` bits that contain the standard Unix\n   * permissions for this file/directory. */\n  mode: number | null;\n  /** Number of hard links pointing to this file.\n   *\n   * _Linux/Mac OS only._ */\n  nlink: number | null;\n  /** User ID of the owner of this file.\n   *\n   * _Linux/Mac OS only._ */\n  uid: number | null;\n  /** User ID of the owner of this file.\n   *\n   * _Linux/Mac OS only._ */\n  gid: number | null;\n  /** Device ID of this file.\n   *\n   * _Linux/Mac OS only._ */\n  rdev: number | null;\n  /** Blocksize for filesystem I/O.\n   *\n   * _Linux/Mac OS only._ */\n  blksize: number | null;\n  /** Number of blocks allocated to the file, in 512-byte units.\n   *\n   * _Linux/Mac OS only._ */\n  blocks: number | null;\n  /** Returns whether this is info for a regular file. This result is mutually\n   * exclusive to `FileInfo.isDirectory` and `FileInfo.isSymlink`. */\n  isFile(): boolean;\n  /** Returns whether this is info for a regular directory. This result is\n   * mutually exclusive to `FileInfo.isFile` and `FileInfo.isSymlink`. */\n  isDirectory(): boolean;\n  /** Returns whether this is info for a symlink. This result is\n   * mutually exclusive to `FileInfo.isFile` and `FileInfo.isDirectory`. */\n  isSymlink(): boolean;\n}",
          "location": {
            "filename": "./deno.ts",
            "line": 1114,
            "col": 2
          },
          "jsDoc": "A FileInfo describes a file and is returned by `stat`, `lstat`,\n`statSync`, `lstatSync`. A list of FileInfo is returned by `readdir`,\n`readdirSync`.",
          "interfaceDef": {
            "methods": [
              {
                "snippet": "isFile(): boolean;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 1170,
                  "col": 4
                },
                "jsDoc": "Returns whether this is info for a regular file. This result is mutually\nexclusive to `FileInfo.isDirectory` and `FileInfo.isSymlink`.",
                "params": [],
                "returnType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                }
              },
              {
                "snippet": "isDirectory(): boolean;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 1173,
                  "col": 4
                },
                "jsDoc": "Returns whether this is info for a regular directory. This result is\nmutually exclusive to `FileInfo.isFile` and `FileInfo.isSymlink`.",
                "params": [],
                "returnType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                }
              },
              {
                "snippet": "isSymlink(): boolean;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 1176,
                  "col": 4
                },
                "jsDoc": "Returns whether this is info for a symlink. This result is\nmutually exclusive to `FileInfo.isFile` and `FileInfo.isDirectory`.",
                "params": [],
                "returnType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                }
              }
            ],
            "properties": [
              {
                "name": "size",
                "snippet": "size: number;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 1116,
                  "col": 4
                },
                "jsDoc": "The size of the file, in bytes.",
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              },
              {
                "name": "modified",
                "snippet": "modified: number | null;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 1120,
                  "col": 4
                },
                "jsDoc": "The last modification time of the file. This corresponds to the `mtime`\nfield from `stat` on Linux/Mac OS and `ftLastWriteTime` on Windows. This\nmay not be available on all platforms.",
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    {
                      "repr": "null",
                      "kind": "keyword",
                      "keyword": "null"
                    }
                  ]
                }
              },
              {
                "name": "accessed",
                "snippet": "accessed: number | null;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 1124,
                  "col": 4
                },
                "jsDoc": "The last access time of the file. This corresponds to the `atime`\nfield from `stat` on Unix and `ftLastAccessTime` on Windows. This may not\nbe available on all platforms.",
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    {
                      "repr": "null",
                      "kind": "keyword",
                      "keyword": "null"
                    }
                  ]
                }
              },
              {
                "name": "created",
                "snippet": "created: number | null;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 1128,
                  "col": 4
                },
                "jsDoc": "The last access time of the file. This corresponds to the `birthtime`\nfield from `stat` on Mac/BSD and `ftCreationTime` on Windows. This may not\nbe available on all platforms.",
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    {
                      "repr": "null",
                      "kind": "keyword",
                      "keyword": "null"
                    }
                  ]
                }
              },
              {
                "name": "name",
                "snippet": "name: string | null;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 1130,
                  "col": 4
                },
                "jsDoc": "The file or directory name.",
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    {
                      "repr": "null",
                      "kind": "keyword",
                      "keyword": "null"
                    }
                  ]
                }
              },
              {
                "name": "dev",
                "snippet": "dev: number | null;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 1134,
                  "col": 4
                },
                "jsDoc": "ID of the device containing the file.\n\n_Linux/Mac OS only._",
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    {
                      "repr": "null",
                      "kind": "keyword",
                      "keyword": "null"
                    }
                  ]
                }
              },
              {
                "name": "ino",
                "snippet": "ino: number | null;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 1138,
                  "col": 4
                },
                "jsDoc": "Inode number.\n\n_Linux/Mac OS only._",
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    {
                      "repr": "null",
                      "kind": "keyword",
                      "keyword": "null"
                    }
                  ]
                }
              },
              {
                "name": "mode",
                "snippet": "mode: number | null;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 1143,
                  "col": 4
                },
                "jsDoc": "**UNSTABLE**: Match behavior with Go on Windows for `mode`.\n\nThe underlying raw `st_mode` bits that contain the standard Unix\npermissions for this file/directory.",
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    {
                      "repr": "null",
                      "kind": "keyword",
                      "keyword": "null"
                    }
                  ]
                }
              },
              {
                "name": "nlink",
                "snippet": "nlink: number | null;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 1147,
                  "col": 4
                },
                "jsDoc": "Number of hard links pointing to this file.\n\n_Linux/Mac OS only._",
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    {
                      "repr": "null",
                      "kind": "keyword",
                      "keyword": "null"
                    }
                  ]
                }
              },
              {
                "name": "uid",
                "snippet": "uid: number | null;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 1151,
                  "col": 4
                },
                "jsDoc": "User ID of the owner of this file.\n\n_Linux/Mac OS only._",
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    {
                      "repr": "null",
                      "kind": "keyword",
                      "keyword": "null"
                    }
                  ]
                }
              },
              {
                "name": "gid",
                "snippet": "gid: number | null;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 1155,
                  "col": 4
                },
                "jsDoc": "User ID of the owner of this file.\n\n_Linux/Mac OS only._",
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    {
                      "repr": "null",
                      "kind": "keyword",
                      "keyword": "null"
                    }
                  ]
                }
              },
              {
                "name": "rdev",
                "snippet": "rdev: number | null;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 1159,
                  "col": 4
                },
                "jsDoc": "Device ID of this file.\n\n_Linux/Mac OS only._",
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    {
                      "repr": "null",
                      "kind": "keyword",
                      "keyword": "null"
                    }
                  ]
                }
              },
              {
                "name": "blksize",
                "snippet": "blksize: number | null;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 1163,
                  "col": 4
                },
                "jsDoc": "Blocksize for filesystem I/O.\n\n_Linux/Mac OS only._",
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    {
                      "repr": "null",
                      "kind": "keyword",
                      "keyword": "null"
                    }
                  ]
                }
              },
              {
                "name": "blocks",
                "snippet": "blocks: number | null;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 1167,
                  "col": 4
                },
                "jsDoc": "Number of blocks allocated to the file, in 512-byte units.\n\n_Linux/Mac OS only._",
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    {
                      "repr": "null",
                      "kind": "keyword",
                      "keyword": "null"
                    }
                  ]
                }
              }
            ],
            "callSignatures": []
          }
        },
        {
          "kind": "function",
          "name": "realpathSync",
          "snippet": "export function realpathSync(path: string): string;",
          "location": {
            "filename": "./deno.ts",
            "line": 1186,
            "col": 2
          },
          "jsDoc": "Returns absolute normalized path with, symbolic links resolved.\n\n      const realPath = Deno.realpathSync(\"./some/path\");\n\nRequires `allow-read` permission.",
          "functionDef": {
            "params": [
              {
                "name": "path",
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              }
            ],
            "returnType": {
              "repr": "string",
              "kind": "keyword",
              "keyword": "string"
            },
            "isAsync": false,
            "isGenerator": false
          }
        },
        {
          "kind": "function",
          "name": "realpath",
          "snippet": "export function realpath(path: string): Promise<string>;",
          "location": {
            "filename": "./deno.ts",
            "line": 1193,
            "col": 2
          },
          "jsDoc": "Resolves to the absolute normalized path, with symbolic links resolved.\n\n      const realPath = await Deno.realpath(\"./some/path\");\n\nRequires `allow-read` permission.",
          "functionDef": {
            "params": [
              {
                "name": "path",
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              }
            ],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeName": "Promise"
              }
            },
            "isAsync": false,
            "isGenerator": false
          }
        },
        {
          "kind": "function",
          "name": "readdirSync",
          "snippet": "export function readdirSync(path: string): FileInfo[];",
          "location": {
            "filename": "./deno.ts",
            "line": 1205,
            "col": 2
          },
          "jsDoc": "UNSTABLE: need to consider streaming case\n\nSynchronously reads the directory given by `path` and returns an array of\n`Deno.FileInfo`.\n\n      const files = Deno.readdirSync(\"/\");\n\nRequires `allow-read` permission.",
          "functionDef": {
            "params": [
              {
                "name": "path",
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              }
            ],
            "returnType": {
              "repr": "",
              "kind": "array",
              "array": {
                "repr": "FileInfo",
                "kind": "typeRef",
                "typeRef": {
                  "typeName": "FileInfo"
                }
              }
            },
            "isAsync": false,
            "isGenerator": false
          }
        },
        {
          "kind": "function",
          "name": "readdir",
          "snippet": "export function readdir(path: string): Promise<FileInfo[]>;",
          "location": {
            "filename": "./deno.ts",
            "line": 1214,
            "col": 2
          },
          "jsDoc": "UNSTABLE: Maybe need to return an `AsyncIterable`.\n\nReads the directory given by `path` and resolves to an array of `Deno.FileInfo`.\n\n      const files = await Deno.readdir(\"/\");\n\nRequires `allow-read` permission.",
          "functionDef": {
            "params": [
              {
                "name": "path",
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              }
            ],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeName": "Promise"
              }
            },
            "isAsync": false,
            "isGenerator": false
          }
        },
        {
          "kind": "function",
          "name": "copyFileSync",
          "snippet": "export function copyFileSync(fromPath: string, toPath: string): void;",
          "location": {
            "filename": "./deno.ts",
            "line": 1226,
            "col": 2
          },
          "jsDoc": "Synchronously copies the contents and permissions of one file to another\nspecified path, by default creating a new file if needed, else overwriting.\nFails if target path is a directory or is unwritable.\n\n      Deno.copyFileSync(\"from.txt\", \"to.txt\");\n\nRequires `allow-read` permission on fromPath.\nRequires `allow-write` permission on toPath.",
          "functionDef": {
            "params": [
              {
                "name": "fromPath",
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "name": "toPath",
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              }
            ],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false
          }
        },
        {
          "kind": "function",
          "name": "copyFile",
          "snippet": "export function copyFile(fromPath: string, toPath: string): Promise<void>;",
          "location": {
            "filename": "./deno.ts",
            "line": 1236,
            "col": 2
          },
          "jsDoc": "Copies the contents and permissions of one file to another specified path,\nby default creating a new file if needed, else overwriting. Fails if target\npath is a directory or is unwritable.\n\n      await Deno.copyFile(\"from.txt\", \"to.txt\");\n\nRequires `allow-read` permission on fromPath.\nRequires `allow-write` permission on toPath.",
          "functionDef": {
            "params": [
              {
                "name": "fromPath",
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "name": "toPath",
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              }
            ],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeName": "Promise"
              }
            },
            "isAsync": false,
            "isGenerator": false
          }
        },
        {
          "kind": "function",
          "name": "readlinkSync",
          "snippet": "export function readlinkSync(path: string): string;",
          "location": {
            "filename": "./deno.ts",
            "line": 1245,
            "col": 2
          },
          "jsDoc": "Returns the destination of the named symbolic link.\n\n      const targetPath = Deno.readlinkSync(\"symlink/path\");\n\nRequires `allow-read` permission.",
          "functionDef": {
            "params": [
              {
                "name": "path",
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              }
            ],
            "returnType": {
              "repr": "string",
              "kind": "keyword",
              "keyword": "string"
            },
            "isAsync": false,
            "isGenerator": false
          }
        },
        {
          "kind": "function",
          "name": "readlink",
          "snippet": "export function readlink(path: string): Promise<string>;",
          "location": {
            "filename": "./deno.ts",
            "line": 1252,
            "col": 2
          },
          "jsDoc": "Resolves to the destination of the named symbolic link.\n\n      const targetPath = await Deno.readlink(\"symlink/path\");\n\nRequires `allow-read` permission.",
          "functionDef": {
            "params": [
              {
                "name": "path",
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              }
            ],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeName": "Promise"
              }
            },
            "isAsync": false,
            "isGenerator": false
          }
        },
        {
          "kind": "function",
          "name": "lstat",
          "snippet": "export function lstat(path: string): Promise<FileInfo>;",
          "location": {
            "filename": "./deno.ts",
            "line": 1263,
            "col": 2
          },
          "jsDoc": "Resolves to a `Deno.FileInfo` for the specified `path`. If `path` is a\nsymlink, information for the symlink will be returned.\n\n      const fileInfo = await Deno.lstat(\"hello.txt\");\n      assert(fileInfo.isFile());\n\nRequires `allow-read` permission.",
          "functionDef": {
            "params": [
              {
                "name": "path",
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              }
            ],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeName": "Promise"
              }
            },
            "isAsync": false,
            "isGenerator": false
          }
        },
        {
          "kind": "function",
          "name": "lstatSync",
          "snippet": "export function lstatSync(path: string): FileInfo;",
          "location": {
            "filename": "./deno.ts",
            "line": 1272,
            "col": 2
          },
          "jsDoc": "Synchronously returns a `Deno.FileInfo` for the specified `path`. If\n`path` is a symlink, information for the symlink will be returned.\n\n      const fileInfo = Deno.lstatSync(\"hello.txt\");\n      assert(fileInfo.isFile());\n\nRequires `allow-read` permission.",
          "functionDef": {
            "params": [
              {
                "name": "path",
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              }
            ],
            "returnType": {
              "repr": "FileInfo",
              "kind": "typeRef",
              "typeRef": {
                "typeName": "FileInfo"
              }
            },
            "isAsync": false,
            "isGenerator": false
          }
        },
        {
          "kind": "function",
          "name": "stat",
          "snippet": "export function stat(path: string): Promise<FileInfo>;",
          "location": {
            "filename": "./deno.ts",
            "line": 1281,
            "col": 2
          },
          "jsDoc": "Resolves to a `Deno.FileInfo` for the specified `path`. Will always\nfollow symlinks.\n\n      const fileInfo = await Deno.stat(\"hello.txt\");\n      assert(fileInfo.isFile());\n\nRequires `allow-read` permission.",
          "functionDef": {
            "params": [
              {
                "name": "path",
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              }
            ],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeName": "Promise"
              }
            },
            "isAsync": false,
            "isGenerator": false
          }
        },
        {
          "kind": "function",
          "name": "statSync",
          "snippet": "export function statSync(path: string): FileInfo;",
          "location": {
            "filename": "./deno.ts",
            "line": 1290,
            "col": 2
          },
          "jsDoc": "Synchronously returns a `Deno.FileInfo` for the specified `path`. Will\nalways follow symlinks.\n\n      const fileInfo = Deno.statSync(\"hello.txt\");\n      assert(fileInfo.isFile());\n\nRequires `allow-read` permission.",
          "functionDef": {
            "params": [
              {
                "name": "path",
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              }
            ],
            "returnType": {
              "repr": "FileInfo",
              "kind": "typeRef",
              "typeRef": {
                "typeName": "FileInfo"
              }
            },
            "isAsync": false,
            "isGenerator": false
          }
        },
        {
          "kind": "function",
          "name": "linkSync",
          "snippet": "export function linkSync(oldpath: string, newpath: string): void;",
          "location": {
            "filename": "./deno.ts",
            "line": 1299,
            "col": 2
          },
          "jsDoc": "Creates `newpath` as a hard link to `oldpath`.\n\n      Deno.linkSync(\"old/name\", \"new/name\");\n\nRequires `allow-read` and `allow-write` permissions.",
          "functionDef": {
            "params": [
              {
                "name": "oldpath",
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "name": "newpath",
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              }
            ],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false
          }
        },
        {
          "kind": "function",
          "name": "link",
          "snippet": "export function link(oldpath: string, newpath: string): Promise<void>;",
          "location": {
            "filename": "./deno.ts",
            "line": 1306,
            "col": 2
          },
          "jsDoc": "Creates `newpath` as a hard link to `oldpath`.\n\n      await Deno.link(\"old/name\", \"new/name\");\n\nRequires `allow-read` and `allow-write` permissions.",
          "functionDef": {
            "params": [
              {
                "name": "oldpath",
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "name": "newpath",
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              }
            ],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeName": "Promise"
              }
            },
            "isAsync": false,
            "isGenerator": false
          }
        },
        {
          "kind": "function",
          "name": "symlinkSync",
          "snippet": "export function symlinkSync(\n    oldpath: string,\n    newpath: string,\n    type?: string\n  ): void;",
          "location": {
            "filename": "./deno.ts",
            "line": 1319,
            "col": 2
          },
          "jsDoc": "**UNSTABLE**: `type` argument type may be changed to `\"dir\" | \"file\"`.\n\nCreates `newpath` as a symbolic link to `oldpath`. The type argument can be\nset to `dir` or `file`. Is only available on Windows and ignored on other\nplatforms.\n\n      Deno.symlinkSync(\"old/name\", \"new/name\");\n\nRequires `allow-read` and `allow-write` permissions.",
          "functionDef": {
            "params": [
              {
                "name": "oldpath",
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "name": "newpath",
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "name": "type",
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              }
            ],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false
          }
        },
        {
          "kind": "function",
          "name": "symlink",
          "snippet": "export function symlink(\n    oldpath: string,\n    newpath: string,\n    type?: string\n  ): Promise<void>;",
          "location": {
            "filename": "./deno.ts",
            "line": 1334,
            "col": 2
          },
          "jsDoc": "**UNSTABLE**: `type` argument may be changed to \"dir\" | \"file\"\n\nCreates `newpath` as a symbolic link to `oldpath`. The type argument can be\nset to `dir` or `file`. Is only available on Windows and ignored on other\nplatforms.\n\n      await Deno.symlink(\"old/name\", \"new/name\");\n\nRequires `allow-read` and `allow-write` permissions.",
          "functionDef": {
            "params": [
              {
                "name": "oldpath",
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "name": "newpath",
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "name": "type",
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              }
            ],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeName": "Promise"
              }
            },
            "isAsync": false,
            "isGenerator": false
          }
        },
        {
          "kind": "interface",
          "name": "WriteFileOptions",
          "snippet": "export interface WriteFileOptions {\n  /** Defaults to `false`. If set to `true`, will append to a file instead of\n   * overwriting previous contents. */\n  append?: boolean;\n  /** Sets the option to allow creating a new file, if one doesn't already\n   * exist at the specified path (defaults to `true`). */\n  create?: boolean;\n  /** Permissions always applied to file. */\n  mode?: number;\n}",
          "location": {
            "filename": "./deno.ts",
            "line": 1343,
            "col": 2
          },
          "jsDoc": "Options for writing to a file.",
          "interfaceDef": {
            "methods": [],
            "properties": [
              {
                "name": "append",
                "snippet": "append?: boolean;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 1346,
                  "col": 4
                },
                "jsDoc": "Defaults to `false`. If set to `true`, will append to a file instead of\noverwriting previous contents.",
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                }
              },
              {
                "name": "create",
                "snippet": "create?: boolean;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 1349,
                  "col": 4
                },
                "jsDoc": "Sets the option to allow creating a new file, if one doesn't already\nexist at the specified path (defaults to `true`).",
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                }
              },
              {
                "name": "mode",
                "snippet": "mode?: number;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 1351,
                  "col": 4
                },
                "jsDoc": "Permissions always applied to file.",
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              }
            ],
            "callSignatures": []
          }
        },
        {
          "kind": "function",
          "name": "writeFileSync",
          "snippet": "export function writeFileSync(\n    path: string,\n    data: Uint8Array,\n    options?: WriteFileOptions\n  ): void;",
          "location": {
            "filename": "./deno.ts",
            "line": 1363,
            "col": 2
          },
          "jsDoc": "Synchronously write data to the given path, by default creating a new\nfile if needed, else overwriting.\n\n      const encoder = new TextEncoder();\n      const data = encoder.encode(\"Hello world\\n\");\n      Deno.writeFileSync(\"hello.txt\", data);\n\nRequires `allow-write` permission, and `allow-read` if create is `false`.",
          "functionDef": {
            "params": [
              {
                "name": "path",
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "name": "data",
                "tsType": {
                  "repr": "Uint8Array",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeName": "Uint8Array"
                  }
                }
              },
              {
                "name": "options",
                "tsType": {
                  "repr": "WriteFileOptions",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeName": "WriteFileOptions"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false
          }
        },
        {
          "kind": "function",
          "name": "writeFile",
          "snippet": "export function writeFile(\n    path: string,\n    data: Uint8Array,\n    options?: WriteFileOptions\n  ): Promise<void>;",
          "location": {
            "filename": "./deno.ts",
            "line": 1378,
            "col": 2
          },
          "jsDoc": "Write data to the given path, by default creating a new file if needed,\nelse overwriting.\n\n      const encoder = new TextEncoder();\n      const data = encoder.encode(\"Hello world\\n\");\n      await Deno.writeFile(\"hello.txt\", data);\n\nRequires `allow-write` permission, and `allow-read` if create is `false`.",
          "functionDef": {
            "params": [
              {
                "name": "path",
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "name": "data",
                "tsType": {
                  "repr": "Uint8Array",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeName": "Uint8Array"
                  }
                }
              },
              {
                "name": "options",
                "tsType": {
                  "repr": "WriteFileOptions",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeName": "WriteFileOptions"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeName": "Promise"
              }
            },
            "isAsync": false,
            "isGenerator": false
          }
        },
        {
          "kind": "function",
          "name": "applySourceMap",
          "snippet": "export function applySourceMap(location: Location): Location;",
          "location": {
            "filename": "./deno.ts",
            "line": 1418,
            "col": 2
          },
          "jsDoc": "UNSTABLE: new API, yet to be vetted.\n\nGiven a current location in a module, lookup the source location and return\nit.\n\nWhen Deno transpiles code, it keep source maps of the transpiled code. This\nfunction can be used to lookup the original location. This is\nautomatically done when accessing the `.stack` of an error, or when an\nuncaught error is logged. This function can be used to perform the lookup\nfor creating better error handling.\n\n**Note:** `line` and `column` are 1 indexed, which matches display\nexpectations, but is not typical of most index numbers in Deno.\n\nAn example:\n\n      const orig = Deno.applySourceMap({\n        location: \"file://my/module.ts\",\n        line: 5,\n        column: 15\n      });\n      console.log(`${orig.filename}:${orig.line}:${orig.column}`);",
          "functionDef": {
            "params": [
              {
                "name": "location",
                "tsType": {
                  "repr": "Location",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeName": "Location"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "Location",
              "kind": "typeRef",
              "typeRef": {
                "typeName": "Location"
              }
            },
            "isAsync": false,
            "isGenerator": false
          }
        },
        {
          "kind": "variable",
          "name": "errors",
          "snippet": "export const errors: {\n    NotFound: ErrorConstructor;\n    PermissionDenied: ErrorConstructor;\n    ConnectionRefused: ErrorConstructor;\n    ConnectionReset: ErrorConstructor;\n    ConnectionAborted: ErrorConstructor;\n    NotConnected: ErrorConstructor;\n    AddrInUse: ErrorConstructor;\n    AddrNotAvailable: ErrorConstructor;\n    BrokenPipe: ErrorConstructor;\n    AlreadyExists: ErrorConstructor;\n    InvalidData: ErrorConstructor;\n    TimedOut: ErrorConstructor;\n    Interrupted: ErrorConstructor;\n    WriteZero: ErrorConstructor;\n    UnexpectedEof: ErrorConstructor;\n    BadResource: ErrorConstructor;\n    Http: ErrorConstructor;\n  };",
          "location": {
            "filename": "./deno.ts",
            "line": 1421,
            "col": 2
          },
          "jsDoc": "A set of error constructors that are raised by Deno APIs.",
          "variableDef": {
            "tsType": {
              "repr": "",
              "kind": "typeLiteral",
              "typeLiteral": {
                "methods": [],
                "properties": [
                  {
                    "name": "NotFound",
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "ErrorConstructor",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "ErrorConstructor"
                      }
                    }
                  },
                  {
                    "name": "PermissionDenied",
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "ErrorConstructor",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "ErrorConstructor"
                      }
                    }
                  },
                  {
                    "name": "ConnectionRefused",
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "ErrorConstructor",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "ErrorConstructor"
                      }
                    }
                  },
                  {
                    "name": "ConnectionReset",
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "ErrorConstructor",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "ErrorConstructor"
                      }
                    }
                  },
                  {
                    "name": "ConnectionAborted",
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "ErrorConstructor",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "ErrorConstructor"
                      }
                    }
                  },
                  {
                    "name": "NotConnected",
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "ErrorConstructor",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "ErrorConstructor"
                      }
                    }
                  },
                  {
                    "name": "AddrInUse",
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "ErrorConstructor",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "ErrorConstructor"
                      }
                    }
                  },
                  {
                    "name": "AddrNotAvailable",
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "ErrorConstructor",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "ErrorConstructor"
                      }
                    }
                  },
                  {
                    "name": "BrokenPipe",
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "ErrorConstructor",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "ErrorConstructor"
                      }
                    }
                  },
                  {
                    "name": "AlreadyExists",
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "ErrorConstructor",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "ErrorConstructor"
                      }
                    }
                  },
                  {
                    "name": "InvalidData",
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "ErrorConstructor",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "ErrorConstructor"
                      }
                    }
                  },
                  {
                    "name": "TimedOut",
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "ErrorConstructor",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "ErrorConstructor"
                      }
                    }
                  },
                  {
                    "name": "Interrupted",
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "ErrorConstructor",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "ErrorConstructor"
                      }
                    }
                  },
                  {
                    "name": "WriteZero",
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "ErrorConstructor",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "ErrorConstructor"
                      }
                    }
                  },
                  {
                    "name": "UnexpectedEof",
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "ErrorConstructor",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "ErrorConstructor"
                      }
                    }
                  },
                  {
                    "name": "BadResource",
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "ErrorConstructor",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "ErrorConstructor"
                      }
                    }
                  },
                  {
                    "name": "Http",
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "ErrorConstructor",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "ErrorConstructor"
                      }
                    }
                  }
                ],
                "callSignatures": []
              }
            },
            "kind": "const"
          }
        },
        {
          "kind": "typeAlias",
          "name": "PermissionName",
          "snippet": "export type PermissionName =\n    | \"run\"\n    | \"read\"\n    | \"write\"\n    | \"net\"\n    | \"env\"\n    | \"plugin\"\n    | \"hrtime\";",
          "location": {
            "filename": "./deno.ts",
            "line": 1446,
            "col": 2
          },
          "jsDoc": "**UNSTABLE**: potentially want names to overlap more with browser.\n\nThe permissions as granted by the caller.\n\nSee: https://w3c.github.io/permissions/#permission-registry"
        },
        {
          "kind": "typeAlias",
          "name": "PermissionState",
          "snippet": "export type PermissionState = \"granted\" | \"denied\" | \"prompt\";",
          "location": {
            "filename": "./deno.ts",
            "line": 1458,
            "col": 2
          },
          "jsDoc": "The current status of the permission.\n\nSee: https://w3c.github.io/permissions/#status-of-a-permission"
        },
        {
          "kind": "class",
          "name": "Permissions",
          "snippet": "export class Permissions {\n    /** Resolves to the current status of a permission.\n     *\n     *       const status = await Deno.permissions.query({ name: \"read\", path: \"/etc\" });\n     *       if (status.state === \"granted\") {\n     *         data = await Deno.readFile(\"/etc/passwd\");\n     *       }\n     */",
          "location": {
            "filename": "./deno.ts",
            "line": 1498,
            "col": 2
          },
          "jsDoc": null,
          "classDef": {
            "isAbstract": false,
            "constructors": [],
            "properties": [],
            "methods": [
              {
                "jsDoc": "Resolves to the current status of a permission.\n\n      const status = await Deno.permissions.query({ name: \"read\", path: \"/etc\" });\n      if (status.state === \"granted\") {\n        data = await Deno.readFile(\"/etc/passwd\");\n      }",
                "snippet": "query(desc: PermissionDescriptor): Promise<PermissionStatus>;",
                "accessibility": null,
                "isAbstract": false,
                "isStatic": false,
                "name": "query",
                "kind": "method",
                "functionDef": {
                  "params": [
                    {
                      "name": "desc",
                      "tsType": {
                        "repr": "PermissionDescriptor",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeName": "PermissionDescriptor"
                        }
                      }
                    }
                  ],
                  "returnType": {
                    "repr": "Promise",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeName": "Promise"
                    }
                  },
                  "isAsync": false,
                  "isGenerator": false
                },
                "location": {
                  "filename": "./deno.ts",
                  "line": 1506,
                  "col": 4
                }
              },
              {
                "jsDoc": "Revokes a permission, and resolves to the state of the permission.\n\n      const status = await Deno.permissions.revoke({ name: \"run\" });\n      assert(status.state !== \"granted\")",
                "snippet": "revoke(desc: PermissionDescriptor): Promise<PermissionStatus>;",
                "accessibility": null,
                "isAbstract": false,
                "isStatic": false,
                "name": "revoke",
                "kind": "method",
                "functionDef": {
                  "params": [
                    {
                      "name": "desc",
                      "tsType": {
                        "repr": "PermissionDescriptor",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeName": "PermissionDescriptor"
                        }
                      }
                    }
                  ],
                  "returnType": {
                    "repr": "Promise",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeName": "Promise"
                    }
                  },
                  "isAsync": false,
                  "isGenerator": false
                },
                "location": {
                  "filename": "./deno.ts",
                  "line": 1513,
                  "col": 4
                }
              },
              {
                "jsDoc": "Requests the permission, and resolves to the state of the permission.\n\n      const status = await Deno.permissions.request({ name: \"env\" });\n      if (status.state === \"granted\") {\n        console.log(Deno.homeDir());\n      } else {\n        console.log(\"'env' permission is denied.\");\n      }",
                "snippet": "request(desc: PermissionDescriptor): Promise<PermissionStatus>;",
                "accessibility": null,
                "isAbstract": false,
                "isStatic": false,
                "name": "request",
                "kind": "method",
                "functionDef": {
                  "params": [
                    {
                      "name": "desc",
                      "tsType": {
                        "repr": "PermissionDescriptor",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeName": "PermissionDescriptor"
                        }
                      }
                    }
                  ],
                  "returnType": {
                    "repr": "Promise",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeName": "Promise"
                    }
                  },
                  "isAsync": false,
                  "isGenerator": false
                },
                "location": {
                  "filename": "./deno.ts",
                  "line": 1524,
                  "col": 4
                }
              }
            ]
          }
        },
        {
          "kind": "variable",
          "name": "permissions",
          "snippet": "export const permissions: Permissions;",
          "location": {
            "filename": "./deno.ts",
            "line": 1528,
            "col": 2
          },
          "jsDoc": "**UNSTABLE**: maybe move to `navigator.permissions` to match web API.",
          "variableDef": {
            "tsType": {
              "repr": "Permissions",
              "kind": "typeRef",
              "typeRef": {
                "typeName": "Permissions"
              }
            },
            "kind": "const"
          }
        },
        {
          "kind": "class",
          "name": "PermissionStatus",
          "snippet": "export class PermissionStatus",
          "location": {
            "filename": "./deno.ts",
            "line": 1531,
            "col": 2
          },
          "jsDoc": "see: https://w3c.github.io/permissions/#permissionstatus",
          "classDef": {
            "isAbstract": false,
            "constructors": [
              {
                "jsDoc": null,
                "snippet": "constructor(state: PermissionState);",
                "accessibility": null,
                "name": "constructor",
                "params": [
                  {
                    "name": "state",
                    "tsType": {
                      "repr": "PermissionState",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "PermissionState"
                      }
                    }
                  }
                ],
                "location": {
                  "filename": "./deno.ts",
                  "line": 1533,
                  "col": 4
                }
              }
            ],
            "properties": [
              {
                "jsDoc": null,
                "snippet": "state: PermissionState;",
                "tsType": {
                  "repr": "PermissionState",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeName": "PermissionState"
                  }
                },
                "readonly": false,
                "accessibility": null,
                "isAbstract": false,
                "isStatic": false,
                "name": "state",
                "location": {
                  "filename": "./deno.ts",
                  "line": 1532,
                  "col": 4
                }
              }
            ],
            "methods": []
          }
        },
        {
          "kind": "function",
          "name": "truncateSync",
          "snippet": "export function truncateSync(name: string, len?: number): void;",
          "location": {
            "filename": "./deno.ts",
            "line": 1544,
            "col": 2
          },
          "jsDoc": "Synchronously truncates or extends the specified file, to reach the\nspecified `len`.\n\n      Deno.truncateSync(\"hello.txt\", 10);\n\nRequires `allow-write` permission.",
          "functionDef": {
            "params": [
              {
                "name": "name",
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "name": "len",
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              }
            ],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false
          }
        },
        {
          "kind": "function",
          "name": "truncate",
          "snippet": "export function truncate(name: string, len?: number): Promise<void>;",
          "location": {
            "filename": "./deno.ts",
            "line": 1551,
            "col": 2
          },
          "jsDoc": "Truncates or extends the specified file, to reach the specified `len`.\n\n      await Deno.truncate(\"hello.txt\", 10);\n\nRequires `allow-write` permission.",
          "functionDef": {
            "params": [
              {
                "name": "name",
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "name": "len",
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              }
            ],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeName": "Promise"
              }
            },
            "isAsync": false,
            "isGenerator": false
          }
        },
        {
          "kind": "interface",
          "name": "AsyncHandler",
          "snippet": "export interface AsyncHandler {\n  (msg: Uint8Array): void;\n}",
          "location": {
            "filename": "./deno.ts",
            "line": 1553,
            "col": 2
          },
          "jsDoc": null,
          "interfaceDef": {
            "methods": [],
            "properties": [],
            "callSignatures": [
              {
                "snippet": "(msg: Uint8Array): void;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 1554,
                  "col": 4
                },
                "jsDoc": null,
                "params": [
                  {
                    "name": "msg",
                    "tsType": {
                      "repr": "Uint8Array",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "Uint8Array"
                      }
                    }
                  }
                ],
                "tsType": {
                  "repr": "void",
                  "kind": "keyword",
                  "keyword": "void"
                }
              }
            ]
          }
        },
        {
          "kind": "interface",
          "name": "PluginOp",
          "snippet": "export interface PluginOp {\n  dispatch(\n    control: Uint8Array,\n    zeroCopy?: ArrayBufferView | null\n  ): Uint8Array | null;\n  setAsyncHandler(handler: AsyncHandler): void;\n}",
          "location": {
            "filename": "./deno.ts",
            "line": 1557,
            "col": 2
          },
          "jsDoc": null,
          "interfaceDef": {
            "methods": [
              {
                "snippet": "dispatch(\n      control: Uint8Array,\n      zeroCopy?: ArrayBufferView | null\n    ): Uint8Array | null;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 1558,
                  "col": 4
                },
                "jsDoc": null,
                "params": [
                  {
                    "name": "control",
                    "tsType": {
                      "repr": "Uint8Array",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "Uint8Array"
                      }
                    }
                  },
                  {
                    "name": "zeroCopy",
                    "tsType": {
                      "repr": "",
                      "kind": "union",
                      "union": [
                        {
                          "repr": "ArrayBufferView",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeName": "ArrayBufferView"
                          }
                        },
                        {
                          "repr": "null",
                          "kind": "keyword",
                          "keyword": "null"
                        }
                      ]
                    }
                  }
                ],
                "returnType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "Uint8Array",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "Uint8Array"
                      }
                    },
                    {
                      "repr": "null",
                      "kind": "keyword",
                      "keyword": "null"
                    }
                  ]
                }
              },
              {
                "snippet": "setAsyncHandler(handler: AsyncHandler): void;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 1562,
                  "col": 4
                },
                "jsDoc": null,
                "params": [
                  {
                    "name": "handler",
                    "tsType": {
                      "repr": "AsyncHandler",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "AsyncHandler"
                      }
                    }
                  }
                ],
                "returnType": {
                  "repr": "void",
                  "kind": "keyword",
                  "keyword": "void"
                }
              }
            ],
            "properties": [],
            "callSignatures": []
          }
        },
        {
          "kind": "interface",
          "name": "Plugin",
          "snippet": "export interface Plugin {\n  ops: {\n    [name: string]: PluginOp;\n  };\n}",
          "location": {
            "filename": "./deno.ts",
            "line": 1565,
            "col": 2
          },
          "jsDoc": null,
          "interfaceDef": {
            "methods": [],
            "properties": [
              {
                "name": "ops",
                "snippet": "ops: {\n      [name: string]: PluginOp;\n    };",
                "location": {
                  "filename": "./deno.ts",
                  "line": 1566,
                  "col": 4
                },
                "jsDoc": null,
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "typeLiteral",
                  "typeLiteral": {
                    "methods": [],
                    "properties": [],
                    "callSignatures": []
                  }
                }
              }
            ],
            "callSignatures": []
          }
        },
        {
          "kind": "function",
          "name": "openPlugin",
          "snippet": "export function openPlugin(filename: string): Plugin;",
          "location": {
            "filename": "./deno.ts",
            "line": 1581,
            "col": 2
          },
          "jsDoc": "**UNSTABLE**: new API, yet to be vetted.\n\nOpen and initalize a plugin.\n\n       const plugin = Deno.openPlugin(\"./path/to/some/plugin.so\");\n       const some_op = plugin.ops.some_op;\n       const response = some_op.dispatch(new Uint8Array([1,2,3,4]));\n       console.log(`Response from plugin ${response}`);\n\nRequires `allow-plugin` permission.",
          "functionDef": {
            "params": [
              {
                "name": "filename",
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              }
            ],
            "returnType": {
              "repr": "Plugin",
              "kind": "typeRef",
              "typeRef": {
                "typeName": "Plugin"
              }
            },
            "isAsync": false,
            "isGenerator": false
          }
        },
        {
          "kind": "typeAlias",
          "name": "Transport",
          "snippet": "export type Transport = \"tcp\" | \"udp\";",
          "location": {
            "filename": "./deno.ts",
            "line": 1583,
            "col": 2
          },
          "jsDoc": null
        },
        {
          "kind": "interface",
          "name": "Addr",
          "snippet": "export interface Addr {\n  transport: Transport;\n  hostname: string;\n  port: number;\n}",
          "location": {
            "filename": "./deno.ts",
            "line": 1585,
            "col": 2
          },
          "jsDoc": null,
          "interfaceDef": {
            "methods": [],
            "properties": [
              {
                "name": "transport",
                "snippet": "transport: Transport;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 1586,
                  "col": 4
                },
                "jsDoc": null,
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "Transport",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeName": "Transport"
                  }
                }
              },
              {
                "name": "hostname",
                "snippet": "hostname: string;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 1587,
                  "col": 4
                },
                "jsDoc": null,
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "name": "port",
                "snippet": "port: number;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 1588,
                  "col": 4
                },
                "jsDoc": null,
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              }
            ],
            "callSignatures": []
          }
        },
        {
          "kind": "interface",
          "name": "UDPAddr",
          "snippet": "export interface UDPAddr {\n  port: number;\n  transport?: Transport;\n  hostname?: string;\n}",
          "location": {
            "filename": "./deno.ts",
            "line": 1591,
            "col": 2
          },
          "jsDoc": null,
          "interfaceDef": {
            "methods": [],
            "properties": [
              {
                "name": "port",
                "snippet": "port: number;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 1592,
                  "col": 4
                },
                "jsDoc": null,
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              },
              {
                "name": "transport",
                "snippet": "transport?: Transport;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 1593,
                  "col": 4
                },
                "jsDoc": null,
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "Transport",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeName": "Transport"
                  }
                }
              },
              {
                "name": "hostname",
                "snippet": "hostname?: string;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 1594,
                  "col": 4
                },
                "jsDoc": null,
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              }
            ],
            "callSignatures": []
          }
        },
        {
          "kind": "enum",
          "name": "ShutdownMode",
          "snippet": "export enum ShutdownMode {\n    Read = 0,\n    Write,\n    ReadWrite // TODO(ry) panics on ReadWrite.\n  }",
          "location": {
            "filename": "./deno.ts",
            "line": 1602,
            "col": 2
          },
          "jsDoc": "**UNSTABLE**: Maybe remove `ShutdownMode` entirely.\n\nCorresponds to `SHUT_RD`, `SHUT_WR`, `SHUT_RDWR` on POSIX-like systems.\n\nSee: http://man7.org/linux/man-pages/man2/shutdown.2.html",
          "enumDef": {
            "members": [
              {
                "name": "Read"
              },
              {
                "name": "Write"
              },
              {
                "name": "ReadWrite"
              }
            ]
          }
        },
        {
          "kind": "function",
          "name": "shutdown",
          "snippet": "export function shutdown(rid: number, how: ShutdownMode): void;",
          "location": {
            "filename": "./deno.ts",
            "line": 1619,
            "col": 2
          },
          "jsDoc": "**UNSTABLE**: Maybe should remove `how` parameter maybe remove\n`ShutdownMode` entirely.\n\nShutdown socket send and receive operations.\n\nMatches behavior of POSIX shutdown(3).\n\n      const listener = Deno.listen({ port: 80 });\n      const conn = await listener.accept();\n      Deno.shutdown(conn.rid, Deno.ShutdownMode.Write);",
          "functionDef": {
            "params": [
              {
                "name": "rid",
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              },
              {
                "name": "how",
                "tsType": {
                  "repr": "ShutdownMode",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeName": "ShutdownMode"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false
          }
        },
        {
          "kind": "function",
          "name": "recvfrom",
          "snippet": "export function recvfrom(rid: number, p: Uint8Array): Promise<[number, Addr]>;",
          "location": {
            "filename": "./deno.ts",
            "line": 1627,
            "col": 2
          },
          "jsDoc": "**UNSTABLE**: new API, yet to be vetted.\n\nWaits for the next message to the passed `rid` and writes it on the passed\n`Uint8Array`.\n\nResolves to the number of bytes written and the remote address.",
          "functionDef": {
            "params": [
              {
                "name": "rid",
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              },
              {
                "name": "p",
                "tsType": {
                  "repr": "Uint8Array",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeName": "Uint8Array"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeName": "Promise"
              }
            },
            "isAsync": false,
            "isGenerator": false
          }
        },
        {
          "kind": "interface",
          "name": "UDPConn",
          "snippet": "export interface UDPConn extends AsyncIterable<[Uint8Array, Addr]> {\n  /** **UNSTABLE**: new API, yet to be vetted.\n   *\n   * Waits for and resolves to the next message to the `UDPConn`. */\n  receive(p?: Uint8Array): Promise<[Uint8Array, Addr]>;\n  /** UNSTABLE: new API, yet to be vetted.\n   *\n   * Sends a message to the target. */\n  send(p: Uint8Array, addr: UDPAddr): Promise<void>;\n  /** UNSTABLE: new API, yet to be vetted.\n   *\n   * Close closes the socket. Any pending message promises will be rejected\n   * with errors. */\n  close(): void;\n  /** Return the address of the `UDPConn`. */\n  readonly addr: Addr;\n  [Symbol.asyncIterator](): AsyncIterator<[Uint8Array, Addr]>;\n}",
          "location": {
            "filename": "./deno.ts",
            "line": 1632,
            "col": 2
          },
          "jsDoc": "**UNSTABLE**: new API, yet to be vetted.\n\nA generic transport listener for message-oriented protocols.",
          "interfaceDef": {
            "methods": [
              {
                "snippet": "receive(p?: Uint8Array): Promise<[Uint8Array, Addr]>;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 1636,
                  "col": 4
                },
                "jsDoc": "**UNSTABLE**: new API, yet to be vetted.\n\nWaits for and resolves to the next message to the `UDPConn`.",
                "params": [
                  {
                    "name": "p",
                    "tsType": {
                      "repr": "Uint8Array",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "Uint8Array"
                      }
                    }
                  }
                ],
                "returnType": {
                  "repr": "Promise",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeName": "Promise"
                  }
                }
              },
              {
                "snippet": "send(p: Uint8Array, addr: UDPAddr): Promise<void>;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 1640,
                  "col": 4
                },
                "jsDoc": "UNSTABLE: new API, yet to be vetted.\n\nSends a message to the target.",
                "params": [
                  {
                    "name": "p",
                    "tsType": {
                      "repr": "Uint8Array",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "Uint8Array"
                      }
                    }
                  },
                  {
                    "name": "addr",
                    "tsType": {
                      "repr": "UDPAddr",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "UDPAddr"
                      }
                    }
                  }
                ],
                "returnType": {
                  "repr": "Promise",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeName": "Promise"
                  }
                }
              },
              {
                "snippet": "close(): void;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 1645,
                  "col": 4
                },
                "jsDoc": "UNSTABLE: new API, yet to be vetted.\n\nClose closes the socket. Any pending message promises will be rejected\nwith errors.",
                "params": [],
                "returnType": {
                  "repr": "void",
                  "kind": "keyword",
                  "keyword": "void"
                }
              },
              {
                "snippet": "[Symbol.asyncIterator](): AsyncIterator<[Uint8Array, Addr]>;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 1648,
                  "col": 4
                },
                "jsDoc": null,
                "params": [],
                "returnType": {
                  "repr": "AsyncIterator",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeName": "AsyncIterator"
                  }
                }
              }
            ],
            "properties": [
              {
                "name": "addr",
                "snippet": "readonly addr: Addr;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 1647,
                  "col": 4
                },
                "jsDoc": "Return the address of the `UDPConn`.",
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "Addr",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeName": "Addr"
                  }
                }
              }
            ],
            "callSignatures": []
          }
        },
        {
          "kind": "interface",
          "name": "Listener",
          "snippet": "export interface Listener extends AsyncIterable<Conn> {\n  /** Waits for and resolves to the next connection to the `Listener`. */\n  accept(): Promise<Conn>;\n  /** Close closes the listener. Any pending accept promises will be rejected\n   * with errors. */\n  close(): void;\n  /** Return the address of the `Listener`. */\n  readonly addr: Addr;\n  [Symbol.asyncIterator](): AsyncIterator<Conn>;\n}",
          "location": {
            "filename": "./deno.ts",
            "line": 1652,
            "col": 2
          },
          "jsDoc": "A generic network listener for stream-oriented protocols.",
          "interfaceDef": {
            "methods": [
              {
                "snippet": "accept(): Promise<Conn>;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 1654,
                  "col": 4
                },
                "jsDoc": "Waits for and resolves to the next connection to the `Listener`.",
                "params": [],
                "returnType": {
                  "repr": "Promise",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeName": "Promise"
                  }
                }
              },
              {
                "snippet": "close(): void;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 1657,
                  "col": 4
                },
                "jsDoc": "Close closes the listener. Any pending accept promises will be rejected\nwith errors.",
                "params": [],
                "returnType": {
                  "repr": "void",
                  "kind": "keyword",
                  "keyword": "void"
                }
              },
              {
                "snippet": "[Symbol.asyncIterator](): AsyncIterator<Conn>;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 1660,
                  "col": 4
                },
                "jsDoc": null,
                "params": [],
                "returnType": {
                  "repr": "AsyncIterator",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeName": "AsyncIterator"
                  }
                }
              }
            ],
            "properties": [
              {
                "name": "addr",
                "snippet": "readonly addr: Addr;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 1659,
                  "col": 4
                },
                "jsDoc": "Return the address of the `Listener`.",
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "Addr",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeName": "Addr"
                  }
                }
              }
            ],
            "callSignatures": []
          }
        },
        {
          "kind": "interface",
          "name": "Conn",
          "snippet": "export interface Conn extends Reader, Writer, Closer {\n  /** The local address of the connection. */\n  readonly localAddr: Addr;\n  /** The remote address of the connection. */\n  readonly remoteAddr: Addr;\n  /** The resource ID of the connection. */\n  readonly rid: number;\n  /** Shuts down (`shutdown(2)`) the reading side of the TCP connection. Most\n   * callers should just use `close()`. */\n  closeRead(): void;\n  /** Shuts down (`shutdown(2)`) the writing side of the TCP connection. Most\n   * callers should just use `close()`. */\n  closeWrite(): void;\n}",
          "location": {
            "filename": "./deno.ts",
            "line": 1663,
            "col": 2
          },
          "jsDoc": null,
          "interfaceDef": {
            "methods": [
              {
                "snippet": "closeRead(): void;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 1672,
                  "col": 4
                },
                "jsDoc": "Shuts down (`shutdown(2)`) the reading side of the TCP connection. Most\ncallers should just use `close()`.",
                "params": [],
                "returnType": {
                  "repr": "void",
                  "kind": "keyword",
                  "keyword": "void"
                }
              },
              {
                "snippet": "closeWrite(): void;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 1675,
                  "col": 4
                },
                "jsDoc": "Shuts down (`shutdown(2)`) the writing side of the TCP connection. Most\ncallers should just use `close()`.",
                "params": [],
                "returnType": {
                  "repr": "void",
                  "kind": "keyword",
                  "keyword": "void"
                }
              }
            ],
            "properties": [
              {
                "name": "localAddr",
                "snippet": "readonly localAddr: Addr;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 1665,
                  "col": 4
                },
                "jsDoc": "The local address of the connection.",
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "Addr",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeName": "Addr"
                  }
                }
              },
              {
                "name": "remoteAddr",
                "snippet": "readonly remoteAddr: Addr;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 1667,
                  "col": 4
                },
                "jsDoc": "The remote address of the connection.",
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "Addr",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeName": "Addr"
                  }
                }
              },
              {
                "name": "rid",
                "snippet": "readonly rid: number;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 1669,
                  "col": 4
                },
                "jsDoc": "The resource ID of the connection.",
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              }
            ],
            "callSignatures": []
          }
        },
        {
          "kind": "interface",
          "name": "ListenOptions",
          "snippet": "export interface ListenOptions {\n  /** The port to listen on. */\n  port: number;\n  /** A literal IP address or host name that can be resolved to an IP address.\n   * If not specified, defaults to `0.0.0.0`. */\n  hostname?: string;\n  /** Either `\"tcp\"` or `\"udp\"`. Defaults to `\"tcp\"`.\n   *\n   * In the future: `\"tcp4\"`, `\"tcp6\"`, `\"udp4\"`, `\"udp6\"`, `\"ip\"`, `\"ip4\"`,\n   * `\"ip6\"`, `\"unix\"`, `\"unixgram\"`, and `\"unixpacket\"`. */\n  transport?: Transport;\n}",
          "location": {
            "filename": "./deno.ts",
            "line": 1678,
            "col": 2
          },
          "jsDoc": null,
          "interfaceDef": {
            "methods": [],
            "properties": [
              {
                "name": "port",
                "snippet": "port: number;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 1680,
                  "col": 4
                },
                "jsDoc": "The port to listen on.",
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              },
              {
                "name": "hostname",
                "snippet": "hostname?: string;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 1683,
                  "col": 4
                },
                "jsDoc": "A literal IP address or host name that can be resolved to an IP address.\nIf not specified, defaults to `0.0.0.0`.",
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "name": "transport",
                "snippet": "transport?: Transport;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 1688,
                  "col": 4
                },
                "jsDoc": "Either `\"tcp\"` or `\"udp\"`. Defaults to `\"tcp\"`.\n\nIn the future: `\"tcp4\"`, `\"tcp6\"`, `\"udp4\"`, `\"udp6\"`, `\"ip\"`, `\"ip4\"`,\n`\"ip6\"`, `\"unix\"`, `\"unixgram\"`, and `\"unixpacket\"`.",
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "Transport",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeName": "Transport"
                  }
                }
              }
            ],
            "callSignatures": []
          }
        },
        {
          "kind": "function",
          "name": "listen",
          "snippet": "export function listen(\n    options: ListenOptions & { transport?: \"tcp\" }\n  ): Listener;",
          "location": {
            "filename": "./deno.ts",
            "line": 1701,
            "col": 2
          },
          "jsDoc": "**UNSTABLE**: new API\n\nListen announces on the local transport address.\n\n     Deno.listen({ port: 80 })\n     Deno.listen({ hostname: \"192.0.2.1\", port: 80 })\n     Deno.listen({ hostname: \"[2001:db8::1]\", port: 80 });\n     Deno.listen({ hostname: \"golang.org\", port: 80, transport: \"tcp\" });\n\nRequires `allow-net` permission.",
          "functionDef": {
            "params": [
              {
                "name": "options",
                "tsType": {
                  "repr": "",
                  "kind": "intersection",
                  "intersection": [
                    {
                      "repr": "ListenOptions",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "ListenOptions"
                      }
                    },
                    {
                      "repr": "",
                      "kind": "typeLiteral",
                      "typeLiteral": {
                        "methods": [],
                        "properties": [
                          {
                            "name": "transport",
                            "params": [],
                            "computed": false,
                            "optional": true,
                            "tsType": {
                              "repr": "tcp",
                              "kind": "literal",
                              "literal": {
                                "str": "tcp"
                              }
                            }
                          }
                        ],
                        "callSignatures": []
                      }
                    }
                  ]
                }
              }
            ],
            "returnType": {
              "repr": "Listener",
              "kind": "typeRef",
              "typeRef": {
                "typeName": "Listener"
              }
            },
            "isAsync": false,
            "isGenerator": false
          }
        },
        {
          "kind": "function",
          "name": "listen",
          "snippet": "export function listen(\n    options: ListenOptions & { transport: \"udp\" }\n  ): UDPConn;",
          "location": {
            "filename": "./deno.ts",
            "line": 1714,
            "col": 2
          },
          "jsDoc": "**UNSTABLE**: new API\n\nListen announces on the local transport address.\n\n     Deno.listen({ port: 80 })\n     Deno.listen({ hostname: \"192.0.2.1\", port: 80 })\n     Deno.listen({ hostname: \"[2001:db8::1]\", port: 80 });\n     Deno.listen({ hostname: \"golang.org\", port: 80, transport: \"tcp\" });\n\nRequires `allow-net` permission.",
          "functionDef": {
            "params": [
              {
                "name": "options",
                "tsType": {
                  "repr": "",
                  "kind": "intersection",
                  "intersection": [
                    {
                      "repr": "ListenOptions",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "ListenOptions"
                      }
                    },
                    {
                      "repr": "",
                      "kind": "typeLiteral",
                      "typeLiteral": {
                        "methods": [],
                        "properties": [
                          {
                            "name": "transport",
                            "params": [],
                            "computed": false,
                            "optional": false,
                            "tsType": {
                              "repr": "udp",
                              "kind": "literal",
                              "literal": {
                                "str": "udp"
                              }
                            }
                          }
                        ],
                        "callSignatures": []
                      }
                    }
                  ]
                }
              }
            ],
            "returnType": {
              "repr": "UDPConn",
              "kind": "typeRef",
              "typeRef": {
                "typeName": "UDPConn"
              }
            },
            "isAsync": false,
            "isGenerator": false
          }
        },
        {
          "kind": "function",
          "name": "listen",
          "snippet": "export function listen(options: ListenOptions): Listener | UDPConn;",
          "location": {
            "filename": "./deno.ts",
            "line": 1727,
            "col": 2
          },
          "jsDoc": "**UNSTABLE**: new API\n\nListen announces on the local transport address.\n\n     Deno.listen({ port: 80 })\n     Deno.listen({ hostname: \"192.0.2.1\", port: 80 })\n     Deno.listen({ hostname: \"[2001:db8::1]\", port: 80 });\n     Deno.listen({ hostname: \"golang.org\", port: 80, transport: \"tcp\" });\n\nRequires `allow-net` permission.",
          "functionDef": {
            "params": [
              {
                "name": "options",
                "tsType": {
                  "repr": "ListenOptions",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeName": "ListenOptions"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "Listener",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeName": "Listener"
                  }
                },
                {
                  "repr": "UDPConn",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeName": "UDPConn"
                  }
                }
              ]
            },
            "isAsync": false,
            "isGenerator": false
          }
        },
        {
          "kind": "interface",
          "name": "ListenTLSOptions",
          "snippet": "export interface ListenTLSOptions extends ListenOptions {\n  /** Server certificate file. */\n  certFile: string;\n  /** Server public key file. */\n  keyFile: string;\n}",
          "location": {
            "filename": "./deno.ts",
            "line": 1729,
            "col": 2
          },
          "jsDoc": null,
          "interfaceDef": {
            "methods": [],
            "properties": [
              {
                "name": "certFile",
                "snippet": "certFile: string;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 1731,
                  "col": 4
                },
                "jsDoc": "Server certificate file.",
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "name": "keyFile",
                "snippet": "keyFile: string;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 1733,
                  "col": 4
                },
                "jsDoc": "Server public key file.",
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              }
            ],
            "callSignatures": []
          }
        },
        {
          "kind": "function",
          "name": "listenTLS",
          "snippet": "export function listenTLS(options: ListenTLSOptions): Listener;",
          "location": {
            "filename": "./deno.ts",
            "line": 1742,
            "col": 2
          },
          "jsDoc": "Listen announces on the local transport address over TLS (transport layer\nsecurity).\n\n     Deno.listenTLS({ port: 443, certFile: \"./my_server.crt\", keyFile: \"./my_server.key\" });\n\nRequires `allow-net` permission.",
          "functionDef": {
            "params": [
              {
                "name": "options",
                "tsType": {
                  "repr": "ListenTLSOptions",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeName": "ListenTLSOptions"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "Listener",
              "kind": "typeRef",
              "typeRef": {
                "typeName": "Listener"
              }
            },
            "isAsync": false,
            "isGenerator": false
          }
        },
        {
          "kind": "interface",
          "name": "ConnectOptions",
          "snippet": "export interface ConnectOptions {\n  /** The port to connect to. */\n  port: number;\n  /** A literal IP address or host name that can be resolved to an IP address.\n   * If not specified, defaults to `127.0.0.1`. */\n  hostname?: string;\n  /** Either `\"tcp\"` or `\"udp\"`. Defaults to `\"tcp\"`.\n   *\n   * In the future: `\"tcp4\"`, `\"tcp6\"`, `\"udp4\"`, `\"udp6\"`, `\"ip\"`, `\"ip4\"`,\n   * `\"ip6\"`, `\"unix\"`, `\"unixgram\"`, and `\"unixpacket\"`. */\n  transport?: Transport;\n}",
          "location": {
            "filename": "./deno.ts",
            "line": 1744,
            "col": 2
          },
          "jsDoc": null,
          "interfaceDef": {
            "methods": [],
            "properties": [
              {
                "name": "port",
                "snippet": "port: number;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 1746,
                  "col": 4
                },
                "jsDoc": "The port to connect to.",
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              },
              {
                "name": "hostname",
                "snippet": "hostname?: string;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 1749,
                  "col": 4
                },
                "jsDoc": "A literal IP address or host name that can be resolved to an IP address.\nIf not specified, defaults to `127.0.0.1`.",
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "name": "transport",
                "snippet": "transport?: Transport;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 1754,
                  "col": 4
                },
                "jsDoc": "Either `\"tcp\"` or `\"udp\"`. Defaults to `\"tcp\"`.\n\nIn the future: `\"tcp4\"`, `\"tcp6\"`, `\"udp4\"`, `\"udp6\"`, `\"ip\"`, `\"ip4\"`,\n`\"ip6\"`, `\"unix\"`, `\"unixgram\"`, and `\"unixpacket\"`.",
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "Transport",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeName": "Transport"
                  }
                }
              }
            ],
            "callSignatures": []
          }
        },
        {
          "kind": "function",
          "name": "connect",
          "snippet": "export function connect(options: ConnectOptions): Promise<Conn>;",
          "location": {
            "filename": "./deno.ts",
            "line": 1766,
            "col": 2
          },
          "jsDoc": "Connects to the address on the named transport.\n\n    Deno.connect({ port: 80 })\n    Deno.connect({ hostname: \"192.0.2.1\", port: 80 })\n    Deno.connect({ hostname: \"[2001:db8::1]\", port: 80 });\n    Deno.connect({ hostname: \"golang.org\", port: 80, transport: \"tcp\" })\n\nRequires `allow-net` permission.",
          "functionDef": {
            "params": [
              {
                "name": "options",
                "tsType": {
                  "repr": "ConnectOptions",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeName": "ConnectOptions"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeName": "Promise"
              }
            },
            "isAsync": false,
            "isGenerator": false
          }
        },
        {
          "kind": "interface",
          "name": "ConnectTLSOptions",
          "snippet": "export interface ConnectTLSOptions {\n  /** The port to connect to. */\n  port: number;\n  /** A literal IP address or host name that can be resolved to an IP address.\n   * If not specified, defaults to `127.0.0.1`. */\n  hostname?: string;\n  /** Server certificate file. */\n  certFile?: string;\n}",
          "location": {
            "filename": "./deno.ts",
            "line": 1768,
            "col": 2
          },
          "jsDoc": null,
          "interfaceDef": {
            "methods": [],
            "properties": [
              {
                "name": "port",
                "snippet": "port: number;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 1770,
                  "col": 4
                },
                "jsDoc": "The port to connect to.",
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              },
              {
                "name": "hostname",
                "snippet": "hostname?: string;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 1773,
                  "col": 4
                },
                "jsDoc": "A literal IP address or host name that can be resolved to an IP address.\nIf not specified, defaults to `127.0.0.1`.",
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "name": "certFile",
                "snippet": "certFile?: string;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 1775,
                  "col": 4
                },
                "jsDoc": "Server certificate file.",
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              }
            ],
            "callSignatures": []
          }
        },
        {
          "kind": "function",
          "name": "connectTLS",
          "snippet": "export function connectTLS(options: ConnectTLSOptions): Promise<Conn>;",
          "location": {
            "filename": "./deno.ts",
            "line": 1781,
            "col": 2
          },
          "jsDoc": "Establishes a secure connection over TLS (transport layer security).\n\nRequires `allow-net` permission.",
          "functionDef": {
            "params": [
              {
                "name": "options",
                "tsType": {
                  "repr": "ConnectTLSOptions",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeName": "ConnectTLSOptions"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeName": "Promise"
              }
            },
            "isAsync": false,
            "isGenerator": false
          }
        },
        {
          "kind": "interface",
          "name": "Metrics",
          "snippet": "export interface Metrics {\n  opsDispatched: number;\n  opsDispatchedSync: number;\n  opsDispatchedAsync: number;\n  opsDispatchedAsyncUnref: number;\n  opsCompleted: number;\n  opsCompletedSync: number;\n  opsCompletedAsync: number;\n  opsCompletedAsyncUnref: number;\n  bytesSentControl: number;\n  bytesSentData: number;\n  bytesReceived: number;\n}",
          "location": {
            "filename": "./deno.ts",
            "line": 1784,
            "col": 2
          },
          "jsDoc": "**UNSTABLE**: not sure if broken or not",
          "interfaceDef": {
            "methods": [],
            "properties": [
              {
                "name": "opsDispatched",
                "snippet": "opsDispatched: number;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 1785,
                  "col": 4
                },
                "jsDoc": null,
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              },
              {
                "name": "opsDispatchedSync",
                "snippet": "opsDispatchedSync: number;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 1786,
                  "col": 4
                },
                "jsDoc": null,
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              },
              {
                "name": "opsDispatchedAsync",
                "snippet": "opsDispatchedAsync: number;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 1787,
                  "col": 4
                },
                "jsDoc": null,
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              },
              {
                "name": "opsDispatchedAsyncUnref",
                "snippet": "opsDispatchedAsyncUnref: number;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 1788,
                  "col": 4
                },
                "jsDoc": null,
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              },
              {
                "name": "opsCompleted",
                "snippet": "opsCompleted: number;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 1789,
                  "col": 4
                },
                "jsDoc": null,
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              },
              {
                "name": "opsCompletedSync",
                "snippet": "opsCompletedSync: number;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 1790,
                  "col": 4
                },
                "jsDoc": null,
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              },
              {
                "name": "opsCompletedAsync",
                "snippet": "opsCompletedAsync: number;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 1791,
                  "col": 4
                },
                "jsDoc": null,
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              },
              {
                "name": "opsCompletedAsyncUnref",
                "snippet": "opsCompletedAsyncUnref: number;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 1792,
                  "col": 4
                },
                "jsDoc": null,
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              },
              {
                "name": "bytesSentControl",
                "snippet": "bytesSentControl: number;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 1793,
                  "col": 4
                },
                "jsDoc": null,
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              },
              {
                "name": "bytesSentData",
                "snippet": "bytesSentData: number;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 1794,
                  "col": 4
                },
                "jsDoc": null,
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              },
              {
                "name": "bytesReceived",
                "snippet": "bytesReceived: number;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 1795,
                  "col": 4
                },
                "jsDoc": null,
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              }
            ],
            "callSignatures": []
          }
        },
        {
          "kind": "function",
          "name": "metrics",
          "snippet": "export function metrics(): Metrics;",
          "location": {
            "filename": "./deno.ts",
            "line": 1819,
            "col": 2
          },
          "jsDoc": "**UNSTABLE**: potentially broken.\n\nReceive metrics from the privileged side of Deno.\n\n     > console.table(Deno.metrics())\n     ┌─────────────────────────┬────────┐\n     │         (index)         │ Values │\n     ├─────────────────────────┼────────┤\n     │      opsDispatched      │   3    │\n     │    opsDispatchedSync    │   2    │\n     │   opsDispatchedAsync    │   1    │\n     │ opsDispatchedAsyncUnref │   0    │\n     │      opsCompleted       │   3    │\n     │    opsCompletedSync     │   2    │\n     │    opsCompletedAsync    │   1    │\n     │ opsCompletedAsyncUnref  │   0    │\n     │    bytesSentControl     │   73   │\n     │      bytesSentData      │   0    │\n     │      bytesReceived      │  375   │\n     └─────────────────────────┴────────┘",
          "functionDef": {
            "params": [],
            "returnType": {
              "repr": "Metrics",
              "kind": "typeRef",
              "typeRef": {
                "typeName": "Metrics"
              }
            },
            "isAsync": false,
            "isGenerator": false
          }
        },
        {
          "kind": "function",
          "name": "resources",
          "snippet": "export function resources(): ResourceMap;",
          "location": {
            "filename": "./deno.ts",
            "line": 1830,
            "col": 2
          },
          "jsDoc": "**UNSTABLE**: reconsider return type.\n\nReturns a map of open _file like_ resource ids along with their string\nrepresentations.",
          "functionDef": {
            "params": [],
            "returnType": {
              "repr": "ResourceMap",
              "kind": "typeRef",
              "typeRef": {
                "typeName": "ResourceMap"
              }
            },
            "isAsync": false,
            "isGenerator": false
          }
        },
        {
          "kind": "interface",
          "name": "FsEvent",
          "snippet": "export interface FsEvent {\n  kind: \"any\" | \"access\" | \"create\" | \"modify\" | \"remove\";\n  paths: string[];\n}",
          "location": {
            "filename": "./deno.ts",
            "line": 1833,
            "col": 2
          },
          "jsDoc": "**UNSTABLE**: new API. Needs docs.",
          "interfaceDef": {
            "methods": [],
            "properties": [
              {
                "name": "kind",
                "snippet": "kind: \"any\" | \"access\" | \"create\" | \"modify\" | \"remove\";",
                "location": {
                  "filename": "./deno.ts",
                  "line": 1834,
                  "col": 4
                },
                "jsDoc": null,
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "any",
                      "kind": "literal",
                      "literal": {
                        "str": "any"
                      }
                    },
                    {
                      "repr": "access",
                      "kind": "literal",
                      "literal": {
                        "str": "access"
                      }
                    },
                    {
                      "repr": "create",
                      "kind": "literal",
                      "literal": {
                        "str": "create"
                      }
                    },
                    {
                      "repr": "modify",
                      "kind": "literal",
                      "literal": {
                        "str": "modify"
                      }
                    },
                    {
                      "repr": "remove",
                      "kind": "literal",
                      "literal": {
                        "str": "remove"
                      }
                    }
                  ]
                }
              },
              {
                "name": "paths",
                "snippet": "paths: string[];",
                "location": {
                  "filename": "./deno.ts",
                  "line": 1835,
                  "col": 4
                },
                "jsDoc": null,
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "array",
                  "array": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                }
              }
            ],
            "callSignatures": []
          }
        },
        {
          "kind": "function",
          "name": "fsEvents",
          "snippet": "export function fsEvents(\n    paths: string | string[],\n    options?: { recursive: boolean }\n  ): AsyncIterableIterator<FsEvent>;",
          "location": {
            "filename": "./deno.ts",
            "line": 1841,
            "col": 2
          },
          "jsDoc": "**UNSTABLE**: new API. Needs docs.\n\nRecursive option is `true` by default.",
          "functionDef": {
            "params": [
              {
                "name": "paths",
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    {
                      "repr": "",
                      "kind": "array",
                      "array": {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      }
                    }
                  ]
                }
              },
              {
                "name": "options",
                "tsType": {
                  "repr": "",
                  "kind": "typeLiteral",
                  "typeLiteral": {
                    "methods": [],
                    "properties": [
                      {
                        "name": "recursive",
                        "params": [],
                        "computed": false,
                        "optional": false,
                        "tsType": {
                          "repr": "boolean",
                          "kind": "keyword",
                          "keyword": "boolean"
                        }
                      }
                    ],
                    "callSignatures": []
                  }
                }
              }
            ],
            "returnType": {
              "repr": "AsyncIterableIterator",
              "kind": "typeRef",
              "typeRef": {
                "typeName": "AsyncIterableIterator"
              }
            },
            "isAsync": false,
            "isGenerator": false
          }
        },
        {
          "kind": "function",
          "name": "kill",
          "snippet": "export function kill(pid: number, signo: number): void;",
          "location": {
            "filename": "./deno.ts",
            "line": 1869,
            "col": 2
          },
          "jsDoc": "**UNSTABLE**: the `signo` argument maybe shouldn't be number. Should throw\non Windows instead of silently succeeding.\n\nSend a signal to process under given `pid`. Linux/Mac OS only currently.\n\nIf `pid` is negative, the signal will be sent to the process group\nidentified by `pid`.\n\nCurrently no-op on Windows.\n\nRequires `allow-run` permission.",
          "functionDef": {
            "params": [
              {
                "name": "pid",
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              },
              {
                "name": "signo",
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              }
            ],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false
          }
        },
        {
          "kind": "class",
          "name": "Process",
          "snippet": "export class Process",
          "location": {
            "filename": "./deno.ts",
            "line": 1873,
            "col": 2
          },
          "jsDoc": "**UNSTABLE**: There are some issues to work out with respect to when and\nhow the process should be closed.",
          "classDef": {
            "isAbstract": false,
            "constructors": [],
            "properties": [
              {
                "jsDoc": null,
                "snippet": "readonly rid: number;",
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                "readonly": true,
                "accessibility": null,
                "isAbstract": false,
                "isStatic": false,
                "name": "rid",
                "location": {
                  "filename": "./deno.ts",
                  "line": 1874,
                  "col": 4
                }
              },
              {
                "jsDoc": null,
                "snippet": "readonly pid: number;",
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                "readonly": true,
                "accessibility": null,
                "isAbstract": false,
                "isStatic": false,
                "name": "pid",
                "location": {
                  "filename": "./deno.ts",
                  "line": 1875,
                  "col": 4
                }
              },
              {
                "jsDoc": null,
                "snippet": "readonly stdin?: WriteCloser;",
                "tsType": {
                  "repr": "WriteCloser",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeName": "WriteCloser"
                  }
                },
                "readonly": true,
                "accessibility": null,
                "isAbstract": false,
                "isStatic": false,
                "name": "stdin",
                "location": {
                  "filename": "./deno.ts",
                  "line": 1876,
                  "col": 4
                }
              },
              {
                "jsDoc": null,
                "snippet": "readonly stdout?: ReadCloser;",
                "tsType": {
                  "repr": "ReadCloser",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeName": "ReadCloser"
                  }
                },
                "readonly": true,
                "accessibility": null,
                "isAbstract": false,
                "isStatic": false,
                "name": "stdout",
                "location": {
                  "filename": "./deno.ts",
                  "line": 1877,
                  "col": 4
                }
              },
              {
                "jsDoc": null,
                "snippet": "readonly stderr?: ReadCloser;",
                "tsType": {
                  "repr": "ReadCloser",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeName": "ReadCloser"
                  }
                },
                "readonly": true,
                "accessibility": null,
                "isAbstract": false,
                "isStatic": false,
                "name": "stderr",
                "location": {
                  "filename": "./deno.ts",
                  "line": 1878,
                  "col": 4
                }
              }
            ],
            "methods": [
              {
                "jsDoc": "Resolves to the current status of the process.",
                "snippet": "status(): Promise<ProcessStatus>;",
                "accessibility": null,
                "isAbstract": false,
                "isStatic": false,
                "name": "status",
                "kind": "method",
                "functionDef": {
                  "params": [],
                  "returnType": {
                    "repr": "Promise",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeName": "Promise"
                    }
                  },
                  "isAsync": false,
                  "isGenerator": false
                },
                "location": {
                  "filename": "./deno.ts",
                  "line": 1880,
                  "col": 4
                }
              },
              {
                "jsDoc": "Buffer the stdout and return it as `Uint8Array` after `Deno.EOF`.\n\nYou must set stdout to `\"piped\"` when creating the process.\n\nThis calls `close()` on stdout after its done.",
                "snippet": "output(): Promise<Uint8Array>;",
                "accessibility": null,
                "isAbstract": false,
                "isStatic": false,
                "name": "output",
                "kind": "method",
                "functionDef": {
                  "params": [],
                  "returnType": {
                    "repr": "Promise",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeName": "Promise"
                    }
                  },
                  "isAsync": false,
                  "isGenerator": false
                },
                "location": {
                  "filename": "./deno.ts",
                  "line": 1886,
                  "col": 4
                }
              },
              {
                "jsDoc": "Buffer the stderr and return it as `Uint8Array` after `Deno.EOF`.\n\nYou must set stderr to `\"piped\"` when creating the process.\n\nThis calls `close()` on stderr after its done.",
                "snippet": "stderrOutput(): Promise<Uint8Array>;",
                "accessibility": null,
                "isAbstract": false,
                "isStatic": false,
                "name": "stderrOutput",
                "kind": "method",
                "functionDef": {
                  "params": [],
                  "returnType": {
                    "repr": "Promise",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeName": "Promise"
                    }
                  },
                  "isAsync": false,
                  "isGenerator": false
                },
                "location": {
                  "filename": "./deno.ts",
                  "line": 1892,
                  "col": 4
                }
              },
              {
                "jsDoc": null,
                "snippet": "close(): void;",
                "accessibility": null,
                "isAbstract": false,
                "isStatic": false,
                "name": "close",
                "kind": "method",
                "functionDef": {
                  "params": [],
                  "returnType": {
                    "repr": "void",
                    "kind": "keyword",
                    "keyword": "void"
                  },
                  "isAsync": false,
                  "isGenerator": false
                },
                "location": {
                  "filename": "./deno.ts",
                  "line": 1893,
                  "col": 4
                }
              },
              {
                "jsDoc": null,
                "snippet": "kill(signo: number): void;",
                "accessibility": null,
                "isAbstract": false,
                "isStatic": false,
                "name": "kill",
                "kind": "method",
                "functionDef": {
                  "params": [
                    {
                      "name": "signo",
                      "tsType": {
                        "repr": "number",
                        "kind": "keyword",
                        "keyword": "number"
                      }
                    }
                  ],
                  "returnType": {
                    "repr": "void",
                    "kind": "keyword",
                    "keyword": "void"
                  },
                  "isAsync": false,
                  "isGenerator": false
                },
                "location": {
                  "filename": "./deno.ts",
                  "line": 1894,
                  "col": 4
                }
              }
            ]
          }
        },
        {
          "kind": "interface",
          "name": "ProcessStatus",
          "snippet": "export interface ProcessStatus {\n  success: boolean;\n  code?: number;\n  signal?: number;\n}",
          "location": {
            "filename": "./deno.ts",
            "line": 1897,
            "col": 2
          },
          "jsDoc": null,
          "interfaceDef": {
            "methods": [],
            "properties": [
              {
                "name": "success",
                "snippet": "success: boolean;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 1898,
                  "col": 4
                },
                "jsDoc": null,
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                }
              },
              {
                "name": "code",
                "snippet": "code?: number;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 1899,
                  "col": 4
                },
                "jsDoc": null,
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              },
              {
                "name": "signal",
                "snippet": "signal?: number;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 1900,
                  "col": 4
                },
                "jsDoc": null,
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              }
            ],
            "callSignatures": []
          }
        },
        {
          "kind": "interface",
          "name": "RunOptions",
          "snippet": "export interface RunOptions {\n  /** Arguments to pass. Note, the first element needs to be a path to the\n   * binary */\n  args: string[];\n  cwd?: string;\n  env?: {\n    [key: string]: string;\n  };\n  stdout?: ProcessStdio | number;\n  stderr?: ProcessStdio | number;\n  stdin?: ProcessStdio | number;\n}",
          "location": {
            "filename": "./deno.ts",
            "line": 1905,
            "col": 2
          },
          "jsDoc": "**UNSTABLE**:  Maybe rename `args` to `argv` to differentiate from\n`Deno.args`.",
          "interfaceDef": {
            "methods": [],
            "properties": [
              {
                "name": "args",
                "snippet": "args: string[];",
                "location": {
                  "filename": "./deno.ts",
                  "line": 1908,
                  "col": 4
                },
                "jsDoc": "Arguments to pass. Note, the first element needs to be a path to the\nbinary",
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "array",
                  "array": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                }
              },
              {
                "name": "cwd",
                "snippet": "cwd?: string;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 1909,
                  "col": 4
                },
                "jsDoc": null,
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "name": "env",
                "snippet": "env?: {\n      [key: string]: string;\n    };",
                "location": {
                  "filename": "./deno.ts",
                  "line": 1910,
                  "col": 4
                },
                "jsDoc": null,
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "typeLiteral",
                  "typeLiteral": {
                    "methods": [],
                    "properties": [],
                    "callSignatures": []
                  }
                }
              },
              {
                "name": "stdout",
                "snippet": "stdout?: ProcessStdio | number;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 1913,
                  "col": 4
                },
                "jsDoc": null,
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "ProcessStdio",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "ProcessStdio"
                      }
                    },
                    {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    }
                  ]
                }
              },
              {
                "name": "stderr",
                "snippet": "stderr?: ProcessStdio | number;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 1914,
                  "col": 4
                },
                "jsDoc": null,
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "ProcessStdio",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "ProcessStdio"
                      }
                    },
                    {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    }
                  ]
                }
              },
              {
                "name": "stdin",
                "snippet": "stdin?: ProcessStdio | number;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 1915,
                  "col": 4
                },
                "jsDoc": null,
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "ProcessStdio",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeName": "ProcessStdio"
                      }
                    },
                    {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    }
                  ]
                }
              }
            ],
            "callSignatures": []
          }
        },
        {
          "kind": "function",
          "name": "run",
          "snippet": "export function run(opt: RunOptions): Process;",
          "location": {
            "filename": "./deno.ts",
            "line": 1931,
            "col": 2
          },
          "jsDoc": "Spawns new subprocess.\n\nSubprocess uses same working directory as parent process unless `opt.cwd`\nis specified.\n\nEnvironmental variables for subprocess can be specified using `opt.env`\nmapping.\n\nBy default subprocess inherits stdio of parent process. To change that\n`opt.stdout`, `opt.stderr` and `opt.stdin` can be specified independently -\nthey can be set to either `ProcessStdio` or `rid` of open file.\n\nRequires `allow-run` permission.",
          "functionDef": {
            "params": [
              {
                "name": "opt",
                "tsType": {
                  "repr": "RunOptions",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeName": "RunOptions"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "Process",
              "kind": "typeRef",
              "typeRef": {
                "typeName": "Process"
              }
            },
            "isAsync": false,
            "isGenerator": false
          }
        },
        {
          "kind": "variable",
          "name": "Signal",
          "snippet": "export const Signal: typeof MacOSSignal | typeof LinuxSignal;",
          "location": {
            "filename": "./deno.ts",
            "line": 2003,
            "col": 2
          },
          "jsDoc": "**UNSTABLE**: make platform independent.\n\nSignals numbers. This is platform dependent.",
          "variableDef": {
            "tsType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "MacOSSignal",
                  "kind": "typeQuery",
                  "typeQuery": "MacOSSignal"
                },
                {
                  "repr": "LinuxSignal",
                  "kind": "typeQuery",
                  "typeQuery": "LinuxSignal"
                }
              ]
            },
            "kind": "const"
          }
        },
        {
          "kind": "function",
          "name": "inspect",
          "snippet": "export function inspect(value: unknown, options?: ConsoleOptions): string;",
          "location": {
            "filename": "./deno.ts",
            "line": 2018,
            "col": 2
          },
          "jsDoc": "**UNSTABLE**: `ConsoleOptions` rename to `InspectOptions`. Also the exact\nform of string output subject to change.\n\nConverts input into string that has the same format as printed by\n`console.log()`.",
          "functionDef": {
            "params": [
              {
                "name": "value",
                "tsType": {
                  "repr": "unknown",
                  "kind": "keyword",
                  "keyword": "unknown"
                }
              },
              {
                "name": "options",
                "tsType": {
                  "repr": "ConsoleOptions",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeName": "ConsoleOptions"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "string",
              "kind": "keyword",
              "keyword": "string"
            },
            "isAsync": false,
            "isGenerator": false
          }
        },
        {
          "kind": "typeAlias",
          "name": "OperatingSystem",
          "snippet": "export type OperatingSystem = \"mac\" | \"win\" | \"linux\";",
          "location": {
            "filename": "./deno.ts",
            "line": 2020,
            "col": 2
          },
          "jsDoc": null
        },
        {
          "kind": "typeAlias",
          "name": "Arch",
          "snippet": "export type Arch = \"x64\" | \"arm64\";",
          "location": {
            "filename": "./deno.ts",
            "line": 2022,
            "col": 2
          },
          "jsDoc": null
        },
        {
          "kind": "variable",
          "name": "build",
          "snippet": "export const build: BuildInfo;",
          "location": {
            "filename": "./deno.ts",
            "line": 2032,
            "col": 2
          },
          "jsDoc": "Build related information.",
          "variableDef": {
            "tsType": {
              "repr": "BuildInfo",
              "kind": "typeRef",
              "typeRef": {
                "typeName": "BuildInfo"
              }
            },
            "kind": "const"
          }
        },
        {
          "kind": "variable",
          "name": "version",
          "snippet": "export const version: Version;",
          "location": {
            "filename": "./deno.ts",
            "line": 2040,
            "col": 2
          },
          "jsDoc": "Version related information.",
          "variableDef": {
            "tsType": {
              "repr": "Version",
              "kind": "typeRef",
              "typeRef": {
                "typeName": "Version"
              }
            },
            "kind": "const"
          }
        },
        {
          "kind": "enum",
          "name": "DiagnosticCategory",
          "snippet": "export enum DiagnosticCategory {\n    Log = 0,\n    Debug = 1,\n    Info = 2,\n    Error = 3,\n    Warning = 4,\n    Suggestion = 5\n  }",
          "location": {
            "filename": "./deno.ts",
            "line": 2043,
            "col": 2
          },
          "jsDoc": "The log category for a diagnostic message.",
          "enumDef": {
            "members": [
              {
                "name": "Log"
              },
              {
                "name": "Debug"
              },
              {
                "name": "Info"
              },
              {
                "name": "Error"
              },
              {
                "name": "Warning"
              },
              {
                "name": "Suggestion"
              }
            ]
          }
        },
        {
          "kind": "interface",
          "name": "DiagnosticMessageChain",
          "snippet": "export interface DiagnosticMessageChain {\n  message: string;\n  category: DiagnosticCategory;\n  code: number;\n  next?: DiagnosticMessageChain[];\n}",
          "location": {
            "filename": "./deno.ts",
            "line": 2052,
            "col": 2
          },
          "jsDoc": null,
          "interfaceDef": {
            "methods": [],
            "properties": [
              {
                "name": "message",
                "snippet": "message: string;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 2053,
                  "col": 4
                },
                "jsDoc": null,
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "name": "category",
                "snippet": "category: DiagnosticCategory;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 2054,
                  "col": 4
                },
                "jsDoc": null,
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "DiagnosticCategory",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeName": "DiagnosticCategory"
                  }
                }
              },
              {
                "name": "code",
                "snippet": "code: number;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 2055,
                  "col": 4
                },
                "jsDoc": null,
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              },
              {
                "name": "next",
                "snippet": "next?: DiagnosticMessageChain[];",
                "location": {
                  "filename": "./deno.ts",
                  "line": 2056,
                  "col": 4
                },
                "jsDoc": null,
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "array",
                  "array": {
                    "repr": "DiagnosticMessageChain",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeName": "DiagnosticMessageChain"
                    }
                  }
                }
              }
            ],
            "callSignatures": []
          }
        },
        {
          "kind": "interface",
          "name": "DiagnosticItem",
          "snippet": "export interface DiagnosticItem {\n  /** A string message summarizing the diagnostic. */\n  message: string;\n  /** An ordered array of further diagnostics. */\n  messageChain?: DiagnosticMessageChain;\n  /** Information related to the diagnostic. This is present when there is a\n   * suggestion or other additional diagnostic information */\n  relatedInformation?: DiagnosticItem[];\n  /** The text of the source line related to the diagnostic. */\n  sourceLine?: string;\n  /** The line number that is related to the diagnostic. */\n  lineNumber?: number;\n  /** The name of the script resource related to the diagnostic. */\n  scriptResourceName?: string;\n  /** The start position related to the diagnostic. */\n  startPosition?: number;\n  /** The end position related to the diagnostic. */\n  endPosition?: number;\n  /** The category of the diagnostic. */\n  category: DiagnosticCategory;\n  /** A number identifier. */\n  code: number;\n  /** The the start column of the sourceLine related to the diagnostic. */\n  startColumn?: number;\n  /** The end column of the sourceLine related to the diagnostic. */\n  endColumn?: number;\n}",
          "location": {
            "filename": "./deno.ts",
            "line": 2059,
            "col": 2
          },
          "jsDoc": null,
          "interfaceDef": {
            "methods": [],
            "properties": [
              {
                "name": "message",
                "snippet": "message: string;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 2061,
                  "col": 4
                },
                "jsDoc": "A string message summarizing the diagnostic.",
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "name": "messageChain",
                "snippet": "messageChain?: DiagnosticMessageChain;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 2063,
                  "col": 4
                },
                "jsDoc": "An ordered array of further diagnostics.",
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "DiagnosticMessageChain",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeName": "DiagnosticMessageChain"
                  }
                }
              },
              {
                "name": "relatedInformation",
                "snippet": "relatedInformation?: DiagnosticItem[];",
                "location": {
                  "filename": "./deno.ts",
                  "line": 2066,
                  "col": 4
                },
                "jsDoc": "Information related to the diagnostic. This is present when there is a\nsuggestion or other additional diagnostic information",
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "array",
                  "array": {
                    "repr": "DiagnosticItem",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeName": "DiagnosticItem"
                    }
                  }
                }
              },
              {
                "name": "sourceLine",
                "snippet": "sourceLine?: string;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 2068,
                  "col": 4
                },
                "jsDoc": "The text of the source line related to the diagnostic.",
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "name": "lineNumber",
                "snippet": "lineNumber?: number;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 2070,
                  "col": 4
                },
                "jsDoc": "The line number that is related to the diagnostic.",
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              },
              {
                "name": "scriptResourceName",
                "snippet": "scriptResourceName?: string;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 2072,
                  "col": 4
                },
                "jsDoc": "The name of the script resource related to the diagnostic.",
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "name": "startPosition",
                "snippet": "startPosition?: number;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 2074,
                  "col": 4
                },
                "jsDoc": "The start position related to the diagnostic.",
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              },
              {
                "name": "endPosition",
                "snippet": "endPosition?: number;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 2076,
                  "col": 4
                },
                "jsDoc": "The end position related to the diagnostic.",
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              },
              {
                "name": "category",
                "snippet": "category: DiagnosticCategory;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 2078,
                  "col": 4
                },
                "jsDoc": "The category of the diagnostic.",
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "DiagnosticCategory",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeName": "DiagnosticCategory"
                  }
                }
              },
              {
                "name": "code",
                "snippet": "code: number;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 2080,
                  "col": 4
                },
                "jsDoc": "A number identifier.",
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              },
              {
                "name": "startColumn",
                "snippet": "startColumn?: number;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 2082,
                  "col": 4
                },
                "jsDoc": "The the start column of the sourceLine related to the diagnostic.",
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              },
              {
                "name": "endColumn",
                "snippet": "endColumn?: number;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 2084,
                  "col": 4
                },
                "jsDoc": "The end column of the sourceLine related to the diagnostic.",
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              }
            ],
            "callSignatures": []
          }
        },
        {
          "kind": "interface",
          "name": "Diagnostic",
          "snippet": "export interface Diagnostic {\n  /** An array of diagnostic items. */\n  items: DiagnosticItem[];\n}",
          "location": {
            "filename": "./deno.ts",
            "line": 2087,
            "col": 2
          },
          "jsDoc": null,
          "interfaceDef": {
            "methods": [],
            "properties": [
              {
                "name": "items",
                "snippet": "items: DiagnosticItem[];",
                "location": {
                  "filename": "./deno.ts",
                  "line": 2089,
                  "col": 4
                },
                "jsDoc": "An array of diagnostic items.",
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "array",
                  "array": {
                    "repr": "DiagnosticItem",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeName": "DiagnosticItem"
                    }
                  }
                }
              }
            ],
            "callSignatures": []
          }
        },
        {
          "kind": "function",
          "name": "formatDiagnostics",
          "snippet": "export function formatDiagnostics(items: DiagnosticItem[]): string;",
          "location": {
            "filename": "./deno.ts",
            "line": 2097,
            "col": 2
          },
          "jsDoc": "**UNSTABLE**: new API, yet to be vetted.\n\nFormat an array of diagnostic items and return them as a single string.\n@param items An array of diagnostic items to format",
          "functionDef": {
            "params": [
              {
                "name": "items",
                "tsType": {
                  "repr": "",
                  "kind": "array",
                  "array": {
                    "repr": "DiagnosticItem",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeName": "DiagnosticItem"
                    }
                  }
                }
              }
            ],
            "returnType": {
              "repr": "string",
              "kind": "keyword",
              "keyword": "string"
            },
            "isAsync": false,
            "isGenerator": false
          }
        },
        {
          "kind": "interface",
          "name": "CompilerOptions",
          "snippet": "export interface CompilerOptions {\n  /** Allow JavaScript files to be compiled. Defaults to `true`. */\n  allowJs?: boolean;\n  /** Allow default imports from modules with no default export. This does not\n   * affect code emit, just typechecking. Defaults to `false`. */\n  allowSyntheticDefaultImports?: boolean;\n  /** Allow accessing UMD globals from modules. Defaults to `false`. */\n  allowUmdGlobalAccess?: boolean;\n  /** Do not report errors on unreachable code. Defaults to `false`. */\n  allowUnreachableCode?: boolean;\n  /** Do not report errors on unused labels. Defaults to `false` */\n  allowUnusedLabels?: boolean;\n  /** Parse in strict mode and emit `\"use strict\"` for each source file.\n   * Defaults to `true`. */\n  alwaysStrict?: boolean;\n  /** Base directory to resolve non-relative module names. Defaults to\n   * `undefined`. */\n  baseUrl?: string;\n  /** Report errors in `.js` files. Use in conjunction with `allowJs`. Defaults\n   * to `false`. */\n  checkJs?: boolean;\n  /** Generates corresponding `.d.ts` file. Defaults to `false`. */\n  declaration?: boolean;\n  /** Output directory for generated declaration files. */\n  declarationDir?: string;\n  /** Generates a source map for each corresponding `.d.ts` file. Defaults to\n   * `false`. */\n  declarationMap?: boolean;\n  /** Provide full support for iterables in `for..of`, spread and\n   * destructuring when targeting ES5 or ES3. Defaults to `false`. */\n  downlevelIteration?: boolean;\n  /** Emit a UTF-8 Byte Order Mark (BOM) in the beginning of output files.\n   * Defaults to `false`. */\n  emitBOM?: boolean;\n  /** Only emit `.d.ts` declaration files. Defaults to `false`. */\n  emitDeclarationOnly?: boolean;\n  /** Emit design-type metadata for decorated declarations in source. See issue\n   * [microsoft/TypeScript#2577](https://github.com/Microsoft/TypeScript/issues/2577)\n   * for details. Defaults to `false`. */\n  emitDecoratorMetadata?: boolean;\n  /** Emit `__importStar` and `__importDefault` helpers for runtime babel\n   * ecosystem compatibility and enable `allowSyntheticDefaultImports` for type\n   * system compatibility. Defaults to `true`. */\n  esModuleInterop?: boolean;\n  /** Enables experimental support for ES decorators. Defaults to `false`. */\n  experimentalDecorators?: boolean;\n  /** Emit a single file with source maps instead of having a separate file.\n   * Defaults to `false`. */\n  inlineSourceMap?: boolean;\n  /** Emit the source alongside the source maps within a single file; requires\n   * `inlineSourceMap` or `sourceMap` to be set. Defaults to `false`. */\n  inlineSources?: boolean;\n  /** Perform additional checks to ensure that transpile only would be safe.\n   * Defaults to `false`. */\n  isolatedModules?: boolean;\n  /** Support JSX in `.tsx` files: `\"react\"`, `\"preserve\"`, `\"react-native\"`.\n   * Defaults to `\"react\"`. */\n  jsx?: \"react\" | \"preserve\" | \"react-native\";\n  /** Specify the JSX factory function to use when targeting react JSX emit,\n   * e.g. `React.createElement` or `h`. Defaults to `React.createElement`. */\n  jsxFactory?: string;\n  /** Resolve keyof to string valued property names only (no numbers or\n   * symbols). Defaults to `false`. */\n  keyofStringsOnly?: string;\n  /** Emit class fields with ECMAScript-standard semantics. Defaults to `false`.\n   * Does not apply to `\"esnext\"` target. */\n  useDefineForClassFields?: boolean;\n  /** List of library files to be included in the compilation. If omitted,\n   * then the Deno main runtime libs are used. */\n  lib?: string[];\n  /** The locale to use to show error messages. */\n  locale?: string;\n  /** Specifies the location where debugger should locate map files instead of\n   * generated locations. Use this flag if the `.map` files will be located at\n   * run-time in a different location than the `.js` files. The location\n   * specified will be embedded in the source map to direct the debugger where\n   * the map files will be located. Defaults to `undefined`. */\n  mapRoot?: string;\n  /** Specify the module format for the emitted code. Defaults to\n   * `\"esnext\"`. */\n  module?:\n    | \"none\"\n    | \"commonjs\"\n    | \"amd\"\n    | \"system\"\n    | \"umd\"\n    | \"es6\"\n    | \"es2015\"\n    | \"esnext\";\n  /** Do not generate custom helper functions like `__extends` in compiled\n   * output. Defaults to `false`. */\n  noEmitHelpers?: boolean;\n  /** Report errors for fallthrough cases in switch statement. Defaults to\n   * `false`. */\n  noFallthroughCasesInSwitch?: boolean;\n  /** Raise error on expressions and declarations with an implied any type.\n   * Defaults to `true`. */\n  noImplicitAny?: boolean;\n  /** Report an error when not all code paths in function return a value.\n   * Defaults to `false`. */\n  noImplicitReturns?: boolean;\n  /** Raise error on `this` expressions with an implied `any` type. Defaults to\n   * `true`. */\n  noImplicitThis?: boolean;\n  /** Do not emit `\"use strict\"` directives in module output. Defaults to\n   * `false`. */\n  noImplicitUseStrict?: boolean;\n  /** Do not add triple-slash references or module import targets to the list of\n   * compiled files. Defaults to `false`. */\n  noResolve?: boolean;\n  /** Disable strict checking of generic signatures in function types. Defaults\n   * to `false`. */\n  noStrictGenericChecks?: boolean;\n  /** Report errors on unused locals. Defaults to `false`. */\n  noUnusedLocals?: boolean;\n  /** Report errors on unused parameters. Defaults to `false`. */\n  noUnusedParameters?: boolean;\n  /** Redirect output structure to the directory. This only impacts\n   * `Deno.compile` and only changes the emitted file names. Defaults to\n   * `undefined`. */\n  outDir?: string;\n  /** List of path mapping entries for module names to locations relative to the\n   * `baseUrl`. Defaults to `undefined`. */\n  paths?: Record<string, string[]>;\n  /** Do not erase const enum declarations in generated code. Defaults to\n   * `false`. */\n  preserveConstEnums?: boolean;\n  /** Remove all comments except copy-right header comments beginning with\n   * `/*!`. Defaults to `true`. */\n  removeComments?: boolean;\n  /** Include modules imported with `.json` extension. Defaults to `true`. */\n  resolveJsonModule?: boolean;\n  /** Specifies the root directory of input files. Only use to control the\n   * output directory structure with `outDir`. Defaults to `undefined`. */\n  rootDir?: string;\n  /** List of _root_ folders whose combined content represent the structure of\n   * the project at runtime. Defaults to `undefined`. */\n  rootDirs?: string[];\n  /** Generates corresponding `.map` file. Defaults to `false`. */\n  sourceMap?: boolean;\n  /** Specifies the location where debugger should locate TypeScript files\n   * instead of source locations. Use this flag if the sources will be located\n   * at run-time in a different location than that at design-time. The location\n   * specified will be embedded in the sourceMap to direct the debugger where\n   * the source files will be located. Defaults to `undefined`. */\n  sourceRoot?: string;\n  /** Enable all strict type checking options. Enabling `strict` enables\n   * `noImplicitAny`, `noImplicitThis`, `alwaysStrict`, `strictBindCallApply`,\n   * `strictNullChecks`, `strictFunctionTypes` and\n   * `strictPropertyInitialization`. Defaults to `true`. */\n  strict?: boolean;\n  /** Enable stricter checking of the `bind`, `call`, and `apply` methods on\n   * functions. Defaults to `true`. */\n  strictBindCallApply?: boolean;\n  /** Disable bivariant parameter checking for function types. Defaults to\n   * `true`. */\n  strictFunctionTypes?: boolean;\n  /** Ensure non-undefined class properties are initialized in the constructor.\n   * This option requires `strictNullChecks` be enabled in order to take effect.\n   * Defaults to `true`. */\n  strictPropertyInitialization?: boolean;\n  /** In strict null checking mode, the `null` and `undefined` values are not in\n   * the domain of every type and are only assignable to themselves and `any`\n   * (the one exception being that `undefined` is also assignable to `void`). */\n  strictNullChecks?: boolean;\n  /** Suppress excess property checks for object literals. Defaults to\n   * `false`. */\n  suppressExcessPropertyErrors?: boolean;\n  /** Suppress `noImplicitAny` errors for indexing objects lacking index\n   * signatures. */\n  suppressImplicitAnyIndexErrors?: boolean;\n  /** Specify ECMAScript target version. Defaults to `esnext`. */\n  target?:\n    | \"es3\"\n    | \"es5\"\n    | \"es6\"\n    | \"es2015\"\n    | \"es2016\"\n    | \"es2017\"\n    | \"es2018\"\n    | \"es2019\"\n    | \"es2020\"\n    | \"esnext\";\n  /** List of names of type definitions to include. Defaults to `undefined`.\n   *\n   * The type definitions are resolved according to the normal Deno resolution\n   * irrespective of if sources are provided on the call. Like other Deno\n   * modules, there is no \"magical\" resolution. For example:\n   *\n   *      Deno.compile(\n   *        \"./foo.js\",\n   *        undefined,\n   *        {\n   *          types: [ \"./foo.d.ts\", \"https://deno.land/x/example/types.d.ts\" ]\n   *        }\n   *      );\n   */\n  types?: string[];\n}",
          "location": {
            "filename": "./deno.ts",
            "line": 2103,
            "col": 2
          },
          "jsDoc": "**UNSTABLE**: new API, yet to be vetted.\n\nA specific subset TypeScript compiler options that can be supported by the\nDeno TypeScript compiler.",
          "interfaceDef": {
            "methods": [],
            "properties": [
              {
                "name": "allowJs",
                "snippet": "allowJs?: boolean;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 2105,
                  "col": 4
                },
                "jsDoc": "Allow JavaScript files to be compiled. Defaults to `true`.",
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                }
              },
              {
                "name": "allowSyntheticDefaultImports",
                "snippet": "allowSyntheticDefaultImports?: boolean;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 2108,
                  "col": 4
                },
                "jsDoc": "Allow default imports from modules with no default export. This does not\naffect code emit, just typechecking. Defaults to `false`.",
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                }
              },
              {
                "name": "allowUmdGlobalAccess",
                "snippet": "allowUmdGlobalAccess?: boolean;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 2110,
                  "col": 4
                },
                "jsDoc": "Allow accessing UMD globals from modules. Defaults to `false`.",
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                }
              },
              {
                "name": "allowUnreachableCode",
                "snippet": "allowUnreachableCode?: boolean;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 2112,
                  "col": 4
                },
                "jsDoc": "Do not report errors on unreachable code. Defaults to `false`.",
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                }
              },
              {
                "name": "allowUnusedLabels",
                "snippet": "allowUnusedLabels?: boolean;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 2114,
                  "col": 4
                },
                "jsDoc": "Do not report errors on unused labels. Defaults to `false`",
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                }
              },
              {
                "name": "alwaysStrict",
                "snippet": "alwaysStrict?: boolean;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 2117,
                  "col": 4
                },
                "jsDoc": "Parse in strict mode and emit `\"use strict\"` for each source file.\nDefaults to `true`.",
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                }
              },
              {
                "name": "baseUrl",
                "snippet": "baseUrl?: string;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 2120,
                  "col": 4
                },
                "jsDoc": "Base directory to resolve non-relative module names. Defaults to\n`undefined`.",
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "name": "checkJs",
                "snippet": "checkJs?: boolean;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 2123,
                  "col": 4
                },
                "jsDoc": "Report errors in `.js` files. Use in conjunction with `allowJs`. Defaults\nto `false`.",
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                }
              },
              {
                "name": "declaration",
                "snippet": "declaration?: boolean;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 2125,
                  "col": 4
                },
                "jsDoc": "Generates corresponding `.d.ts` file. Defaults to `false`.",
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                }
              },
              {
                "name": "declarationDir",
                "snippet": "declarationDir?: string;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 2127,
                  "col": 4
                },
                "jsDoc": "Output directory for generated declaration files.",
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "name": "declarationMap",
                "snippet": "declarationMap?: boolean;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 2130,
                  "col": 4
                },
                "jsDoc": "Generates a source map for each corresponding `.d.ts` file. Defaults to\n`false`.",
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                }
              },
              {
                "name": "downlevelIteration",
                "snippet": "downlevelIteration?: boolean;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 2133,
                  "col": 4
                },
                "jsDoc": "Provide full support for iterables in `for..of`, spread and\ndestructuring when targeting ES5 or ES3. Defaults to `false`.",
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                }
              },
              {
                "name": "emitBOM",
                "snippet": "emitBOM?: boolean;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 2136,
                  "col": 4
                },
                "jsDoc": "Emit a UTF-8 Byte Order Mark (BOM) in the beginning of output files.\nDefaults to `false`.",
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                }
              },
              {
                "name": "emitDeclarationOnly",
                "snippet": "emitDeclarationOnly?: boolean;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 2138,
                  "col": 4
                },
                "jsDoc": "Only emit `.d.ts` declaration files. Defaults to `false`.",
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                }
              },
              {
                "name": "emitDecoratorMetadata",
                "snippet": "emitDecoratorMetadata?: boolean;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 2142,
                  "col": 4
                },
                "jsDoc": "Emit design-type metadata for decorated declarations in source. See issue\n[microsoft/TypeScript#2577](https://github.com/Microsoft/TypeScript/issues/2577)\nfor details. Defaults to `false`.",
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                }
              },
              {
                "name": "esModuleInterop",
                "snippet": "esModuleInterop?: boolean;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 2146,
                  "col": 4
                },
                "jsDoc": "Emit `__importStar` and `__importDefault` helpers for runtime babel\necosystem compatibility and enable `allowSyntheticDefaultImports` for type\nsystem compatibility. Defaults to `true`.",
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                }
              },
              {
                "name": "experimentalDecorators",
                "snippet": "experimentalDecorators?: boolean;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 2148,
                  "col": 4
                },
                "jsDoc": "Enables experimental support for ES decorators. Defaults to `false`.",
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                }
              },
              {
                "name": "inlineSourceMap",
                "snippet": "inlineSourceMap?: boolean;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 2151,
                  "col": 4
                },
                "jsDoc": "Emit a single file with source maps instead of having a separate file.\nDefaults to `false`.",
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                }
              },
              {
                "name": "inlineSources",
                "snippet": "inlineSources?: boolean;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 2154,
                  "col": 4
                },
                "jsDoc": "Emit the source alongside the source maps within a single file; requires\n`inlineSourceMap` or `sourceMap` to be set. Defaults to `false`.",
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                }
              },
              {
                "name": "isolatedModules",
                "snippet": "isolatedModules?: boolean;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 2157,
                  "col": 4
                },
                "jsDoc": "Perform additional checks to ensure that transpile only would be safe.\nDefaults to `false`.",
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                }
              },
              {
                "name": "jsx",
                "snippet": "jsx?: \"react\" | \"preserve\" | \"react-native\";",
                "location": {
                  "filename": "./deno.ts",
                  "line": 2160,
                  "col": 4
                },
                "jsDoc": "Support JSX in `.tsx` files: `\"react\"`, `\"preserve\"`, `\"react-native\"`.\nDefaults to `\"react\"`.",
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "react",
                      "kind": "literal",
                      "literal": {
                        "str": "react"
                      }
                    },
                    {
                      "repr": "preserve",
                      "kind": "literal",
                      "literal": {
                        "str": "preserve"
                      }
                    },
                    {
                      "repr": "react-native",
                      "kind": "literal",
                      "literal": {
                        "str": "react-native"
                      }
                    }
                  ]
                }
              },
              {
                "name": "jsxFactory",
                "snippet": "jsxFactory?: string;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 2163,
                  "col": 4
                },
                "jsDoc": "Specify the JSX factory function to use when targeting react JSX emit,\ne.g. `React.createElement` or `h`. Defaults to `React.createElement`.",
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "name": "keyofStringsOnly",
                "snippet": "keyofStringsOnly?: string;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 2166,
                  "col": 4
                },
                "jsDoc": "Resolve keyof to string valued property names only (no numbers or\nsymbols). Defaults to `false`.",
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "name": "useDefineForClassFields",
                "snippet": "useDefineForClassFields?: boolean;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 2169,
                  "col": 4
                },
                "jsDoc": "Emit class fields with ECMAScript-standard semantics. Defaults to `false`.\nDoes not apply to `\"esnext\"` target.",
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                }
              },
              {
                "name": "lib",
                "snippet": "lib?: string[];",
                "location": {
                  "filename": "./deno.ts",
                  "line": 2172,
                  "col": 4
                },
                "jsDoc": "List of library files to be included in the compilation. If omitted,\nthen the Deno main runtime libs are used.",
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "array",
                  "array": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                }
              },
              {
                "name": "locale",
                "snippet": "locale?: string;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 2174,
                  "col": 4
                },
                "jsDoc": "The locale to use to show error messages.",
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "name": "mapRoot",
                "snippet": "mapRoot?: string;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 2180,
                  "col": 4
                },
                "jsDoc": "Specifies the location where debugger should locate map files instead of\ngenerated locations. Use this flag if the `.map` files will be located at\nrun-time in a different location than the `.js` files. The location\nspecified will be embedded in the source map to direct the debugger where\nthe map files will be located. Defaults to `undefined`.",
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "name": "module",
                "snippet": "module?:\n      | \"none\"\n      | \"commonjs\"\n      | \"amd\"\n      | \"system\"\n      | \"umd\"\n      | \"es6\"\n      | \"es2015\"\n      | \"esnext\";",
                "location": {
                  "filename": "./deno.ts",
                  "line": 2183,
                  "col": 4
                },
                "jsDoc": "Specify the module format for the emitted code. Defaults to\n`\"esnext\"`.",
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "none",
                      "kind": "literal",
                      "literal": {
                        "str": "none"
                      }
                    },
                    {
                      "repr": "commonjs",
                      "kind": "literal",
                      "literal": {
                        "str": "commonjs"
                      }
                    },
                    {
                      "repr": "amd",
                      "kind": "literal",
                      "literal": {
                        "str": "amd"
                      }
                    },
                    {
                      "repr": "system",
                      "kind": "literal",
                      "literal": {
                        "str": "system"
                      }
                    },
                    {
                      "repr": "umd",
                      "kind": "literal",
                      "literal": {
                        "str": "umd"
                      }
                    },
                    {
                      "repr": "es6",
                      "kind": "literal",
                      "literal": {
                        "str": "es6"
                      }
                    },
                    {
                      "repr": "es2015",
                      "kind": "literal",
                      "literal": {
                        "str": "es2015"
                      }
                    },
                    {
                      "repr": "esnext",
                      "kind": "literal",
                      "literal": {
                        "str": "esnext"
                      }
                    }
                  ]
                }
              },
              {
                "name": "noEmitHelpers",
                "snippet": "noEmitHelpers?: boolean;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 2194,
                  "col": 4
                },
                "jsDoc": "Do not generate custom helper functions like `__extends` in compiled\noutput. Defaults to `false`.",
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                }
              },
              {
                "name": "noFallthroughCasesInSwitch",
                "snippet": "noFallthroughCasesInSwitch?: boolean;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 2197,
                  "col": 4
                },
                "jsDoc": "Report errors for fallthrough cases in switch statement. Defaults to\n`false`.",
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                }
              },
              {
                "name": "noImplicitAny",
                "snippet": "noImplicitAny?: boolean;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 2200,
                  "col": 4
                },
                "jsDoc": "Raise error on expressions and declarations with an implied any type.\nDefaults to `true`.",
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                }
              },
              {
                "name": "noImplicitReturns",
                "snippet": "noImplicitReturns?: boolean;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 2203,
                  "col": 4
                },
                "jsDoc": "Report an error when not all code paths in function return a value.\nDefaults to `false`.",
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                }
              },
              {
                "name": "noImplicitThis",
                "snippet": "noImplicitThis?: boolean;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 2206,
                  "col": 4
                },
                "jsDoc": "Raise error on `this` expressions with an implied `any` type. Defaults to\n`true`.",
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                }
              },
              {
                "name": "noImplicitUseStrict",
                "snippet": "noImplicitUseStrict?: boolean;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 2209,
                  "col": 4
                },
                "jsDoc": "Do not emit `\"use strict\"` directives in module output. Defaults to\n`false`.",
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                }
              },
              {
                "name": "noResolve",
                "snippet": "noResolve?: boolean;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 2212,
                  "col": 4
                },
                "jsDoc": "Do not add triple-slash references or module import targets to the list of\ncompiled files. Defaults to `false`.",
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                }
              },
              {
                "name": "noStrictGenericChecks",
                "snippet": "noStrictGenericChecks?: boolean;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 2215,
                  "col": 4
                },
                "jsDoc": "Disable strict checking of generic signatures in function types. Defaults\nto `false`.",
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                }
              },
              {
                "name": "noUnusedLocals",
                "snippet": "noUnusedLocals?: boolean;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 2217,
                  "col": 4
                },
                "jsDoc": "Report errors on unused locals. Defaults to `false`.",
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                }
              },
              {
                "name": "noUnusedParameters",
                "snippet": "noUnusedParameters?: boolean;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 2219,
                  "col": 4
                },
                "jsDoc": "Report errors on unused parameters. Defaults to `false`.",
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                }
              },
              {
                "name": "outDir",
                "snippet": "outDir?: string;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 2223,
                  "col": 4
                },
                "jsDoc": "Redirect output structure to the directory. This only impacts\n`Deno.compile` and only changes the emitted file names. Defaults to\n`undefined`.",
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "name": "paths",
                "snippet": "paths?: Record<string, string[]>;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 2226,
                  "col": 4
                },
                "jsDoc": "List of path mapping entries for module names to locations relative to the\n`baseUrl`. Defaults to `undefined`.",
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "Record",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeName": "Record"
                  }
                }
              },
              {
                "name": "preserveConstEnums",
                "snippet": "preserveConstEnums?: boolean;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 2229,
                  "col": 4
                },
                "jsDoc": "Do not erase const enum declarations in generated code. Defaults to\n`false`.",
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                }
              },
              {
                "name": "removeComments",
                "snippet": "removeComments?: boolean;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 2232,
                  "col": 4
                },
                "jsDoc": "Remove all comments except copy-right header comments beginning with\n`/*!`. Defaults to `true`.",
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                }
              },
              {
                "name": "resolveJsonModule",
                "snippet": "resolveJsonModule?: boolean;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 2234,
                  "col": 4
                },
                "jsDoc": "Include modules imported with `.json` extension. Defaults to `true`.",
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                }
              },
              {
                "name": "rootDir",
                "snippet": "rootDir?: string;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 2237,
                  "col": 4
                },
                "jsDoc": "Specifies the root directory of input files. Only use to control the\noutput directory structure with `outDir`. Defaults to `undefined`.",
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "name": "rootDirs",
                "snippet": "rootDirs?: string[];",
                "location": {
                  "filename": "./deno.ts",
                  "line": 2240,
                  "col": 4
                },
                "jsDoc": "List of _root_ folders whose combined content represent the structure of\nthe project at runtime. Defaults to `undefined`.",
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "array",
                  "array": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                }
              },
              {
                "name": "sourceMap",
                "snippet": "sourceMap?: boolean;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 2242,
                  "col": 4
                },
                "jsDoc": "Generates corresponding `.map` file. Defaults to `false`.",
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                }
              },
              {
                "name": "sourceRoot",
                "snippet": "sourceRoot?: string;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 2248,
                  "col": 4
                },
                "jsDoc": "Specifies the location where debugger should locate TypeScript files\ninstead of source locations. Use this flag if the sources will be located\nat run-time in a different location than that at design-time. The location\nspecified will be embedded in the sourceMap to direct the debugger where\nthe source files will be located. Defaults to `undefined`.",
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "name": "strict",
                "snippet": "strict?: boolean;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 2253,
                  "col": 4
                },
                "jsDoc": "Enable all strict type checking options. Enabling `strict` enables\n`noImplicitAny`, `noImplicitThis`, `alwaysStrict`, `strictBindCallApply`,\n`strictNullChecks`, `strictFunctionTypes` and\n`strictPropertyInitialization`. Defaults to `true`.",
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                }
              },
              {
                "name": "strictBindCallApply",
                "snippet": "strictBindCallApply?: boolean;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 2256,
                  "col": 4
                },
                "jsDoc": "Enable stricter checking of the `bind`, `call`, and `apply` methods on\nfunctions. Defaults to `true`.",
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                }
              },
              {
                "name": "strictFunctionTypes",
                "snippet": "strictFunctionTypes?: boolean;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 2259,
                  "col": 4
                },
                "jsDoc": "Disable bivariant parameter checking for function types. Defaults to\n`true`.",
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                }
              },
              {
                "name": "strictPropertyInitialization",
                "snippet": "strictPropertyInitialization?: boolean;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 2263,
                  "col": 4
                },
                "jsDoc": "Ensure non-undefined class properties are initialized in the constructor.\nThis option requires `strictNullChecks` be enabled in order to take effect.\nDefaults to `true`.",
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                }
              },
              {
                "name": "strictNullChecks",
                "snippet": "strictNullChecks?: boolean;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 2267,
                  "col": 4
                },
                "jsDoc": "In strict null checking mode, the `null` and `undefined` values are not in\nthe domain of every type and are only assignable to themselves and `any`\n(the one exception being that `undefined` is also assignable to `void`).",
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                }
              },
              {
                "name": "suppressExcessPropertyErrors",
                "snippet": "suppressExcessPropertyErrors?: boolean;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 2270,
                  "col": 4
                },
                "jsDoc": "Suppress excess property checks for object literals. Defaults to\n`false`.",
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                }
              },
              {
                "name": "suppressImplicitAnyIndexErrors",
                "snippet": "suppressImplicitAnyIndexErrors?: boolean;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 2273,
                  "col": 4
                },
                "jsDoc": "Suppress `noImplicitAny` errors for indexing objects lacking index\nsignatures.",
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                }
              },
              {
                "name": "target",
                "snippet": "target?:\n      | \"es3\"\n      | \"es5\"\n      | \"es6\"\n      | \"es2015\"\n      | \"es2016\"\n      | \"es2017\"\n      | \"es2018\"\n      | \"es2019\"\n      | \"es2020\"\n      | \"esnext\";",
                "location": {
                  "filename": "./deno.ts",
                  "line": 2275,
                  "col": 4
                },
                "jsDoc": "Specify ECMAScript target version. Defaults to `esnext`.",
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "es3",
                      "kind": "literal",
                      "literal": {
                        "str": "es3"
                      }
                    },
                    {
                      "repr": "es5",
                      "kind": "literal",
                      "literal": {
                        "str": "es5"
                      }
                    },
                    {
                      "repr": "es6",
                      "kind": "literal",
                      "literal": {
                        "str": "es6"
                      }
                    },
                    {
                      "repr": "es2015",
                      "kind": "literal",
                      "literal": {
                        "str": "es2015"
                      }
                    },
                    {
                      "repr": "es2016",
                      "kind": "literal",
                      "literal": {
                        "str": "es2016"
                      }
                    },
                    {
                      "repr": "es2017",
                      "kind": "literal",
                      "literal": {
                        "str": "es2017"
                      }
                    },
                    {
                      "repr": "es2018",
                      "kind": "literal",
                      "literal": {
                        "str": "es2018"
                      }
                    },
                    {
                      "repr": "es2019",
                      "kind": "literal",
                      "literal": {
                        "str": "es2019"
                      }
                    },
                    {
                      "repr": "es2020",
                      "kind": "literal",
                      "literal": {
                        "str": "es2020"
                      }
                    },
                    {
                      "repr": "esnext",
                      "kind": "literal",
                      "literal": {
                        "str": "esnext"
                      }
                    }
                  ]
                }
              },
              {
                "name": "types",
                "snippet": "types?: string[];",
                "location": {
                  "filename": "./deno.ts",
                  "line": 2300,
                  "col": 4
                },
                "jsDoc": "List of names of type definitions to include. Defaults to `undefined`.\n\nThe type definitions are resolved according to the normal Deno resolution\nirrespective of if sources are provided on the call. Like other Deno\nmodules, there is no \"magical\" resolution. For example:\n\n     Deno.compile(\n       \"./foo.js\",\n       undefined,\n       {\n         types: [ \"./foo.d.ts\", \"https://deno.land/x/example/types.d.ts\" ]\n       }\n     );",
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "array",
                  "array": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                }
              }
            ],
            "callSignatures": []
          }
        },
        {
          "kind": "interface",
          "name": "TranspileOnlyResult",
          "snippet": "export interface TranspileOnlyResult {\n  source: string;\n  map?: string;\n}",
          "location": {
            "filename": "./deno.ts",
            "line": 2307,
            "col": 2
          },
          "jsDoc": "**UNSTABLE**: new API, yet to be vetted.\n\nThe results of a transpile only command, where the `source` contains the\nemitted source, and `map` optionally contains the source map.",
          "interfaceDef": {
            "methods": [],
            "properties": [
              {
                "name": "source",
                "snippet": "source: string;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 2308,
                  "col": 4
                },
                "jsDoc": null,
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "name": "map",
                "snippet": "map?: string;",
                "location": {
                  "filename": "./deno.ts",
                  "line": 2309,
                  "col": 4
                },
                "jsDoc": null,
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              }
            ],
            "callSignatures": []
          }
        },
        {
          "kind": "function",
          "name": "transpileOnly",
          "snippet": "export function transpileOnly(\n    sources: Record<string, string>,\n    options?: CompilerOptions\n  ): Promise<Record<string, TranspileOnlyResult>>;",
          "location": {
            "filename": "./deno.ts",
            "line": 2333,
            "col": 2
          },
          "jsDoc": "**UNSTABLE**: new API, yet to be vetted.\n\nTakes a set of TypeScript sources and resolves to a map where the key was\nthe original file name provided in sources and the result contains the\n`source` and optionally the `map` from the transpile operation. This does no\ntype checking and validation, it effectively \"strips\" the types from the\nfile.\n\n     const results =  await Deno.transpileOnly({\n       \"foo.ts\": `const foo: string = \"foo\";`\n     });\n\n@param sources A map where the key is the filename and the value is the text\n               to transpile. The filename is only used in the transpile and\n               not resolved, for example to fill in the source name in the\n               source map.\n@param options An option object of options to send to the compiler. This is\n               a subset of ts.CompilerOptions which can be supported by Deno.\n               Many of the options related to type checking and emitting\n               type declaration files will have no impact on the output.",
          "functionDef": {
            "params": [
              {
                "name": "sources",
                "tsType": {
                  "repr": "Record",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeName": "Record"
                  }
                }
              },
              {
                "name": "options",
                "tsType": {
                  "repr": "CompilerOptions",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeName": "CompilerOptions"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeName": "Promise"
              }
            },
            "isAsync": false,
            "isGenerator": false
          }
        },
        {
          "kind": "function",
          "name": "compile",
          "snippet": "export function compile(\n    rootName: string,\n    sources?: Record<string, string>,\n    options?: CompilerOptions\n  ): Promise<[DiagnosticItem[] | undefined, Record<string, string>]>;",
          "location": {
            "filename": "./deno.ts",
            "line": 2367,
            "col": 2
          },
          "jsDoc": "**UNSTABLE**: new API, yet to be vetted.\n\nTakes a root module name, any optionally a record set of sources. Resolves\nwith a compiled set of modules. If just a root name is provided, the modules\nwill be resolved as if the root module had been passed on the command line.\n\nIf sources are passed, all modules will be resolved out of this object, where\nthe key is the module name and the value is the content. The extension of\nthe module name will be used to determine the media type of the module.\n\n     const [ maybeDiagnostics1, output1 ] = await Deno.compile(\"foo.ts\");\n\n     const [ maybeDiagnostics2, output2 ] = await Deno.compile(\"/foo.ts\", {\n       \"/foo.ts\": `export * from \"./bar.ts\";`,\n       \"/bar.ts\": `export const bar = \"bar\";`\n     });\n\n@param rootName The root name of the module which will be used as the\n                \"starting point\". If no `sources` is specified, Deno will\n                resolve the module externally as if the `rootName` had been\n                specified on the command line.\n@param sources An optional key/value map of sources to be used when resolving\n               modules, where the key is the module name, and the value is\n               the source content. The extension of the key will determine\n               the media type of the file when processing. If supplied,\n               Deno will not attempt to resolve any modules externally.\n@param options An optional object of options to send to the compiler. This is\n               a subset of ts.CompilerOptions which can be supported by Deno.",
          "functionDef": {
            "params": [
              {
                "name": "rootName",
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "name": "sources",
                "tsType": {
                  "repr": "Record",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeName": "Record"
                  }
                }
              },
              {
                "name": "options",
                "tsType": {
                  "repr": "CompilerOptions",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeName": "CompilerOptions"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeName": "Promise"
              }
            },
            "isAsync": false,
            "isGenerator": false
          }
        },
        {
          "kind": "function",
          "name": "bundle",
          "snippet": "export function bundle(\n    rootName: string,\n    sources?: Record<string, string>,\n    options?: CompilerOptions\n  ): Promise<[DiagnosticItem[] | undefined, string]>;",
          "location": {
            "filename": "./deno.ts",
            "line": 2408,
            "col": 2
          },
          "jsDoc": "**UNSTABLE**: new API, yet to be vetted.\n\n`bundle()` is part the compiler API.  A full description of this functionality\ncan be found in the [manual](https://deno.land/std/manual.md#denobundle).\n\nTakes a root module name, and optionally a record set of sources. Resolves\nwith a single JavaScript string (and bundle diagnostics if issues arise with\nthe bundling) that is like the output of a `deno bundle` command. If just\na root name is provided, the modules will be resolved as if the root module\nhad been passed on the command line.\n\nIf sources are passed, all modules will be resolved out of this object, where\nthe key is the module name and the value is the content. The extension of the\nmodule name will be used to determine the media type of the module.\n\n     //equivalent to \"deno bundle foo.ts\" from the command line\n     const [ maybeDiagnostics1, output1 ] = await Deno.bundle(\"foo.ts\");\n\n     const [ maybeDiagnostics2, output2 ] = await Deno.bundle(\"/foo.ts\", {\n       \"/foo.ts\": `export * from \"./bar.ts\";`,\n       \"/bar.ts\": `export const bar = \"bar\";`\n     });\n\n@param rootName The root name of the module which will be used as the\n                \"starting point\". If no `sources` is specified, Deno will\n                resolve the module externally as if the `rootName` had been\n                specified on the command line.\n@param sources An optional key/value map of sources to be used when resolving\n               modules, where the key is the module name, and the value is\n               the source content. The extension of the key will determine\n               the media type of the file when processing. If supplied,\n               Deno will not attempt to resolve any modules externally.\n@param options An optional object of options to send to the compiler. This is\n               a subset of ts.CompilerOptions which can be supported by Deno.",
          "functionDef": {
            "params": [
              {
                "name": "rootName",
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "name": "sources",
                "tsType": {
                  "repr": "Record",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeName": "Record"
                  }
                }
              },
              {
                "name": "options",
                "tsType": {
                  "repr": "CompilerOptions",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeName": "CompilerOptions"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeName": "Promise"
              }
            },
            "isAsync": false,
            "isGenerator": false
          }
        },
        {
          "kind": "variable",
          "name": "args",
          "snippet": "export const args: string[];",
          "location": {
            "filename": "./deno.ts",
            "line": 2423,
            "col": 2
          },
          "jsDoc": "Returns the script arguments to the program. If for example we run a\nprogram:\n\n     deno --allow-read https://deno.land/std/examples/cat.ts /etc/passwd\n\nThen `Deno.args` will contain:\n\n     [ \"/etc/passwd\" ]",
          "variableDef": {
            "tsType": {
              "repr": "",
              "kind": "array",
              "array": {
                "repr": "string",
                "kind": "keyword",
                "keyword": "string"
              }
            },
            "kind": "const"
          }
        },
        {
          "kind": "class",
          "name": "SignalStream",
          "snippet": "export class SignalStream\n    implements AsyncIterableIterator<void>, PromiseLike<void>",
          "location": {
            "filename": "./deno.ts",
            "line": 2429,
            "col": 2
          },
          "jsDoc": "**UNSTABLE**: new API, yet to be vetted.\n\nRepresents the stream of signals, implements both `AsyncIterator` and\n`PromiseLike`.",
          "classDef": {
            "isAbstract": false,
            "constructors": [
              {
                "jsDoc": null,
                "snippet": "constructor(signal: typeof Deno.Signal);",
                "accessibility": null,
                "name": "constructor",
                "params": [
                  {
                    "name": "signal",
                    "tsType": {
                      "repr": "<UNIMPLEMENTED>",
                      "kind": "typeQuery",
                      "typeQuery": "<UNIMPLEMENTED>"
                    }
                  }
                ],
                "location": {
                  "filename": "./deno.ts",
                  "line": 2431,
                  "col": 4
                }
              }
            ],
            "properties": [],
            "methods": [
              {
                "jsDoc": null,
                "snippet": "then<T, S>(\n      f: (v: void) => T | Promise<T>,\n      g?: (v: void) => S | Promise<S>\n    ): Promise<T | S>;",
                "accessibility": null,
                "isAbstract": false,
                "isStatic": false,
                "name": "then",
                "kind": "method",
                "functionDef": {
                  "params": [
                    {
                      "name": "f",
                      "tsType": {
                        "repr": "",
                        "kind": "fnOrConstructor",
                        "fnOrConstructor": {
                          "constructor": false,
                          "tsType": {
                            "repr": "",
                            "kind": "union",
                            "union": [
                              {
                                "repr": "T",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeName": "T"
                                }
                              },
                              {
                                "repr": "Promise",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeName": "Promise"
                                }
                              }
                            ]
                          },
                          "params": [
                            {
                              "name": "v",
                              "tsType": {
                                "repr": "void",
                                "kind": "keyword",
                                "keyword": "void"
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "name": "g",
                      "tsType": {
                        "repr": "",
                        "kind": "fnOrConstructor",
                        "fnOrConstructor": {
                          "constructor": false,
                          "tsType": {
                            "repr": "",
                            "kind": "union",
                            "union": [
                              {
                                "repr": "S",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeName": "S"
                                }
                              },
                              {
                                "repr": "Promise",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeName": "Promise"
                                }
                              }
                            ]
                          },
                          "params": [
                            {
                              "name": "v",
                              "tsType": {
                                "repr": "void",
                                "kind": "keyword",
                                "keyword": "void"
                              }
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "returnType": {
                    "repr": "Promise",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeName": "Promise"
                    }
                  },
                  "isAsync": false,
                  "isGenerator": false
                },
                "location": {
                  "filename": "./deno.ts",
                  "line": 2432,
                  "col": 4
                }
              },
              {
                "jsDoc": null,
                "snippet": "next(): Promise<IteratorResult<void>>;",
                "accessibility": null,
                "isAbstract": false,
                "isStatic": false,
                "name": "next",
                "kind": "method",
                "functionDef": {
                  "params": [],
                  "returnType": {
                    "repr": "Promise",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeName": "Promise"
                    }
                  },
                  "isAsync": false,
                  "isGenerator": false
                },
                "location": {
                  "filename": "./deno.ts",
                  "line": 2436,
                  "col": 4
                }
              },
              {
                "jsDoc": null,
                "snippet": "[Symbol.asyncIterator](): AsyncIterableIterator<void>;",
                "accessibility": null,
                "isAbstract": false,
                "isStatic": false,
                "name": "[Symbol.asyncIterator]",
                "kind": "method",
                "functionDef": {
                  "params": [],
                  "returnType": {
                    "repr": "AsyncIterableIterator",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeName": "AsyncIterableIterator"
                    }
                  },
                  "isAsync": false,
                  "isGenerator": false
                },
                "location": {
                  "filename": "./deno.ts",
                  "line": 2437,
                  "col": 4
                }
              },
              {
                "jsDoc": null,
                "snippet": "dispose(): void;",
                "accessibility": null,
                "isAbstract": false,
                "isStatic": false,
                "name": "dispose",
                "kind": "method",
                "functionDef": {
                  "params": [],
                  "returnType": {
                    "repr": "void",
                    "kind": "keyword",
                    "keyword": "void"
                  },
                  "isAsync": false,
                  "isGenerator": false
                },
                "location": {
                  "filename": "./deno.ts",
                  "line": 2438,
                  "col": 4
                }
              }
            ]
          }
        },
        {
          "kind": "function",
          "name": "signal",
          "snippet": "export function signal(signo: number): SignalStream;",
          "location": {
            "filename": "./deno.ts",
            "line": 2467,
            "col": 2
          },
          "jsDoc": "**UNSTABLE**: new API, yet to be vetted.\n\nReturns the stream of the given signal number. You can use it as an async\niterator.\n\n     for await (const _ of Deno.signal(Deno.Signal.SIGTERM)) {\n       console.log(\"got SIGTERM!\");\n     }\n\nYou can also use it as a promise. In this case you can only receive the\nfirst one.\n\n     await Deno.signal(Deno.Signal.SIGTERM);\n     console.log(\"SIGTERM received!\")\n\nIf you want to stop receiving the signals, you can use `.dispose()` method\nof the signal stream object.\n\n     const sig = Deno.signal(Deno.Signal.SIGTERM);\n     setTimeout(() => { sig.dispose(); }, 5000);\n     for await (const _ of sig) {\n       console.log(\"SIGTERM!\")\n     }\n\nThe above for-await loop exits after 5 seconds when `sig.dispose()` is\ncalled.",
          "functionDef": {
            "params": [
              {
                "name": "signo",
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              }
            ],
            "returnType": {
              "repr": "SignalStream",
              "kind": "typeRef",
              "typeRef": {
                "typeName": "SignalStream"
              }
            },
            "isAsync": false,
            "isGenerator": false
          }
        },
        {
          "kind": "variable",
          "name": "signals",
          "snippet": "export const signals: {\n    /** Returns the stream of SIGALRM signals.\n     *\n     * This method is the shorthand for `Deno.signal(Deno.Signal.SIGALRM)`. */\n    alarm: () => SignalStream;\n    /** Returns the stream of SIGCHLD signals.\n     *\n     * This method is the shorthand for `Deno.signal(Deno.Signal.SIGCHLD)`. */\n    child: () => SignalStream;\n    /** Returns the stream of SIGHUP signals.\n     *\n     * This method is the shorthand for `Deno.signal(Deno.Signal.SIGHUP)`. */\n    hungup: () => SignalStream;\n    /** Returns the stream of SIGINT signals.\n     *\n     * This method is the shorthand for `Deno.signal(Deno.Signal.SIGINT)`. */\n    interrupt: () => SignalStream;\n    /** Returns the stream of SIGIO signals.\n     *\n     * This method is the shorthand for `Deno.signal(Deno.Signal.SIGIO)`. */\n    io: () => SignalStream;\n    /** Returns the stream of SIGPIPE signals.\n     *\n     * This method is the shorthand for `Deno.signal(Deno.Signal.SIGPIPE)`. */\n    pipe: () => SignalStream;\n    /** Returns the stream of SIGQUIT signals.\n     *\n     * This method is the shorthand for `Deno.signal(Deno.Signal.SIGQUIT)`. */\n    quit: () => SignalStream;\n    /** Returns the stream of SIGTERM signals.\n     *\n     * This method is the shorthand for `Deno.signal(Deno.Signal.SIGTERM)`. */\n    terminate: () => SignalStream;\n    /** Returns the stream of SIGUSR1 signals.\n     *\n     * This method is the shorthand for `Deno.signal(Deno.Signal.SIGUSR1)`. */\n    userDefined1: () => SignalStream;\n    /** Returns the stream of SIGUSR2 signals.\n     *\n     * This method is the shorthand for `Deno.signal(Deno.Signal.SIGUSR2)`. */\n    userDefined2: () => SignalStream;\n    /** Returns the stream of SIGWINCH signals.\n     *\n     * This method is the shorthand for `Deno.signal(Deno.Signal.SIGWINCH)`. */\n    windowChange: () => SignalStream;\n  };",
          "location": {
            "filename": "./deno.ts",
            "line": 2470,
            "col": 2
          },
          "jsDoc": "**UNSTABLE**: new API, yet to be vetted.",
          "variableDef": {
            "tsType": {
              "repr": "",
              "kind": "typeLiteral",
              "typeLiteral": {
                "methods": [],
                "properties": [
                  {
                    "name": "alarm",
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "",
                      "kind": "fnOrConstructor",
                      "fnOrConstructor": {
                        "constructor": false,
                        "tsType": {
                          "repr": "SignalStream",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeName": "SignalStream"
                          }
                        },
                        "params": []
                      }
                    }
                  },
                  {
                    "name": "child",
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "",
                      "kind": "fnOrConstructor",
                      "fnOrConstructor": {
                        "constructor": false,
                        "tsType": {
                          "repr": "SignalStream",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeName": "SignalStream"
                          }
                        },
                        "params": []
                      }
                    }
                  },
                  {
                    "name": "hungup",
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "",
                      "kind": "fnOrConstructor",
                      "fnOrConstructor": {
                        "constructor": false,
                        "tsType": {
                          "repr": "SignalStream",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeName": "SignalStream"
                          }
                        },
                        "params": []
                      }
                    }
                  },
                  {
                    "name": "interrupt",
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "",
                      "kind": "fnOrConstructor",
                      "fnOrConstructor": {
                        "constructor": false,
                        "tsType": {
                          "repr": "SignalStream",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeName": "SignalStream"
                          }
                        },
                        "params": []
                      }
                    }
                  },
                  {
                    "name": "io",
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "",
                      "kind": "fnOrConstructor",
                      "fnOrConstructor": {
                        "constructor": false,
                        "tsType": {
                          "repr": "SignalStream",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeName": "SignalStream"
                          }
                        },
                        "params": []
                      }
                    }
                  },
                  {
                    "name": "pipe",
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "",
                      "kind": "fnOrConstructor",
                      "fnOrConstructor": {
                        "constructor": false,
                        "tsType": {
                          "repr": "SignalStream",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeName": "SignalStream"
                          }
                        },
                        "params": []
                      }
                    }
                  },
                  {
                    "name": "quit",
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "",
                      "kind": "fnOrConstructor",
                      "fnOrConstructor": {
                        "constructor": false,
                        "tsType": {
                          "repr": "SignalStream",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeName": "SignalStream"
                          }
                        },
                        "params": []
                      }
                    }
                  },
                  {
                    "name": "terminate",
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "",
                      "kind": "fnOrConstructor",
                      "fnOrConstructor": {
                        "constructor": false,
                        "tsType": {
                          "repr": "SignalStream",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeName": "SignalStream"
                          }
                        },
                        "params": []
                      }
                    }
                  },
                  {
                    "name": "userDefined1",
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "",
                      "kind": "fnOrConstructor",
                      "fnOrConstructor": {
                        "constructor": false,
                        "tsType": {
                          "repr": "SignalStream",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeName": "SignalStream"
                          }
                        },
                        "params": []
                      }
                    }
                  },
                  {
                    "name": "userDefined2",
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "",
                      "kind": "fnOrConstructor",
                      "fnOrConstructor": {
                        "constructor": false,
                        "tsType": {
                          "repr": "SignalStream",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeName": "SignalStream"
                          }
                        },
                        "params": []
                      }
                    }
                  },
                  {
                    "name": "windowChange",
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "",
                      "kind": "fnOrConstructor",
                      "fnOrConstructor": {
                        "constructor": false,
                        "tsType": {
                          "repr": "SignalStream",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeName": "SignalStream"
                          }
                        },
                        "params": []
                      }
                    }
                  }
                ],
                "callSignatures": []
              }
            },
            "kind": "const"
          }
        },
        {
          "kind": "variable",
          "name": "symbols",
          "snippet": "export const symbols: {\n    /** Symbol to access exposed internal Deno API */\n    readonly internal: unique symbol;\n    /** A symbol which can be used as a key for a custom method which will be\n     * called when `Deno.inspect()` is called, or when the object is logged to\n     * the console. */\n    readonly customInspect: unique symbol;\n    // TODO(ry) move EOF here?\n  };",
          "location": {
            "filename": "./deno.ts",
            "line": 2520,
            "col": 2
          },
          "jsDoc": "**UNSTABLE**: new API. Maybe move `Deno.EOF` here.\n\nSpecial Deno related symbols.",
          "variableDef": {
            "tsType": {
              "repr": "",
              "kind": "typeLiteral",
              "typeLiteral": {
                "methods": [],
                "properties": [
                  {
                    "name": "internal",
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "",
                      "kind": "typeOperator",
                      "typeOperator": {
                        "operator": "unique",
                        "tsType": {
                          "repr": "symbol",
                          "kind": "keyword",
                          "keyword": "symbol"
                        }
                      }
                    }
                  },
                  {
                    "name": "customInspect",
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "",
                      "kind": "typeOperator",
                      "typeOperator": {
                        "operator": "unique",
                        "tsType": {
                          "repr": "symbol",
                          "kind": "keyword",
                          "keyword": "symbol"
                        }
                      }
                    }
                  }
                ],
                "callSignatures": []
              }
            },
            "kind": "const"
          }
        }
      ]
    }
  }
]
