[{"kind":"namespace","name":"Deno","location":{"filename":"deno.ts","line":6,"col":0},"jsDoc":null,"namespaceDef":{"elements":[{"kind":"variable","name":"pid","location":{"filename":"deno.ts","line":8,"col":2},"jsDoc":"The current process id of the runtime.","variableDef":{"tsType":{"repr":"number","kind":"keyword","keyword":"number"},"kind":"let"}},{"kind":"variable","name":"noColor","location":{"filename":"deno.ts","line":13,"col":2},"jsDoc":"Reflects the NO_COLOR environment variable.\n\nSee: https://no-color.org/","variableDef":{"tsType":{"repr":"boolean","kind":"keyword","keyword":"boolean"},"kind":"let"}},{"kind":"typeAlias","name":"TestFunction","location":{"filename":"deno.ts","line":15,"col":2},"jsDoc":null,"typeAliasDef":{"tsType":{"repr":"","kind":"fnOrConstructor","fnOrConstructor":{"constructor":false,"tsType":{"repr":"","kind":"union","union":[{"repr":"void","kind":"keyword","keyword":"void"},{"repr":"Promise","kind":"typeRef","typeRef":{"typeParams":[{"repr":"void","kind":"keyword","keyword":"void"}],"typeName":"Promise"}}]},"params":[]}}}},{"kind":"interface","name":"TestDefinition","location":{"filename":"deno.ts","line":17,"col":2},"jsDoc":null,"interfaceDef":{"methods":[],"properties":[{"name":"fn","location":{"filename":"deno.ts","line":18,"col":4},"jsDoc":null,"params":[],"computed":false,"optional":false,"tsType":{"repr":"TestFunction","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"TestFunction"}}},{"name":"name","location":{"filename":"deno.ts","line":19,"col":4},"jsDoc":null,"params":[],"computed":false,"optional":false,"tsType":{"repr":"string","kind":"keyword","keyword":"string"}},{"name":"ignore","location":{"filename":"deno.ts","line":20,"col":4},"jsDoc":null,"params":[],"computed":false,"optional":true,"tsType":{"repr":"boolean","kind":"keyword","keyword":"boolean"}},{"name":"disableOpSanitizer","location":{"filename":"deno.ts","line":21,"col":4},"jsDoc":null,"params":[],"computed":false,"optional":true,"tsType":{"repr":"boolean","kind":"keyword","keyword":"boolean"}},{"name":"disableResourceSanitizer","location":{"filename":"deno.ts","line":22,"col":4},"jsDoc":null,"params":[],"computed":false,"optional":true,"tsType":{"repr":"boolean","kind":"keyword","keyword":"boolean"}}],"callSignatures":[]}},{"kind":"function","name":"test","location":{"filename":"deno.ts","line":28,"col":2},"jsDoc":"Register a test which will be run when `deno test` is used on the command\nline and the containing module looks like a test module, or explicitly\nwhen `Deno.runTests` is used","functionDef":{"params":[{"name":"t","tsType":{"repr":"TestDefinition","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"TestDefinition"}}}],"returnType":{"repr":"void","kind":"keyword","keyword":"void"},"isAsync":false,"isGenerator":false}},{"kind":"function","name":"test","location":{"filename":"deno.ts","line":32,"col":2},"jsDoc":"Register a test which will be run when `deno test` is used on the command\nline and the containing module looks like a test module, or explicitly\nwhen `Deno.runTests` is used","functionDef":{"params":[{"name":"fn","tsType":{"repr":"TestFunction","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"TestFunction"}}}],"returnType":{"repr":"void","kind":"keyword","keyword":"void"},"isAsync":false,"isGenerator":false}},{"kind":"function","name":"test","location":{"filename":"deno.ts","line":36,"col":2},"jsDoc":"Register a test which will be run when `deno test` is used on the command\nline and the containing module looks like a test module, or explicitly\nwhen `Deno.runTests` is used","functionDef":{"params":[{"name":"name","tsType":{"repr":"string","kind":"keyword","keyword":"string"}},{"name":"fn","tsType":{"repr":"TestFunction","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"TestFunction"}}}],"returnType":{"repr":"void","kind":"keyword","keyword":"void"},"isAsync":false,"isGenerator":false}},{"kind":"enum","name":"TestEvent","location":{"filename":"deno.ts","line":59,"col":2},"jsDoc":null,"enumDef":{"members":[{"name":"Start"},{"name":"TestStart"},{"name":"TestEnd"},{"name":"End"}]}},{"kind":"class","name":"ConsoleTestReporter","location":{"filename":"deno.ts","line":95,"col":2},"jsDoc":null,"classDef":{"isAbstract":false,"constructors":[{"jsDoc":null,"accessibility":null,"name":"constructor","params":[],"location":{"filename":"deno.ts","line":96,"col":4}}],"properties":[],"methods":[{"jsDoc":null,"accessibility":null,"isAbstract":false,"isStatic":false,"name":"start","kind":"method","functionDef":{"params":[{"name":"event","tsType":{"repr":"TestEventStart","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"TestEventStart"}}}],"returnType":{"repr":"Promise","kind":"typeRef","typeRef":{"typeParams":[{"repr":"void","kind":"keyword","keyword":"void"}],"typeName":"Promise"}},"isAsync":false,"isGenerator":false},"location":{"filename":"deno.ts","line":97,"col":4}},{"jsDoc":null,"accessibility":null,"isAbstract":false,"isStatic":false,"name":"testStart","kind":"method","functionDef":{"params":[{"name":"msg","tsType":{"repr":"TestEventTestStart","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"TestEventTestStart"}}}],"returnType":{"repr":"Promise","kind":"typeRef","typeRef":{"typeParams":[{"repr":"void","kind":"keyword","keyword":"void"}],"typeName":"Promise"}},"isAsync":false,"isGenerator":false},"location":{"filename":"deno.ts","line":98,"col":4}},{"jsDoc":null,"accessibility":null,"isAbstract":false,"isStatic":false,"name":"testEnd","kind":"method","functionDef":{"params":[{"name":"msg","tsType":{"repr":"TestEventTestEnd","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"TestEventTestEnd"}}}],"returnType":{"repr":"Promise","kind":"typeRef","typeRef":{"typeParams":[{"repr":"void","kind":"keyword","keyword":"void"}],"typeName":"Promise"}},"isAsync":false,"isGenerator":false},"location":{"filename":"deno.ts","line":99,"col":4}},{"jsDoc":null,"accessibility":null,"isAbstract":false,"isStatic":false,"name":"end","kind":"method","functionDef":{"params":[{"name":"event","tsType":{"repr":"TestEventEnd","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"TestEventEnd"}}}],"returnType":{"repr":"Promise","kind":"typeRef","typeRef":{"typeParams":[{"repr":"void","kind":"keyword","keyword":"void"}],"typeName":"Promise"}},"isAsync":false,"isGenerator":false},"location":{"filename":"deno.ts","line":100,"col":4}}]}},{"kind":"interface","name":"RunTestsOptions","location":{"filename":"deno.ts","line":103,"col":2},"jsDoc":null,"interfaceDef":{"methods":[],"properties":[{"name":"exitOnFail","location":{"filename":"deno.ts","line":106,"col":4},"jsDoc":"If `true`, Deno will exit with status code 1 if there was\ntest failure. Defaults to `true`.","params":[],"computed":false,"optional":true,"tsType":{"repr":"boolean","kind":"keyword","keyword":"boolean"}},{"name":"failFast","location":{"filename":"deno.ts","line":108,"col":4},"jsDoc":"If `true`, Deno will exit upon first test failure Defaults to `false`.","params":[],"computed":false,"optional":true,"tsType":{"repr":"boolean","kind":"keyword","keyword":"boolean"}},{"name":"only","location":{"filename":"deno.ts","line":111,"col":4},"jsDoc":"String or RegExp used to filter test to run. Only test with names\nmatching provided `String` or `RegExp` will be run.","params":[],"computed":false,"optional":true,"tsType":{"repr":"","kind":"union","union":[{"repr":"string","kind":"keyword","keyword":"string"},{"repr":"RegExp","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"RegExp"}}]}},{"name":"skip","location":{"filename":"deno.ts","line":114,"col":4},"jsDoc":"String or RegExp used to skip tests to run. Tests with names\nmatching provided `String` or `RegExp` will not be run.","params":[],"computed":false,"optional":true,"tsType":{"repr":"","kind":"union","union":[{"repr":"string","kind":"keyword","keyword":"string"},{"repr":"RegExp","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"RegExp"}}]}},{"name":"disableLog","location":{"filename":"deno.ts","line":116,"col":4},"jsDoc":"Disable logging of the results. Defaults to `false`.","params":[],"computed":false,"optional":true,"tsType":{"repr":"boolean","kind":"keyword","keyword":"boolean"}},{"name":"reporter","location":{"filename":"deno.ts","line":118,"col":4},"jsDoc":"Custom reporter class. If not provided uses console reporter.","params":[],"computed":false,"optional":true,"tsType":{"repr":"TestReporter","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"TestReporter"}}}],"callSignatures":[]}},{"kind":"function","name":"runTests","location":{"filename":"deno.ts","line":123,"col":2},"jsDoc":"Run any tests which have been registered. Always resolves\nasynchronously.","functionDef":{"params":[{"name":"opts","tsType":{"repr":"RunTestsOptions","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"RunTestsOptions"}}}],"returnType":{"repr":"Promise","kind":"typeRef","typeRef":{"typeParams":[{"repr":"","kind":"typeLiteral","typeLiteral":{"methods":[],"properties":[{"name":"results","params":[],"computed":false,"optional":false,"tsType":{"repr":"","kind":"array","array":{"repr":"TestResult","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"TestResult"}}}},{"name":"stats","params":[],"computed":false,"optional":false,"tsType":{"repr":"TestStats","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"TestStats"}}},{"name":"duration","params":[],"computed":false,"optional":false,"tsType":{"repr":"number","kind":"keyword","keyword":"number"}}],"callSignatures":[]}}],"typeName":"Promise"}},"isAsync":false,"isGenerator":false}},{"kind":"function","name":"loadavg","location":{"filename":"deno.ts","line":135,"col":2},"jsDoc":"Get the `loadavg`. Requires `allow-env` permission.\n\n      console.log(Deno.loadavg());","functionDef":{"params":[],"returnType":{"repr":"","kind":"array","array":{"repr":"number","kind":"keyword","keyword":"number"}},"isAsync":false,"isGenerator":false}},{"kind":"function","name":"hostname","location":{"filename":"deno.ts","line":141,"col":2},"jsDoc":"Get the `hostname`. Requires `allow-env` permission.\n\n      console.log(Deno.hostname());","functionDef":{"params":[],"returnType":{"repr":"string","kind":"keyword","keyword":"string"},"isAsync":false,"isGenerator":false}},{"kind":"function","name":"osRelease","location":{"filename":"deno.ts","line":147,"col":2},"jsDoc":"Get the OS release. Requires `allow-env` permission.\n\n      console.log(Deno.osRelease());","functionDef":{"params":[],"returnType":{"repr":"string","kind":"keyword","keyword":"string"},"isAsync":false,"isGenerator":false}},{"kind":"function","name":"exit","location":{"filename":"deno.ts","line":150,"col":2},"jsDoc":"Exit the Deno process with optional exit code.","functionDef":{"params":[{"name":"code","tsType":{"repr":"number","kind":"keyword","keyword":"number"}}],"returnType":{"repr":"never","kind":"keyword","keyword":"never"},"isAsync":false,"isGenerator":false}},{"kind":"function","name":"env","location":{"filename":"deno.ts","line":163,"col":2},"jsDoc":"Returns a snapshot of the environment variables at invocation. Mutating a\nproperty in the object will set that variable in the environment for the\nprocess. The environment object will only accept `string`s as values.\n\n      const myEnv = Deno.env();\n      console.log(myEnv.SHELL);\n      myEnv.TEST_VAR = \"HELLO\";\n      const newEnv = Deno.env();\n      console.log(myEnv.TEST_VAR == newEnv.TEST_VAR);\n\nRequires `allow-env` permission.","functionDef":{"params":[],"returnType":{"repr":"","kind":"typeLiteral","typeLiteral":{"methods":[],"properties":[],"callSignatures":[]}},"isAsync":false,"isGenerator":false}},{"kind":"function","name":"env","location":{"filename":"deno.ts","line":177,"col":2},"jsDoc":"Returns the value of an environment variable at invocation. If the\nvariable is not present, `undefined` will be returned.\n\n      const myEnv = Deno.env();\n      console.log(myEnv.SHELL);\n      myEnv.TEST_VAR = \"HELLO\";\n      const newEnv = Deno.env();\n      console.log(myEnv.TEST_VAR == newEnv.TEST_VAR);\n\nRequires `allow-env` permission.","functionDef":{"params":[{"name":"key","tsType":{"repr":"string","kind":"keyword","keyword":"string"}}],"returnType":{"repr":"","kind":"union","union":[{"repr":"string","kind":"keyword","keyword":"string"},{"repr":"undefined","kind":"keyword","keyword":"undefined"}]},"isAsync":false,"isGenerator":false}},{"kind":"typeAlias","name":"DirKind","location":{"filename":"deno.ts","line":180,"col":2},"jsDoc":"**UNSTABLE**","typeAliasDef":{"tsType":{"repr":"","kind":"union","union":[{"repr":"home","kind":"literal","literal":{"kind":"string","string":"home"}},{"repr":"cache","kind":"literal","literal":{"kind":"string","string":"cache"}},{"repr":"config","kind":"literal","literal":{"kind":"string","string":"config"}},{"repr":"executable","kind":"literal","literal":{"kind":"string","string":"executable"}},{"repr":"data","kind":"literal","literal":{"kind":"string","string":"data"}},{"repr":"data_local","kind":"literal","literal":{"kind":"string","string":"data_local"}},{"repr":"audio","kind":"literal","literal":{"kind":"string","string":"audio"}},{"repr":"desktop","kind":"literal","literal":{"kind":"string","string":"desktop"}},{"repr":"document","kind":"literal","literal":{"kind":"string","string":"document"}},{"repr":"download","kind":"literal","literal":{"kind":"string","string":"download"}},{"repr":"font","kind":"literal","literal":{"kind":"string","string":"font"}},{"repr":"picture","kind":"literal","literal":{"kind":"string","string":"picture"}},{"repr":"public","kind":"literal","literal":{"kind":"string","string":"public"}},{"repr":"template","kind":"literal","literal":{"kind":"string","string":"template"}},{"repr":"tmp","kind":"literal","literal":{"kind":"string","string":"tmp"}},{"repr":"video","kind":"literal","literal":{"kind":"string","string":"video"}}]}}},{"kind":"function","name":"dir","location":{"filename":"deno.ts","line":334,"col":2},"jsDoc":"**UNSTABLE**: Might rename method `dir` and type alias `DirKind`.\n\nReturns the user and platform specific directories.\n\nRequires `allow-env` permission.\n\nReturns `null` if there is no applicable directory or if any other error\noccurs.\n\nArgument values: `\"home\"`, `\"cache\"`, `\"config\"`, `\"executable\"`, `\"data\"`,\n`\"data_local\"`, `\"audio\"`, `\"desktop\"`, `\"document\"`, `\"download\"`,\n`\"font\"`, `\"picture\"`, `\"public\"`, `\"template\"`, `\"tmp\"`, `\"video\"`\n\n`\"cache\"`\n\n|Platform | Value                               | Example                      |\n| ------- | ----------------------------------- | ---------------------------- |\n| Linux   | `$XDG_CACHE_HOME` or `$HOME`/.cache | /home/alice/.cache           |\n| macOS   | `$HOME`/Library/Caches              | /Users/Alice/Library/Caches  |\n| Windows | `{FOLDERID_LocalAppData}`           | C:\\Users\\Alice\\AppData\\Local |\n\n`\"config\"`\n\n|Platform | Value                                 | Example                          |\n| ------- | ------------------------------------- | -------------------------------- |\n| Linux   | `$XDG_CONFIG_HOME` or `$HOME`/.config | /home/alice/.config              |\n| macOS   | `$HOME`/Library/Preferences           | /Users/Alice/Library/Preferences |\n| Windows | `{FOLDERID_RoamingAppData}`           | C:\\Users\\Alice\\AppData\\Roaming   |\n\n`\"executable\"`\n\n|Platform | Value                                                           | Example                |\n| ------- | --------------------------------------------------------------- | -----------------------|\n| Linux   | `XDG_BIN_HOME` or `$XDG_DATA_HOME`/../bin or `$HOME`/.local/bin | /home/alice/.local/bin |\n| macOS   | -                                                               | -                      |\n| Windows | -                                                               | -                      |\n\n`\"data\"`\n\n|Platform | Value                                    | Example                                  |\n| ------- | ---------------------------------------- | ---------------------------------------- |\n| Linux   | `$XDG_DATA_HOME` or `$HOME`/.local/share | /home/alice/.local/share                 |\n| macOS   | `$HOME`/Library/Application Support      | /Users/Alice/Library/Application Support |\n| Windows | `{FOLDERID_RoamingAppData}`              | C:\\Users\\Alice\\AppData\\Roaming           |\n\n`\"data_local\"`\n\n|Platform | Value                                    | Example                                  |\n| ------- | ---------------------------------------- | ---------------------------------------- |\n| Linux   | `$XDG_DATA_HOME` or `$HOME`/.local/share | /home/alice/.local/share                 |\n| macOS   | `$HOME`/Library/Application Support      | /Users/Alice/Library/Application Support |\n| Windows | `{FOLDERID_LocalAppData}`                | C:\\Users\\Alice\\AppData\\Local             |\n\n`\"audio\"`\n\n|Platform | Value              | Example              |\n| ------- | ------------------ | -------------------- |\n| Linux   | `XDG_MUSIC_DIR`    | /home/alice/Music    |\n| macOS   | `$HOME`/Music      | /Users/Alice/Music   |\n| Windows | `{FOLDERID_Music}` | C:\\Users\\Alice\\Music |\n\n`\"desktop\"`\n\n|Platform | Value                | Example                |\n| ------- | -------------------- | ---------------------- |\n| Linux   | `XDG_DESKTOP_DIR`    | /home/alice/Desktop    |\n| macOS   | `$HOME`/Desktop      | /Users/Alice/Desktop   |\n| Windows | `{FOLDERID_Desktop}` | C:\\Users\\Alice\\Desktop |\n\n`\"document\"`\n\n|Platform | Value                  | Example                  |\n| ------- | ---------------------- | ------------------------ |\n| Linux   | `XDG_DOCUMENTS_DIR`    | /home/alice/Documents    |\n| macOS   | `$HOME`/Documents      | /Users/Alice/Documents   |\n| Windows | `{FOLDERID_Documents}` | C:\\Users\\Alice\\Documents |\n\n`\"download\"`\n\n|Platform | Value                  | Example                  |\n| ------- | ---------------------- | ------------------------ |\n| Linux   | `XDG_DOWNLOAD_DIR`     | /home/alice/Downloads    |\n| macOS   | `$HOME`/Downloads      | /Users/Alice/Downloads   |\n| Windows | `{FOLDERID_Downloads}` | C:\\Users\\Alice\\Downloads |\n\n`\"font\"`\n\n|Platform | Value                                                | Example                        |\n| ------- | ---------------------------------------------------- | ------------------------------ |\n| Linux   | `$XDG_DATA_HOME`/fonts or `$HOME`/.local/share/fonts | /home/alice/.local/share/fonts |\n| macOS   | `$HOME/Library/Fonts`                                | /Users/Alice/Library/Fonts     |\n| Windows | –                                                    | –                              |\n\n`\"picture\"`\n\n|Platform | Value                 | Example                 |\n| ------- | --------------------- | ----------------------- |\n| Linux   | `XDG_PICTURES_DIR`    | /home/alice/Pictures    |\n| macOS   | `$HOME`/Pictures      | /Users/Alice/Pictures   |\n| Windows | `{FOLDERID_Pictures}` | C:\\Users\\Alice\\Pictures |\n\n`\"public\"`\n\n|Platform | Value                 | Example             |\n| ------- | --------------------- | ------------------- |\n| Linux   | `XDG_PUBLICSHARE_DIR` | /home/alice/Public  |\n| macOS   | `$HOME`/Public        | /Users/Alice/Public |\n| Windows | `{FOLDERID_Public}`   | C:\\Users\\Public     |\n\n`\"template\"`\n\n|Platform | Value                  | Example                                                    |\n| ------- | ---------------------- | ---------------------------------------------------------- |\n| Linux   | `XDG_TEMPLATES_DIR`    | /home/alice/Templates                                      |\n| macOS   | –                      | –                                                          |\n| Windows | `{FOLDERID_Templates}` | C:\\Users\\Alice\\AppData\\Roaming\\Microsoft\\Windows\\Templates |\n\n`\"tmp\"`\n\n|Platform | Value                  | Example                                                    |\n| ------- | ---------------------- | ---------------------------------------------------------- |\n| Linux   | `TMPDIR`               | /tmp                                                       |\n| macOS   | `TMPDIR`               | /tmp                                                       |\n| Windows | `{TMP}`                | C:\\Users\\Alice\\AppData\\Local\\Temp                          |\n\n`\"video\"`\n\n|Platform | Value               | Example               |\n| ------- | ------------------- | --------------------- |\n| Linux   | `XDG_VIDEOS_DIR`    | /home/alice/Videos    |\n| macOS   | `$HOME`/Movies      | /Users/Alice/Movies   |\n| Windows | `{FOLDERID_Videos}` | C:\\Users\\Alice\\Videos |","functionDef":{"params":[{"name":"kind","tsType":{"repr":"DirKind","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"DirKind"}}}],"returnType":{"repr":"","kind":"union","union":[{"repr":"string","kind":"keyword","keyword":"string"},{"repr":"null","kind":"keyword","keyword":"null"}]},"isAsync":false,"isGenerator":false}},{"kind":"function","name":"execPath","location":{"filename":"deno.ts","line":341,"col":2},"jsDoc":"Returns the path to the current deno executable.\n\nRequires `allow-env` permission.","functionDef":{"params":[],"returnType":{"repr":"string","kind":"keyword","keyword":"string"},"isAsync":false,"isGenerator":false}},{"kind":"function","name":"cwd","location":{"filename":"deno.ts","line":355,"col":2},"jsDoc":"**UNSTABLE**: maybe needs permissions.\n\nReturn a string representing the current working directory.\n\nIf the current directory can be reached via multiple paths (due to symbolic\nlinks), `cwd()` may return any one of them.\n\nThrows `Deno.errors.NotFound` if directory not available.","functionDef":{"params":[],"returnType":{"repr":"string","kind":"keyword","keyword":"string"},"isAsync":false,"isGenerator":false}},{"kind":"function","name":"chdir","location":{"filename":"deno.ts","line":371,"col":2},"jsDoc":"**UNSTABLE**: Currently under evaluation to decide if explicit permission is\nrequired to change the current working directory.\n\nChange the current working directory to the specified path.\n\n      Deno.chdir(\"/home/userA\");\n      Deno.chdir(\"../userB\");\n      Deno.chdir(\"C:\\\\Program Files (x86)\\\\Java\");\n\nThrows `Deno.errors.NotFound` if directory not found.\nThrows `Deno.errors.PermissionDenied` if the user does not have access\nrights","functionDef":{"params":[{"name":"directory","tsType":{"repr":"string","kind":"keyword","keyword":"string"}}],"returnType":{"repr":"void","kind":"keyword","keyword":"void"},"isAsync":false,"isGenerator":false}},{"kind":"function","name":"umask","location":{"filename":"deno.ts","line":379,"col":2},"jsDoc":"**UNSTABLE**: New API. Maybe needs permissions.\n\nIf `mask` is provided, sets the process umask. Always returns what the umask\nwas before the call.","functionDef":{"params":[{"name":"mask","tsType":{"repr":"number","kind":"keyword","keyword":"number"}}],"returnType":{"repr":"number","kind":"keyword","keyword":"number"},"isAsync":false,"isGenerator":false}},{"kind":"variable","name":"EOF","location":{"filename":"deno.ts","line":382,"col":2},"jsDoc":"**UNSTABLE**: might move to `Deno.symbols`.","variableDef":{"tsType":{"repr":"","kind":"typeOperator","typeOperator":{"operator":"unique","tsType":{"repr":"symbol","kind":"keyword","keyword":"symbol"}}},"kind":"const"}},{"kind":"typeAlias","name":"EOF","location":{"filename":"deno.ts","line":383,"col":2},"jsDoc":null,"typeAliasDef":{"tsType":{"repr":"EOF","kind":"typeQuery","typeQuery":"EOF"}}},{"kind":"enum","name":"SeekMode","location":{"filename":"deno.ts","line":388,"col":2},"jsDoc":"**UNSTABLE**: might remove `\"SEEK_\"` prefix. Might not use all-caps.","enumDef":{"members":[{"name":"SEEK_START"},{"name":"SEEK_CURRENT"},{"name":"SEEK_END"}]}},{"kind":"interface","name":"Reader","location":{"filename":"deno.ts","line":395,"col":2},"jsDoc":"**UNSTABLE**: might make `Reader` into iterator of some sort.","interfaceDef":{"methods":[{"name":"read","location":{"filename":"deno.ts","line":414,"col":4},"jsDoc":"Reads up to `p.byteLength` bytes into `p`. It resolves to the number of\nbytes read (`0` < `n` <= `p.byteLength`) and rejects if any error\nencountered. Even if `read()` resolves to `n` < `p.byteLength`, it may\nuse all of `p` as scratch space during the call. If some data is\navailable but not `p.byteLength` bytes, `read()` conventionally resolves\nto what is available instead of waiting for more.\n\nWhen `read()` encounters end-of-file condition, it resolves to\n`Deno.EOF` symbol.\n\nWhen `read()` encounters an error, it rejects with an error.\n\nCallers should always process the `n` > `0` bytes returned before\nconsidering the `EOF`. Doing so correctly handles I/O errors that happen\nafter reading some bytes and also both of the allowed EOF behaviors.\n\nImplementations should not retain a reference to `p`.","params":[{"name":"p","tsType":{"repr":"Uint8Array","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"Uint8Array"}}}],"returnType":{"repr":"Promise","kind":"typeRef","typeRef":{"typeParams":[{"repr":"","kind":"union","union":[{"repr":"number","kind":"keyword","keyword":"number"},{"repr":"EOF","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"EOF"}}]}],"typeName":"Promise"}}}],"properties":[],"callSignatures":[]}},{"kind":"interface","name":"SyncReader","location":{"filename":"deno.ts","line":417,"col":2},"jsDoc":null,"interfaceDef":{"methods":[{"name":"readSync","location":{"filename":"deno.ts","line":436,"col":4},"jsDoc":"Reads up to `p.byteLength` bytes into `p`. It resolves to the number\nof bytes read (`0` < `n` <= `p.byteLength`) and rejects if any error\nencountered. Even if `read()` returns `n` < `p.byteLength`, it may use\nall of `p` as scratch space during the call. If some data is available\nbut not `p.byteLength` bytes, `read()` conventionally returns what is\navailable instead of waiting for more.\n\nWhen `readSync()` encounters end-of-file condition, it returns `Deno.EOF`\nsymbol.\n\nWhen `readSync()` encounters an error, it throws with an error.\n\nCallers should always process the `n` > `0` bytes returned before\nconsidering the `EOF`. Doing so correctly handles I/O errors that happen\nafter reading some bytes and also both of the allowed EOF behaviors.\n\nImplementations should not retain a reference to `p`.","params":[{"name":"p","tsType":{"repr":"Uint8Array","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"Uint8Array"}}}],"returnType":{"repr":"","kind":"union","union":[{"repr":"number","kind":"keyword","keyword":"number"},{"repr":"EOF","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"EOF"}}]}}],"properties":[],"callSignatures":[]}},{"kind":"interface","name":"Writer","location":{"filename":"deno.ts","line":439,"col":2},"jsDoc":null,"interfaceDef":{"methods":[{"name":"write","location":{"filename":"deno.ts","line":449,"col":4},"jsDoc":"Writes `p.byteLength` bytes from `p` to the underlying data stream. It\nresolves to the number of bytes written from `p` (`0` <= `n` <=\n`p.byteLength`) or reject with the error encountered that caused the\nwrite to stop early. `write()` must reject with a non-null error if\nwould resolve to `n` < `p.byteLength`. `write()` must not modify the\nslice data, even temporarily.\n\nImplementations should not retain a reference to `p`.","params":[{"name":"p","tsType":{"repr":"Uint8Array","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"Uint8Array"}}}],"returnType":{"repr":"Promise","kind":"typeRef","typeRef":{"typeParams":[{"repr":"number","kind":"keyword","keyword":"number"}],"typeName":"Promise"}}}],"properties":[],"callSignatures":[]}},{"kind":"interface","name":"SyncWriter","location":{"filename":"deno.ts","line":452,"col":2},"jsDoc":null,"interfaceDef":{"methods":[{"name":"writeSync","location":{"filename":"deno.ts","line":462,"col":4},"jsDoc":"Writes `p.byteLength` bytes from `p` to the underlying data\nstream. It returns the number of bytes written from `p` (`0` <= `n`\n<= `p.byteLength`) and any error encountered that caused the write to\nstop early. `writeSync()` must throw a non-null error if it returns `n` <\n`p.byteLength`. `writeSync()` must not modify the slice data, even\ntemporarily.\n\nImplementations should not retain a reference to `p`.","params":[{"name":"p","tsType":{"repr":"Uint8Array","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"Uint8Array"}}}],"returnType":{"repr":"number","kind":"keyword","keyword":"number"}}],"properties":[],"callSignatures":[]}},{"kind":"interface","name":"Closer","location":{"filename":"deno.ts","line":465,"col":2},"jsDoc":null,"interfaceDef":{"methods":[{"name":"close","location":{"filename":"deno.ts","line":466,"col":4},"jsDoc":null,"params":[],"returnType":{"repr":"void","kind":"keyword","keyword":"void"}}],"properties":[],"callSignatures":[]}},{"kind":"interface","name":"Seeker","location":{"filename":"deno.ts","line":469,"col":2},"jsDoc":null,"interfaceDef":{"methods":[{"name":"seek","location":{"filename":"deno.ts","line":481,"col":4},"jsDoc":"Seek sets the offset for the next `read()` or `write()` to offset,\ninterpreted according to `whence`: `SEEK_START` means relative to the\nstart of the file, `SEEK_CURRENT` means relative to the current offset,\nand `SEEK_END` means relative to the end. Seek resolves to the new offset\nrelative to the start of the file.\n\nSeeking to an offset before the start of the file is an error. Seeking to\nany positive offset is legal, but the behavior of subsequent I/O\noperations on the underlying object is implementation-dependent.\nIt returns the number of cursor position.","params":[{"name":"offset","tsType":{"repr":"number","kind":"keyword","keyword":"number"}},{"name":"whence","tsType":{"repr":"SeekMode","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"SeekMode"}}}],"returnType":{"repr":"Promise","kind":"typeRef","typeRef":{"typeParams":[{"repr":"number","kind":"keyword","keyword":"number"}],"typeName":"Promise"}}}],"properties":[],"callSignatures":[]}},{"kind":"interface","name":"SyncSeeker","location":{"filename":"deno.ts","line":484,"col":2},"jsDoc":null,"interfaceDef":{"methods":[{"name":"seekSync","location":{"filename":"deno.ts","line":494,"col":4},"jsDoc":"Seek sets the offset for the next `readSync()` or `writeSync()` to\noffset, interpreted according to `whence`: `SEEK_START` means relative\nto the start of the file, `SEEK_CURRENT` means relative to the current\noffset, and `SEEK_END` means relative to the end.\n\nSeeking to an offset before the start of the file is an error. Seeking to\nany positive offset is legal, but the behavior of subsequent I/O\noperations on the underlying object is implementation-dependent.","params":[{"name":"offset","tsType":{"repr":"number","kind":"keyword","keyword":"number"}},{"name":"whence","tsType":{"repr":"SeekMode","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"SeekMode"}}}],"returnType":{"repr":"number","kind":"keyword","keyword":"number"}}],"properties":[],"callSignatures":[]}},{"kind":"interface","name":"ReadCloser","location":{"filename":"deno.ts","line":497,"col":2},"jsDoc":null,"interfaceDef":{"methods":[],"properties":[],"callSignatures":[]}},{"kind":"interface","name":"WriteCloser","location":{"filename":"deno.ts","line":498,"col":2},"jsDoc":null,"interfaceDef":{"methods":[],"properties":[],"callSignatures":[]}},{"kind":"interface","name":"ReadSeeker","location":{"filename":"deno.ts","line":499,"col":2},"jsDoc":null,"interfaceDef":{"methods":[],"properties":[],"callSignatures":[]}},{"kind":"interface","name":"WriteSeeker","location":{"filename":"deno.ts","line":500,"col":2},"jsDoc":null,"interfaceDef":{"methods":[],"properties":[],"callSignatures":[]}},{"kind":"interface","name":"ReadWriteCloser","location":{"filename":"deno.ts","line":501,"col":2},"jsDoc":null,"interfaceDef":{"methods":[],"properties":[],"callSignatures":[]}},{"kind":"interface","name":"ReadWriteSeeker","location":{"filename":"deno.ts","line":502,"col":2},"jsDoc":null,"interfaceDef":{"methods":[],"properties":[],"callSignatures":[]}},{"kind":"function","name":"copy","location":{"filename":"deno.ts","line":511,"col":2},"jsDoc":"Copies from `src` to `dst` until either `EOF` is reached on `src` or an\nerror occurs. It resolves to the number of bytes copied or rejects with\nthe first error encountered while copying.\n\nBecause `copy()` is defined to read from `src` until `EOF`, it does not\ntreat an `EOF` from `read()` as an error to be reported.","functionDef":{"params":[{"name":"dst","tsType":{"repr":"Writer","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"Writer"}}},{"name":"src","tsType":{"repr":"Reader","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"Reader"}}}],"returnType":{"repr":"Promise","kind":"typeRef","typeRef":{"typeParams":[{"repr":"number","kind":"keyword","keyword":"number"}],"typeName":"Promise"}},"isAsync":false,"isGenerator":false}},{"kind":"function","name":"toAsyncIterator","location":{"filename":"deno.ts","line":519,"col":2},"jsDoc":"Turns `r` into async iterator.\n\n     for await (const chunk of toAsyncIterator(reader)) {\n       console.log(chunk);\n     }","functionDef":{"params":[{"name":"r","tsType":{"repr":"Reader","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"Reader"}}}],"returnType":{"repr":"AsyncIterableIterator","kind":"typeRef","typeRef":{"typeParams":[{"repr":"Uint8Array","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"Uint8Array"}}],"typeName":"AsyncIterableIterator"}},"isAsync":false,"isGenerator":false}},{"kind":"function","name":"openSync","location":{"filename":"deno.ts","line":529,"col":2},"jsDoc":"Synchronously open a file and return an instance of the `File` object.\n\n      const file = Deno.openSync(\"/foo/bar.txt\", { read: true, write: true });\n\nRequires `allow-read` and `allow-write` permissions depending on openMode.","functionDef":{"params":[{"name":"path","tsType":{"repr":"string","kind":"keyword","keyword":"string"}},{"name":"options","tsType":{"repr":"OpenOptions","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"OpenOptions"}}}],"returnType":{"repr":"File","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"File"}},"isAsync":false,"isGenerator":false}},{"kind":"function","name":"openSync","location":{"filename":"deno.ts","line":537,"col":2},"jsDoc":"Synchronously open a file and return an instance of the `File` object.\n\n      const file = Deno.openSync(\"/foo/bar.txt\", \"r\");\n\nRequires `allow-read` and `allow-write` permissions depending on openMode.","functionDef":{"params":[{"name":"path","tsType":{"repr":"string","kind":"keyword","keyword":"string"}},{"name":"openMode","tsType":{"repr":"OpenMode","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"OpenMode"}}}],"returnType":{"repr":"File","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"File"}},"isAsync":false,"isGenerator":false}},{"kind":"function","name":"open","location":{"filename":"deno.ts","line":545,"col":2},"jsDoc":"Open a file and resolve to an instance of the `File` object.\n\n    const file = await Deno.open(\"/foo/bar.txt\", { read: true, write: true });\n\nRequires `allow-read` and `allow-write` permissions depending on openMode.","functionDef":{"params":[{"name":"path","tsType":{"repr":"string","kind":"keyword","keyword":"string"}},{"name":"options","tsType":{"repr":"OpenOptions","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"OpenOptions"}}}],"returnType":{"repr":"Promise","kind":"typeRef","typeRef":{"typeParams":[{"repr":"File","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"File"}}],"typeName":"Promise"}},"isAsync":false,"isGenerator":false}},{"kind":"function","name":"open","location":{"filename":"deno.ts","line":553,"col":2},"jsDoc":"Open a file and resolves to an instance of `Deno.File`.\n\n    const file = await Deno.open(\"/foo/bar.txt, \"w+\");\n\nRequires `allow-read` and `allow-write` permissions depending on openMode.","functionDef":{"params":[{"name":"path","tsType":{"repr":"string","kind":"keyword","keyword":"string"}},{"name":"openMode","tsType":{"repr":"OpenMode","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"OpenMode"}}}],"returnType":{"repr":"Promise","kind":"typeRef","typeRef":{"typeParams":[{"repr":"File","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"File"}}],"typeName":"Promise"}},"isAsync":false,"isGenerator":false}},{"kind":"function","name":"createSync","location":{"filename":"deno.ts","line":562,"col":2},"jsDoc":"Creates a file if none exists or truncates an existing file and returns\n an instance of `Deno.File`.\n\n      const file = Deno.createSync(\"/foo/bar.txt\");\n\nRequires `allow-read` and `allow-write` permissions.","functionDef":{"params":[{"name":"path","tsType":{"repr":"string","kind":"keyword","keyword":"string"}}],"returnType":{"repr":"File","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"File"}},"isAsync":false,"isGenerator":false}},{"kind":"function","name":"create","location":{"filename":"deno.ts","line":571,"col":2},"jsDoc":"Creates a file if none exists or truncates an existing file and resolves to\n an instance of `Deno.File`.\n\n      const file = await Deno.create(\"/foo/bar.txt\");\n\nRequires `allow-read` and `allow-write` permissions.","functionDef":{"params":[{"name":"path","tsType":{"repr":"string","kind":"keyword","keyword":"string"}}],"returnType":{"repr":"Promise","kind":"typeRef","typeRef":{"typeParams":[{"repr":"File","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"File"}}],"typeName":"Promise"}},"isAsync":false,"isGenerator":false}},{"kind":"function","name":"readSync","location":{"filename":"deno.ts","line":582,"col":2},"jsDoc":"Synchronously read from a file ID into an array buffer.\n\nReturns `number | EOF` for the operation.\n\n     const file = Deno.openSync(\"/foo/bar.txt\");\n     const buf = new Uint8Array(100);\n     const nread = Deno.readSync(file.rid, buf);\n     const text = new TextDecoder().decode(buf);","functionDef":{"params":[{"name":"rid","tsType":{"repr":"number","kind":"keyword","keyword":"number"}},{"name":"p","tsType":{"repr":"Uint8Array","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"Uint8Array"}}}],"returnType":{"repr":"","kind":"union","union":[{"repr":"number","kind":"keyword","keyword":"number"},{"repr":"EOF","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"EOF"}}]},"isAsync":false,"isGenerator":false}},{"kind":"function","name":"read","location":{"filename":"deno.ts","line":593,"col":2},"jsDoc":"Read from a resource ID into an array buffer.\n\nResolves to the `number | EOF` for the operation.\n\n      const file = await Deno.open(\"/foo/bar.txt\");\n      const buf = new Uint8Array(100);\n      const nread = await Deno.read(file.rid, buf);\n      const text = new TextDecoder().decode(buf);","functionDef":{"params":[{"name":"rid","tsType":{"repr":"number","kind":"keyword","keyword":"number"}},{"name":"p","tsType":{"repr":"Uint8Array","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"Uint8Array"}}}],"returnType":{"repr":"Promise","kind":"typeRef","typeRef":{"typeParams":[{"repr":"","kind":"union","union":[{"repr":"number","kind":"keyword","keyword":"number"},{"repr":"EOF","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"EOF"}}]}],"typeName":"Promise"}},"isAsync":false,"isGenerator":false}},{"kind":"function","name":"writeSync","location":{"filename":"deno.ts","line":604,"col":2},"jsDoc":"Synchronously write to the resource ID the contents of the array buffer.\n\nResolves to the number of bytes written.\n\n      const encoder = new TextEncoder();\n      const data = encoder.encode(\"Hello world\\n\");\n      const file = Deno.openSync(\"/foo/bar.txt\");\n      Deno.writeSync(file.rid, data);","functionDef":{"params":[{"name":"rid","tsType":{"repr":"number","kind":"keyword","keyword":"number"}},{"name":"p","tsType":{"repr":"Uint8Array","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"Uint8Array"}}}],"returnType":{"repr":"number","kind":"keyword","keyword":"number"},"isAsync":false,"isGenerator":false}},{"kind":"function","name":"write","location":{"filename":"deno.ts","line":615,"col":2},"jsDoc":"Write to the resource ID the contents of the array buffer.\n\nResolves to the number of bytes written.\n\n     const encoder = new TextEncoder();\n     const data = encoder.encode(\"Hello world\\n\");\n     const file = await Deno.open(\"/foo/bar.txt\");\n     await Deno.write(file.rid, data);","functionDef":{"params":[{"name":"rid","tsType":{"repr":"number","kind":"keyword","keyword":"number"}},{"name":"p","tsType":{"repr":"Uint8Array","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"Uint8Array"}}}],"returnType":{"repr":"Promise","kind":"typeRef","typeRef":{"typeParams":[{"repr":"number","kind":"keyword","keyword":"number"}],"typeName":"Promise"}},"isAsync":false,"isGenerator":false}},{"kind":"function","name":"seekSync","location":{"filename":"deno.ts","line":622,"col":2},"jsDoc":"Synchronously seek a file ID to the given offset under mode given by `whence`.\n\n      const file = Deno.openSync(\"/foo/bar.txt\");\n      Deno.seekSync(file.rid, 0, 0);","functionDef":{"params":[{"name":"rid","tsType":{"repr":"number","kind":"keyword","keyword":"number"}},{"name":"offset","tsType":{"repr":"number","kind":"keyword","keyword":"number"}},{"name":"whence","tsType":{"repr":"SeekMode","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"SeekMode"}}}],"returnType":{"repr":"number","kind":"keyword","keyword":"number"},"isAsync":false,"isGenerator":false}},{"kind":"function","name":"seek","location":{"filename":"deno.ts","line":633,"col":2},"jsDoc":"Seek a file ID to the given offset under mode given by `whence`.\n\n     const file = await Deno.open(\"/foo/bar.txt\");\n     await Deno.seek(file.rid, 0, 0);","functionDef":{"params":[{"name":"rid","tsType":{"repr":"number","kind":"keyword","keyword":"number"}},{"name":"offset","tsType":{"repr":"number","kind":"keyword","keyword":"number"}},{"name":"whence","tsType":{"repr":"SeekMode","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"SeekMode"}}}],"returnType":{"repr":"Promise","kind":"typeRef","typeRef":{"typeParams":[{"repr":"number","kind":"keyword","keyword":"number"}],"typeName":"Promise"}},"isAsync":false,"isGenerator":false}},{"kind":"function","name":"close","location":{"filename":"deno.ts","line":640,"col":2},"jsDoc":"Close the given resource ID.","functionDef":{"params":[{"name":"rid","tsType":{"repr":"number","kind":"keyword","keyword":"number"}}],"returnType":{"repr":"void","kind":"keyword","keyword":"void"},"isAsync":false,"isGenerator":false}},{"kind":"class","name":"File","location":{"filename":"deno.ts","line":643,"col":2},"jsDoc":"The Deno abstraction for reading and writing files.","classDef":{"isAbstract":false,"constructors":[{"jsDoc":null,"accessibility":null,"name":"constructor","params":[{"name":"rid","tsType":{"repr":"number","kind":"keyword","keyword":"number"}}],"location":{"filename":"deno.ts","line":653,"col":4}}],"properties":[{"jsDoc":null,"tsType":{"repr":"number","kind":"keyword","keyword":"number"},"readonly":true,"accessibility":null,"isAbstract":false,"isStatic":false,"name":"rid","location":{"filename":"deno.ts","line":652,"col":4}}],"methods":[{"jsDoc":null,"accessibility":null,"isAbstract":false,"isStatic":false,"name":"write","kind":"method","functionDef":{"params":[{"name":"p","tsType":{"repr":"Uint8Array","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"Uint8Array"}}}],"returnType":{"repr":"Promise","kind":"typeRef","typeRef":{"typeParams":[{"repr":"number","kind":"keyword","keyword":"number"}],"typeName":"Promise"}},"isAsync":false,"isGenerator":false},"location":{"filename":"deno.ts","line":654,"col":4}},{"jsDoc":null,"accessibility":null,"isAbstract":false,"isStatic":false,"name":"writeSync","kind":"method","functionDef":{"params":[{"name":"p","tsType":{"repr":"Uint8Array","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"Uint8Array"}}}],"returnType":{"repr":"number","kind":"keyword","keyword":"number"},"isAsync":false,"isGenerator":false},"location":{"filename":"deno.ts","line":655,"col":4}},{"jsDoc":null,"accessibility":null,"isAbstract":false,"isStatic":false,"name":"read","kind":"method","functionDef":{"params":[{"name":"p","tsType":{"repr":"Uint8Array","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"Uint8Array"}}}],"returnType":{"repr":"Promise","kind":"typeRef","typeRef":{"typeParams":[{"repr":"","kind":"union","union":[{"repr":"number","kind":"keyword","keyword":"number"},{"repr":"EOF","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"EOF"}}]}],"typeName":"Promise"}},"isAsync":false,"isGenerator":false},"location":{"filename":"deno.ts","line":656,"col":4}},{"jsDoc":null,"accessibility":null,"isAbstract":false,"isStatic":false,"name":"readSync","kind":"method","functionDef":{"params":[{"name":"p","tsType":{"repr":"Uint8Array","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"Uint8Array"}}}],"returnType":{"repr":"","kind":"union","union":[{"repr":"number","kind":"keyword","keyword":"number"},{"repr":"EOF","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"EOF"}}]},"isAsync":false,"isGenerator":false},"location":{"filename":"deno.ts","line":657,"col":4}},{"jsDoc":null,"accessibility":null,"isAbstract":false,"isStatic":false,"name":"seek","kind":"method","functionDef":{"params":[{"name":"offset","tsType":{"repr":"number","kind":"keyword","keyword":"number"}},{"name":"whence","tsType":{"repr":"SeekMode","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"SeekMode"}}}],"returnType":{"repr":"Promise","kind":"typeRef","typeRef":{"typeParams":[{"repr":"number","kind":"keyword","keyword":"number"}],"typeName":"Promise"}},"isAsync":false,"isGenerator":false},"location":{"filename":"deno.ts","line":658,"col":4}},{"jsDoc":null,"accessibility":null,"isAbstract":false,"isStatic":false,"name":"seekSync","kind":"method","functionDef":{"params":[{"name":"offset","tsType":{"repr":"number","kind":"keyword","keyword":"number"}},{"name":"whence","tsType":{"repr":"SeekMode","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"SeekMode"}}}],"returnType":{"repr":"number","kind":"keyword","keyword":"number"},"isAsync":false,"isGenerator":false},"location":{"filename":"deno.ts","line":659,"col":4}},{"jsDoc":null,"accessibility":null,"isAbstract":false,"isStatic":false,"name":"close","kind":"method","functionDef":{"params":[],"returnType":{"repr":"void","kind":"keyword","keyword":"void"},"isAsync":false,"isGenerator":false},"location":{"filename":"deno.ts","line":660,"col":4}}]}},{"kind":"variable","name":"stdin","location":{"filename":"deno.ts","line":664,"col":2},"jsDoc":"An instance of `Deno.File` for `stdin`.","variableDef":{"tsType":{"repr":"File","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"File"}},"kind":"const"}},{"kind":"variable","name":"stdout","location":{"filename":"deno.ts","line":666,"col":2},"jsDoc":"An instance of `Deno.File` for `stdout`.","variableDef":{"tsType":{"repr":"File","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"File"}},"kind":"const"}},{"kind":"variable","name":"stderr","location":{"filename":"deno.ts","line":668,"col":2},"jsDoc":"An instance of `Deno.File` for `stderr`.","variableDef":{"tsType":{"repr":"File","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"File"}},"kind":"const"}},{"kind":"interface","name":"OpenOptions","location":{"filename":"deno.ts","line":670,"col":2},"jsDoc":null,"interfaceDef":{"methods":[],"properties":[{"name":"read","location":{"filename":"deno.ts","line":673,"col":4},"jsDoc":"Sets the option for read access. This option, when `true`, means that the\nfile should be read-able if opened.","params":[],"computed":false,"optional":true,"tsType":{"repr":"boolean","kind":"keyword","keyword":"boolean"}},{"name":"write","location":{"filename":"deno.ts","line":678,"col":4},"jsDoc":"Sets the option for write access. This option, when `true`, means that\nthe file should be write-able if opened. If the file already exists,\nany write calls on it will overwrite its contents, by default without\ntruncating it.","params":[],"computed":false,"optional":true,"tsType":{"repr":"boolean","kind":"keyword","keyword":"boolean"}},{"name":"append","location":{"filename":"deno.ts","line":683,"col":4},"jsDoc":"Sets the option for the append mode. This option, when `true`, means that\nwrites will append to a file instead of overwriting previous contents.\nNote that setting `{ write: true, append: true }` has the same effect as\nsetting only `{ append: true }`.","params":[],"computed":false,"optional":true,"tsType":{"repr":"boolean","kind":"keyword","keyword":"boolean"}},{"name":"truncate","location":{"filename":"deno.ts","line":688,"col":4},"jsDoc":"Sets the option for truncating a previous file. If a file is\nsuccessfully opened with this option set it will truncate the file to `0`\nsize if it already exists. The file must be opened with write access\nfor truncate to work.","params":[],"computed":false,"optional":true,"tsType":{"repr":"boolean","kind":"keyword","keyword":"boolean"}},{"name":"create","location":{"filename":"deno.ts","line":692,"col":4},"jsDoc":"Sets the option to allow creating a new file, if one doesn't already\nexist at the specified path. Requires write or append access to be\nused.","params":[],"computed":false,"optional":true,"tsType":{"repr":"boolean","kind":"keyword","keyword":"boolean"}},{"name":"createNew","location":{"filename":"deno.ts","line":697,"col":4},"jsDoc":"Defaults to `false`. If set to `true`, no file, directory, or symlink is\nallowed to exist at the target location. Requires write or append\naccess to be used. When createNew is set to `true`, create and truncate\nare ignored.","params":[],"computed":false,"optional":true,"tsType":{"repr":"boolean","kind":"keyword","keyword":"boolean"}},{"name":"mode","location":{"filename":"deno.ts","line":701,"col":4},"jsDoc":"Permissions to use if creating the file (defaults to `0o666`, before\nthe process's umask).\nIgnored on Windows.","params":[],"computed":false,"optional":true,"tsType":{"repr":"number","kind":"keyword","keyword":"number"}}],"callSignatures":[]}},{"kind":"typeAlias","name":"OpenMode","location":{"filename":"deno.ts","line":717,"col":2},"jsDoc":"A set of string literals which specify how to open a file.\n\n|Value |Description                                                                                       |\n|------|--------------------------------------------------------------------------------------------------|\n|`\"r\"` |Read-only. Default. Starts at beginning of file.                                                  |\n|`\"r+\"`|Read-write. Start at beginning of file.                                                           |\n|`\"w\"` |Write-only. Opens and truncates existing file or creates new one for writing only.                |\n|`\"w+\"`|Read-write. Opens and truncates existing file or creates new one for writing and reading.         |\n|`\"a\"` |Write-only. Opens existing file or creates new one. Each write appends content to the end of file.|\n|`\"a+\"`|Read-write. Behaves like `\"a\"` and allows to read from file.                                      |\n|`\"x\"` |Write-only. Exclusive create - creates new file only if one doesn't exist already.                |\n|`\"x+\"`|Read-write. Behaves like `x` and allows reading from file.                                        |","typeAliasDef":{"tsType":{"repr":"","kind":"union","union":[{"repr":"r","kind":"literal","literal":{"kind":"string","string":"r"}},{"repr":"r+","kind":"literal","literal":{"kind":"string","string":"r+"}},{"repr":"w","kind":"literal","literal":{"kind":"string","string":"w"}},{"repr":"w+","kind":"literal","literal":{"kind":"string","string":"w+"}},{"repr":"a","kind":"literal","literal":{"kind":"string","string":"a"}},{"repr":"a+","kind":"literal","literal":{"kind":"string","string":"a+"}},{"repr":"x","kind":"literal","literal":{"kind":"string","string":"x"}},{"repr":"x+","kind":"literal","literal":{"kind":"string","string":"x+"}}]}}},{"kind":"function","name":"isatty","location":{"filename":"deno.ts","line":724,"col":2},"jsDoc":"**UNSTABLE**: newly added API\n\n Check if a given resource is TTY.","functionDef":{"params":[{"name":"rid","tsType":{"repr":"number","kind":"keyword","keyword":"number"}}],"returnType":{"repr":"boolean","kind":"keyword","keyword":"boolean"},"isAsync":false,"isGenerator":false}},{"kind":"function","name":"setRaw","location":{"filename":"deno.ts","line":729,"col":2},"jsDoc":"**UNSTABLE**: newly added API\n\n Set TTY to be under raw mode or not.","functionDef":{"params":[{"name":"rid","tsType":{"repr":"number","kind":"keyword","keyword":"number"}},{"name":"mode","tsType":{"repr":"boolean","kind":"keyword","keyword":"boolean"}}],"returnType":{"repr":"void","kind":"keyword","keyword":"void"},"isAsync":false,"isGenerator":false}},{"kind":"class","name":"Buffer","location":{"filename":"deno.ts","line":736,"col":2},"jsDoc":"A variable-sized buffer of bytes with `read()` and `write()` methods.\n\nBased on [Go Buffer](https://golang.org/pkg/bytes/#Buffer).","classDef":{"isAbstract":false,"constructors":[{"jsDoc":null,"accessibility":null,"name":"constructor","params":[{"name":"ab","tsType":{"repr":"ArrayBuffer","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"ArrayBuffer"}}}],"location":{"filename":"deno.ts","line":743,"col":4}}],"properties":[{"jsDoc":null,"tsType":null,"readonly":false,"accessibility":"private","isAbstract":false,"isStatic":false,"name":"buf","location":{"filename":"deno.ts","line":737,"col":4}},{"jsDoc":null,"tsType":null,"readonly":false,"accessibility":"private","isAbstract":false,"isStatic":false,"name":"off","location":{"filename":"deno.ts","line":738,"col":4}},{"jsDoc":null,"tsType":null,"readonly":false,"accessibility":"private","isAbstract":false,"isStatic":false,"name":"_tryGrowByReslice","location":{"filename":"deno.ts","line":739,"col":4}},{"jsDoc":null,"tsType":null,"readonly":false,"accessibility":"private","isAbstract":false,"isStatic":false,"name":"_reslice","location":{"filename":"deno.ts","line":740,"col":4}},{"jsDoc":null,"tsType":null,"readonly":false,"accessibility":"private","isAbstract":false,"isStatic":false,"name":"_grow","location":{"filename":"deno.ts","line":741,"col":4}},{"jsDoc":"A read only number of bytes of the unread portion of the buffer.","tsType":{"repr":"number","kind":"keyword","keyword":"number"},"readonly":true,"accessibility":null,"isAbstract":false,"isStatic":false,"name":"length","location":{"filename":"deno.ts","line":761,"col":4}},{"jsDoc":"The read only capacity of the buffer's underlying byte slice, that is,\nthe total space allocated for the buffer's data.","tsType":{"repr":"number","kind":"keyword","keyword":"number"},"readonly":true,"accessibility":null,"isAbstract":false,"isStatic":false,"name":"capacity","location":{"filename":"deno.ts","line":764,"col":4}}],"methods":[{"jsDoc":"Returns a slice holding the unread portion of the buffer.\n\nThe slice is valid for use only until the next buffer modification (that\nis, only until the next call to a method like `read()`, `write()`,\n`reset()`, or `truncate()`). The slice aliases the buffer content at\nleast until the next buffer modification, so immediate changes to the\nslice will affect the result of future reads.","accessibility":null,"isAbstract":false,"isStatic":false,"name":"bytes","kind":"method","functionDef":{"params":[],"returnType":{"repr":"Uint8Array","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"Uint8Array"}},"isAsync":false,"isGenerator":false},"location":{"filename":"deno.ts","line":751,"col":4}},{"jsDoc":"Returns the contents of the unread portion of the buffer as a `string`.\n\n**Warning**: if multibyte characters are present when data is flowing\nthrough the buffer, this method may result in incorrect strings due to a\ncharacter being split.","accessibility":null,"isAbstract":false,"isStatic":false,"name":"toString","kind":"method","functionDef":{"params":[],"returnType":{"repr":"string","kind":"keyword","keyword":"string"},"isAsync":false,"isGenerator":false},"location":{"filename":"deno.ts","line":757,"col":4}},{"jsDoc":"Returns whether the unread portion of the buffer is empty.","accessibility":null,"isAbstract":false,"isStatic":false,"name":"empty","kind":"method","functionDef":{"params":[],"returnType":{"repr":"boolean","kind":"keyword","keyword":"boolean"},"isAsync":false,"isGenerator":false},"location":{"filename":"deno.ts","line":759,"col":4}},{"jsDoc":"Discards all but the first `n` unread bytes from the buffer but\ncontinues to use the same allocated storage. It throws if `n` is\nnegative or greater than the length of the buffer.","accessibility":null,"isAbstract":false,"isStatic":false,"name":"truncate","kind":"method","functionDef":{"params":[{"name":"n","tsType":{"repr":"number","kind":"keyword","keyword":"number"}}],"returnType":{"repr":"void","kind":"keyword","keyword":"void"},"isAsync":false,"isGenerator":false},"location":{"filename":"deno.ts","line":768,"col":4}},{"jsDoc":"Resets the buffer to be empty, but it retains the underlying storage for\nuse by future writes. `.reset()` is the same as `.truncate(0)`.","accessibility":null,"isAbstract":false,"isStatic":false,"name":"reset","kind":"method","functionDef":{"params":[],"returnType":{"repr":"void","kind":"keyword","keyword":"void"},"isAsync":false,"isGenerator":false},"location":{"filename":"deno.ts","line":771,"col":4}},{"jsDoc":"Reads the next `p.length` bytes from the buffer or until the buffer is\ndrained. Returns the number of bytes read. If the buffer has no data to\nreturn, the return is `Deno.EOF`.","accessibility":null,"isAbstract":false,"isStatic":false,"name":"readSync","kind":"method","functionDef":{"params":[{"name":"p","tsType":{"repr":"Uint8Array","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"Uint8Array"}}}],"returnType":{"repr":"","kind":"union","union":[{"repr":"number","kind":"keyword","keyword":"number"},{"repr":"EOF","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"EOF"}}]},"isAsync":false,"isGenerator":false},"location":{"filename":"deno.ts","line":775,"col":4}},{"jsDoc":"Reads the next `p.length` bytes from the buffer or until the buffer is\ndrained. Resolves to the number of bytes read. If the buffer has no\ndata to return, resolves to `Deno.EOF`.","accessibility":null,"isAbstract":false,"isStatic":false,"name":"read","kind":"method","functionDef":{"params":[{"name":"p","tsType":{"repr":"Uint8Array","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"Uint8Array"}}}],"returnType":{"repr":"Promise","kind":"typeRef","typeRef":{"typeParams":[{"repr":"","kind":"union","union":[{"repr":"number","kind":"keyword","keyword":"number"},{"repr":"EOF","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"EOF"}}]}],"typeName":"Promise"}},"isAsync":false,"isGenerator":false},"location":{"filename":"deno.ts","line":779,"col":4}},{"jsDoc":null,"accessibility":null,"isAbstract":false,"isStatic":false,"name":"writeSync","kind":"method","functionDef":{"params":[{"name":"p","tsType":{"repr":"Uint8Array","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"Uint8Array"}}}],"returnType":{"repr":"number","kind":"keyword","keyword":"number"},"isAsync":false,"isGenerator":false},"location":{"filename":"deno.ts","line":780,"col":4}},{"jsDoc":null,"accessibility":null,"isAbstract":false,"isStatic":false,"name":"write","kind":"method","functionDef":{"params":[{"name":"p","tsType":{"repr":"Uint8Array","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"Uint8Array"}}}],"returnType":{"repr":"Promise","kind":"typeRef","typeRef":{"typeParams":[{"repr":"number","kind":"keyword","keyword":"number"}],"typeName":"Promise"}},"isAsync":false,"isGenerator":false},"location":{"filename":"deno.ts","line":781,"col":4}},{"jsDoc":"Grows the buffer's capacity, if necessary, to guarantee space for\nanother `n` bytes. After `.grow(n)`, at least `n` bytes can be written to\nthe buffer without another allocation. If `n` is negative, `.grow()` will\nthrow. If the buffer can't grow it will throw an error.\n\nBased on Go Lang's\n[Buffer.Grow](https://golang.org/pkg/bytes/#Buffer.Grow).","accessibility":null,"isAbstract":false,"isStatic":false,"name":"grow","kind":"method","functionDef":{"params":[{"name":"n","tsType":{"repr":"number","kind":"keyword","keyword":"number"}}],"returnType":{"repr":"void","kind":"keyword","keyword":"void"},"isAsync":false,"isGenerator":false},"location":{"filename":"deno.ts","line":789,"col":4}},{"jsDoc":"Reads data from `r` until `Deno.EOF` and appends it to the buffer,\ngrowing the buffer as needed. It resolves to the number of bytes read.\nIf the buffer becomes too large, `.readFrom()` will reject with an error.\n\nBased on Go Lang's\n[Buffer.ReadFrom](https://golang.org/pkg/bytes/#Buffer.ReadFrom).","accessibility":null,"isAbstract":false,"isStatic":false,"name":"readFrom","kind":"method","functionDef":{"params":[{"name":"r","tsType":{"repr":"Reader","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"Reader"}}}],"returnType":{"repr":"Promise","kind":"typeRef","typeRef":{"typeParams":[{"repr":"number","kind":"keyword","keyword":"number"}],"typeName":"Promise"}},"isAsync":false,"isGenerator":false},"location":{"filename":"deno.ts","line":796,"col":4}},{"jsDoc":"Reads data from `r` until `Deno.EOF` and appends it to the buffer,\ngrowing the buffer as needed. It returns the number of bytes read. If the\nbuffer becomes too large, `.readFromSync()` will throw an error.\n\nBased on Go Lang's\n[Buffer.ReadFrom](https://golang.org/pkg/bytes/#Buffer.ReadFrom).","accessibility":null,"isAbstract":false,"isStatic":false,"name":"readFromSync","kind":"method","functionDef":{"params":[{"name":"r","tsType":{"repr":"SyncReader","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"SyncReader"}}}],"returnType":{"repr":"number","kind":"keyword","keyword":"number"},"isAsync":false,"isGenerator":false},"location":{"filename":"deno.ts","line":803,"col":4}}]}},{"kind":"function","name":"readAll","location":{"filename":"deno.ts","line":808,"col":2},"jsDoc":"Read `r` until `Deno.EOF` and resolves to the content as\n`Uint8Array`.","functionDef":{"params":[{"name":"r","tsType":{"repr":"Reader","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"Reader"}}}],"returnType":{"repr":"Promise","kind":"typeRef","typeRef":{"typeParams":[{"repr":"Uint8Array","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"Uint8Array"}}],"typeName":"Promise"}},"isAsync":false,"isGenerator":false}},{"kind":"function","name":"readAllSync","location":{"filename":"deno.ts","line":811,"col":2},"jsDoc":"Read `r` until `Deno.EOF` and returns the content as `Uint8Array`.","functionDef":{"params":[{"name":"r","tsType":{"repr":"SyncReader","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"SyncReader"}}}],"returnType":{"repr":"Uint8Array","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"Uint8Array"}},"isAsync":false,"isGenerator":false}},{"kind":"function","name":"writeAll","location":{"filename":"deno.ts","line":814,"col":2},"jsDoc":"Write all the content of `arr` to `w`.","functionDef":{"params":[{"name":"w","tsType":{"repr":"Writer","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"Writer"}}},{"name":"arr","tsType":{"repr":"Uint8Array","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"Uint8Array"}}}],"returnType":{"repr":"Promise","kind":"typeRef","typeRef":{"typeParams":[{"repr":"void","kind":"keyword","keyword":"void"}],"typeName":"Promise"}},"isAsync":false,"isGenerator":false}},{"kind":"function","name":"writeAllSync","location":{"filename":"deno.ts","line":817,"col":2},"jsDoc":"Synchronously write all the content of `arr` to `w`.","functionDef":{"params":[{"name":"w","tsType":{"repr":"SyncWriter","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"SyncWriter"}}},{"name":"arr","tsType":{"repr":"Uint8Array","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"Uint8Array"}}}],"returnType":{"repr":"void","kind":"keyword","keyword":"void"},"isAsync":false,"isGenerator":false}},{"kind":"interface","name":"MkdirOptions","location":{"filename":"deno.ts","line":821,"col":2},"jsDoc":null,"interfaceDef":{"methods":[],"properties":[{"name":"recursive","location":{"filename":"deno.ts","line":827,"col":4},"jsDoc":"Defaults to `false`. If set to `true`, means that any intermediate\ndirectories will also be created (as with the shell command `mkdir -p`).\nIntermediate directories are created with the same permissions.\nWhen recursive is set to `true`, succeeds silently (without changing any\npermissions) if a directory already exists at the path.","params":[],"computed":false,"optional":true,"tsType":{"repr":"boolean","kind":"keyword","keyword":"boolean"}},{"name":"mode","location":{"filename":"deno.ts","line":831,"col":4},"jsDoc":"Permissions to use when creating the directory (defaults to `0o777`,\nbefore the process's umask).\nIgnored on Windows.","params":[],"computed":false,"optional":true,"tsType":{"repr":"number","kind":"keyword","keyword":"number"}}],"callSignatures":[]}},{"kind":"function","name":"mkdirSync","location":{"filename":"deno.ts","line":840,"col":2},"jsDoc":"Synchronously creates a new directory with the specified path.\n\n      Deno.mkdirSync(\"new_dir\");\n      Deno.mkdirSync(\"nested/directories\", { recursive: true });\n\nRequires `allow-write` permission.","functionDef":{"params":[{"name":"path","tsType":{"repr":"string","kind":"keyword","keyword":"string"}},{"name":"options","tsType":{"repr":"MkdirOptions","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"MkdirOptions"}}}],"returnType":{"repr":"void","kind":"keyword","keyword":"void"},"isAsync":false,"isGenerator":false}},{"kind":"function","name":"mkdirSync","location":{"filename":"deno.ts","line":843,"col":2},"jsDoc":"@deprecated","functionDef":{"params":[{"name":"path","tsType":{"repr":"string","kind":"keyword","keyword":"string"}},{"name":"recursive","tsType":{"repr":"boolean","kind":"keyword","keyword":"boolean"}},{"name":"mode","tsType":{"repr":"number","kind":"keyword","keyword":"number"}}],"returnType":{"repr":"void","kind":"keyword","keyword":"void"},"isAsync":false,"isGenerator":false}},{"kind":"function","name":"mkdir","location":{"filename":"deno.ts","line":855,"col":2},"jsDoc":"Creates a new directory with the specified path.\n\n      await Deno.mkdir(\"new_dir\");\n      await Deno.mkdir(\"nested/directories\", { recursive: true });\n\nRequires `allow-write` permission.","functionDef":{"params":[{"name":"path","tsType":{"repr":"string","kind":"keyword","keyword":"string"}},{"name":"options","tsType":{"repr":"MkdirOptions","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"MkdirOptions"}}}],"returnType":{"repr":"Promise","kind":"typeRef","typeRef":{"typeParams":[{"repr":"void","kind":"keyword","keyword":"void"}],"typeName":"Promise"}},"isAsync":false,"isGenerator":false}},{"kind":"function","name":"mkdir","location":{"filename":"deno.ts","line":858,"col":2},"jsDoc":"@deprecated","functionDef":{"params":[{"name":"path","tsType":{"repr":"string","kind":"keyword","keyword":"string"}},{"name":"recursive","tsType":{"repr":"boolean","kind":"keyword","keyword":"boolean"}},{"name":"mode","tsType":{"repr":"number","kind":"keyword","keyword":"number"}}],"returnType":{"repr":"Promise","kind":"typeRef","typeRef":{"typeParams":[{"repr":"void","kind":"keyword","keyword":"void"}],"typeName":"Promise"}},"isAsync":false,"isGenerator":false}},{"kind":"interface","name":"MakeTempOptions","location":{"filename":"deno.ts","line":866,"col":2},"jsDoc":null,"interfaceDef":{"methods":[],"properties":[{"name":"dir","location":{"filename":"deno.ts","line":869,"col":4},"jsDoc":"Directory where the temporary directory should be created (defaults to\nthe env variable TMPDIR, or the system's default, usually /tmp).","params":[],"computed":false,"optional":true,"tsType":{"repr":"string","kind":"keyword","keyword":"string"}},{"name":"prefix","location":{"filename":"deno.ts","line":872,"col":4},"jsDoc":"String that should precede the random portion of the temporary\ndirectory's name.","params":[],"computed":false,"optional":true,"tsType":{"repr":"string","kind":"keyword","keyword":"string"}},{"name":"suffix","location":{"filename":"deno.ts","line":875,"col":4},"jsDoc":"String that should follow the random portion of the temporary\ndirectory's name.","params":[],"computed":false,"optional":true,"tsType":{"repr":"string","kind":"keyword","keyword":"string"}}],"callSignatures":[]}},{"kind":"function","name":"makeTempDirSync","location":{"filename":"deno.ts","line":893,"col":2},"jsDoc":"Synchronously creates a new temporary directory in the directory `dir`,\nits name beginning with `prefix` and ending with `suffix`.\n\nIt returns the full path to the newly created directory.\n\nIf `dir` is unspecified, uses the default directory for temporary files.\nMultiple programs calling this function simultaneously will create different\ndirectories. It is the caller's responsibility to remove the directory when\nno longer needed.\n\n      const tempDirName0 = Deno.makeTempDirSync();\n      const tempDirName1 = Deno.makeTempDirSync({ prefix: 'my_temp' });\n\nRequires `allow-write` permission.","functionDef":{"params":[{"name":"options","tsType":{"repr":"MakeTempOptions","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"MakeTempOptions"}}}],"returnType":{"repr":"string","kind":"keyword","keyword":"string"},"isAsync":false,"isGenerator":false}},{"kind":"function","name":"makeTempDir","location":{"filename":"deno.ts","line":910,"col":2},"jsDoc":"Creates a new temporary directory in the directory `dir`, its name\nbeginning with `prefix` and ending with `suffix`.\n\nIt resolves to the full path to the newly created directory.\n\nIf `dir` is unspecified, uses the default directory for temporary files.\nMultiple programs calling this function simultaneously will create different\ndirectories. It is the caller's responsibility to remove the directory when\nno longer needed.\n\n      const tempDirName0 = await Deno.makeTempDir();\n      const tempDirName1 = await Deno.makeTempDir({ prefix: 'my_temp' });\n\nRequires `allow-write` permission.","functionDef":{"params":[{"name":"options","tsType":{"repr":"MakeTempOptions","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"MakeTempOptions"}}}],"returnType":{"repr":"Promise","kind":"typeRef","typeRef":{"typeParams":[{"repr":"string","kind":"keyword","keyword":"string"}],"typeName":"Promise"}},"isAsync":false,"isGenerator":false}},{"kind":"function","name":"makeTempFileSync","location":{"filename":"deno.ts","line":926,"col":2},"jsDoc":"Synchronously creates a new temporary file in the directory `dir`, its name\nbeginning with `prefix` and ending with `suffix`.\n\nIt returns the full path to the newly created file.\n\nIf `dir` is unspecified, uses the default directory for temporary files.\nMultiple programs calling this function simultaneously will create different\nfiles. It is the caller's responsibility to remove the file when\nno longer needed.\n\n      const tempFileName0 = Deno.makeTempFileSync();\n      const tempFileName1 = Deno.makeTempFileSync({ prefix: 'my_temp' });\n\nRequires `allow-write` permission.","functionDef":{"params":[{"name":"options","tsType":{"repr":"MakeTempOptions","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"MakeTempOptions"}}}],"returnType":{"repr":"string","kind":"keyword","keyword":"string"},"isAsync":false,"isGenerator":false}},{"kind":"function","name":"makeTempFile","location":{"filename":"deno.ts","line":942,"col":2},"jsDoc":"Creates a new temporary file in the directory `dir`, its name\nbeginning with `prefix` and ending with `suffix`.\n\nIt resolves to the full path to the newly created file.\n\nIf `dir` is unspecified, uses the default directory for temporary files.\nMultiple programs calling this function simultaneously will create different\nfiles. It is the caller's responsibility to remove the file when\nno longer needed.\n\n      const tempFileName0 = await Deno.makeTempFile();\n      const tempFileName1 = await Deno.makeTempFile({ prefix: 'my_temp' });\n\nRequires `allow-write` permission.","functionDef":{"params":[{"name":"options","tsType":{"repr":"MakeTempOptions","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"MakeTempOptions"}}}],"returnType":{"repr":"Promise","kind":"typeRef","typeRef":{"typeParams":[{"repr":"string","kind":"keyword","keyword":"string"}],"typeName":"Promise"}},"isAsync":false,"isGenerator":false}},{"kind":"function","name":"chmodSync","location":{"filename":"deno.ts","line":956,"col":2},"jsDoc":"Synchronously changes the permission of a specific file/directory of\nspecified path.  Ignores the process's umask.\n\n      Deno.chmodSync(\"/path/to/file\", 0o666);\n\nFor a full description, see [chmod](#chmod)\n\nNOTE: This API currently throws on Windows\n\nRequires `allow-write` permission.","functionDef":{"params":[{"name":"path","tsType":{"repr":"string","kind":"keyword","keyword":"string"}},{"name":"mode","tsType":{"repr":"number","kind":"keyword","keyword":"number"}}],"returnType":{"repr":"void","kind":"keyword","keyword":"void"},"isAsync":false,"isGenerator":false}},{"kind":"function","name":"chmod","location":{"filename":"deno.ts","line":984,"col":2},"jsDoc":"Changes the permission of a specific file/directory of specified path.\nIgnores the process's umask.\n\n      await Deno.chmod(\"/path/to/file\", 0o666);\n\nThe mode is a sequence of 3 octal numbers.  The first/left-most number\nspecifies the permissions for the owner.  The second number specifies the\npermissions for the group. The last/right-most number specifies the\npermissions for others.  For example, with a mode of 0o764, the owner (7) can\nread/write/execute, the group (6) can read/write and everyone else (4) can\nread only.\n\n| Number | Description |\n| ------ | ----------- |\n| 7      | read, write, and execute |\n| 6      | read and write |\n| 5      | read and execute |\n| 4      | read only |\n| 3      | write and execute |\n| 2      | write only |\n| 1      | execute only |\n| 0      | no permission |\n\nNOTE: This API currently throws on Windows\n\nRequires `allow-write` permission.","functionDef":{"params":[{"name":"path","tsType":{"repr":"string","kind":"keyword","keyword":"string"}},{"name":"mode","tsType":{"repr":"number","kind":"keyword","keyword":"number"}}],"returnType":{"repr":"Promise","kind":"typeRef","typeRef":{"typeParams":[{"repr":"void","kind":"keyword","keyword":"void"}],"typeName":"Promise"}},"isAsync":false,"isGenerator":false}},{"kind":"function","name":"chownSync","location":{"filename":"deno.ts","line":997,"col":2},"jsDoc":"Synchronously change owner of a regular file or directory. Linux/Mac OS\nonly at the moment.\n\nRequires `allow-write` permission.\n\n@param path path to the file\n@param uid user id of the new owner\n@param gid group id of the new owner","functionDef":{"params":[{"name":"path","tsType":{"repr":"string","kind":"keyword","keyword":"string"}},{"name":"uid","tsType":{"repr":"number","kind":"keyword","keyword":"number"}},{"name":"gid","tsType":{"repr":"number","kind":"keyword","keyword":"number"}}],"returnType":{"repr":"void","kind":"keyword","keyword":"void"},"isAsync":false,"isGenerator":false}},{"kind":"function","name":"chown","location":{"filename":"deno.ts","line":1008,"col":2},"jsDoc":"Change owner of a regular file or directory. Linux/Mac OS only at the\nmoment.\n\nRequires `allow-write` permission.\n\n@param path path to the file\n@param uid user id of the new owner\n@param gid group id of the new owner","functionDef":{"params":[{"name":"path","tsType":{"repr":"string","kind":"keyword","keyword":"string"}},{"name":"uid","tsType":{"repr":"number","kind":"keyword","keyword":"number"}},{"name":"gid","tsType":{"repr":"number","kind":"keyword","keyword":"number"}}],"returnType":{"repr":"Promise","kind":"typeRef","typeRef":{"typeParams":[{"repr":"void","kind":"keyword","keyword":"void"}],"typeName":"Promise"}},"isAsync":false,"isGenerator":false}},{"kind":"function","name":"utimeSync","location":{"filename":"deno.ts","line":1021,"col":2},"jsDoc":"**UNSTABLE**: needs investigation into high precision time.\n\nSynchronously changes the access and modification times of a file system\nobject referenced by `path`. Given times are either in seconds (UNIX epoch\ntime) or as `Date` objects.\n\n      Deno.utimeSync(\"myfile.txt\", 1556495550, new Date());\n\nRequires `allow-write` permission.","functionDef":{"params":[{"name":"path","tsType":{"repr":"string","kind":"keyword","keyword":"string"}},{"name":"atime","tsType":{"repr":"","kind":"union","union":[{"repr":"number","kind":"keyword","keyword":"number"},{"repr":"Date","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"Date"}}]}},{"name":"mtime","tsType":{"repr":"","kind":"union","union":[{"repr":"number","kind":"keyword","keyword":"number"},{"repr":"Date","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"Date"}}]}}],"returnType":{"repr":"void","kind":"keyword","keyword":"void"},"isAsync":false,"isGenerator":false}},{"kind":"function","name":"utime","location":{"filename":"deno.ts","line":1036,"col":2},"jsDoc":"**UNSTABLE**: needs investigation into high precision time.\n\nChanges the access and modification times of a file system object\nreferenced by `path`. Given times are either in seconds (UNIX epoch time)\nor as `Date` objects.\n\n      await Deno.utime(\"myfile.txt\", 1556495550, new Date());\n\nRequires `allow-write` permission.","functionDef":{"params":[{"name":"path","tsType":{"repr":"string","kind":"keyword","keyword":"string"}},{"name":"atime","tsType":{"repr":"","kind":"union","union":[{"repr":"number","kind":"keyword","keyword":"number"},{"repr":"Date","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"Date"}}]}},{"name":"mtime","tsType":{"repr":"","kind":"union","union":[{"repr":"number","kind":"keyword","keyword":"number"},{"repr":"Date","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"Date"}}]}}],"returnType":{"repr":"Promise","kind":"typeRef","typeRef":{"typeParams":[{"repr":"void","kind":"keyword","keyword":"void"}],"typeName":"Promise"}},"isAsync":false,"isGenerator":false}},{"kind":"interface","name":"RemoveOptions","location":{"filename":"deno.ts","line":1044,"col":2},"jsDoc":null,"interfaceDef":{"methods":[],"properties":[{"name":"recursive","location":{"filename":"deno.ts","line":1047,"col":4},"jsDoc":"Defaults to `false`. If set to `true`, path will be removed even if\nit's a non-empty directory.","params":[],"computed":false,"optional":true,"tsType":{"repr":"boolean","kind":"keyword","keyword":"boolean"}}],"callSignatures":[]}},{"kind":"function","name":"removeSync","location":{"filename":"deno.ts","line":1057,"col":2},"jsDoc":"Synchronously removes the named file or directory. Throws error if\npermission denied, path not found, or path is a non-empty directory and\nthe `recursive` option isn't set to `true`.\n\n      Deno.removeSync(\"/path/to/dir/or/file\", { recursive: false });\n\nRequires `allow-write` permission.","functionDef":{"params":[{"name":"path","tsType":{"repr":"string","kind":"keyword","keyword":"string"}},{"name":"options","tsType":{"repr":"RemoveOptions","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"RemoveOptions"}}}],"returnType":{"repr":"void","kind":"keyword","keyword":"void"},"isAsync":false,"isGenerator":false}},{"kind":"function","name":"remove","location":{"filename":"deno.ts","line":1066,"col":2},"jsDoc":"Removes the named file or directory. Throws error if permission denied,\npath not found, or path is a non-empty directory and the `recursive`\noption isn't set to `true`.\n\n      await Deno.remove(\"/path/to/dir/or/file\", { recursive: false });\n\nRequires `allow-write` permission.","functionDef":{"params":[{"name":"path","tsType":{"repr":"string","kind":"keyword","keyword":"string"}},{"name":"options","tsType":{"repr":"RemoveOptions","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"RemoveOptions"}}}],"returnType":{"repr":"Promise","kind":"typeRef","typeRef":{"typeParams":[{"repr":"void","kind":"keyword","keyword":"void"}],"typeName":"Promise"}},"isAsync":false,"isGenerator":false}},{"kind":"function","name":"renameSync","location":{"filename":"deno.ts","line":1078,"col":2},"jsDoc":"Synchronously renames (moves) `oldpath` to `newpath`. If `newpath` already\nexists and is not a directory, `renameSync()` replaces it. OS-specific\nrestrictions may apply when `oldpath` and `newpath` are in different\ndirectories.\n\n      Deno.renameSync(\"old/path\", \"new/path\");\n\nRequires `allow-read` and `allow-write` permissions.","functionDef":{"params":[{"name":"oldpath","tsType":{"repr":"string","kind":"keyword","keyword":"string"}},{"name":"newpath","tsType":{"repr":"string","kind":"keyword","keyword":"string"}}],"returnType":{"repr":"void","kind":"keyword","keyword":"void"},"isAsync":false,"isGenerator":false}},{"kind":"function","name":"rename","location":{"filename":"deno.ts","line":1087,"col":2},"jsDoc":"Renames (moves) `oldpath` to `newpath`. If `newpath` already exists and is\nnot a directory, `rename()` replaces it. OS-specific restrictions may apply\nwhen `oldpath` and `newpath` are in different directories.\n\n      await Deno.rename(\"old/path\", \"new/path\");\n\nRequires `allow-read` and `allow-write`.","functionDef":{"params":[{"name":"oldpath","tsType":{"repr":"string","kind":"keyword","keyword":"string"}},{"name":"newpath","tsType":{"repr":"string","kind":"keyword","keyword":"string"}}],"returnType":{"repr":"Promise","kind":"typeRef","typeRef":{"typeParams":[{"repr":"void","kind":"keyword","keyword":"void"}],"typeName":"Promise"}},"isAsync":false,"isGenerator":false}},{"kind":"function","name":"readFileSync","location":{"filename":"deno.ts","line":1098,"col":2},"jsDoc":"Reads and returns the entire contents of a file.\n\n      const decoder = new TextDecoder(\"utf-8\");\n      const data = Deno.readFileSync(\"hello.txt\");\n      console.log(decoder.decode(data));\n\nRequires `allow-read` permission.","functionDef":{"params":[{"name":"path","tsType":{"repr":"string","kind":"keyword","keyword":"string"}}],"returnType":{"repr":"Uint8Array","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"Uint8Array"}},"isAsync":false,"isGenerator":false}},{"kind":"function","name":"readFile","location":{"filename":"deno.ts","line":1107,"col":2},"jsDoc":"Reads and resolves to the entire contents of a file.\n\n      const decoder = new TextDecoder(\"utf-8\");\n      const data = await Deno.readFile(\"hello.txt\");\n      console.log(decoder.decode(data));\n\nRequires `allow-read` permission.","functionDef":{"params":[{"name":"path","tsType":{"repr":"string","kind":"keyword","keyword":"string"}}],"returnType":{"repr":"Promise","kind":"typeRef","typeRef":{"typeParams":[{"repr":"Uint8Array","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"Uint8Array"}}],"typeName":"Promise"}},"isAsync":false,"isGenerator":false}},{"kind":"interface","name":"FileInfo","location":{"filename":"deno.ts","line":1114,"col":2},"jsDoc":"A FileInfo describes a file and is returned by `stat`, `lstat`,\n`statSync`, `lstatSync`. A list of FileInfo is returned by `readdir`,\n`readdirSync`.","interfaceDef":{"methods":[{"name":"isFile","location":{"filename":"deno.ts","line":1170,"col":4},"jsDoc":"Returns whether this is info for a regular file. This result is mutually\nexclusive to `FileInfo.isDirectory` and `FileInfo.isSymlink`.","params":[],"returnType":{"repr":"boolean","kind":"keyword","keyword":"boolean"}},{"name":"isDirectory","location":{"filename":"deno.ts","line":1173,"col":4},"jsDoc":"Returns whether this is info for a regular directory. This result is\nmutually exclusive to `FileInfo.isFile` and `FileInfo.isSymlink`.","params":[],"returnType":{"repr":"boolean","kind":"keyword","keyword":"boolean"}},{"name":"isSymlink","location":{"filename":"deno.ts","line":1176,"col":4},"jsDoc":"Returns whether this is info for a symlink. This result is\nmutually exclusive to `FileInfo.isFile` and `FileInfo.isDirectory`.","params":[],"returnType":{"repr":"boolean","kind":"keyword","keyword":"boolean"}}],"properties":[{"name":"size","location":{"filename":"deno.ts","line":1116,"col":4},"jsDoc":"The size of the file, in bytes.","params":[],"computed":false,"optional":false,"tsType":{"repr":"number","kind":"keyword","keyword":"number"}},{"name":"modified","location":{"filename":"deno.ts","line":1120,"col":4},"jsDoc":"The last modification time of the file. This corresponds to the `mtime`\nfield from `stat` on Linux/Mac OS and `ftLastWriteTime` on Windows. This\nmay not be available on all platforms.","params":[],"computed":false,"optional":false,"tsType":{"repr":"","kind":"union","union":[{"repr":"number","kind":"keyword","keyword":"number"},{"repr":"null","kind":"keyword","keyword":"null"}]}},{"name":"accessed","location":{"filename":"deno.ts","line":1124,"col":4},"jsDoc":"The last access time of the file. This corresponds to the `atime`\nfield from `stat` on Unix and `ftLastAccessTime` on Windows. This may not\nbe available on all platforms.","params":[],"computed":false,"optional":false,"tsType":{"repr":"","kind":"union","union":[{"repr":"number","kind":"keyword","keyword":"number"},{"repr":"null","kind":"keyword","keyword":"null"}]}},{"name":"created","location":{"filename":"deno.ts","line":1128,"col":4},"jsDoc":"The last access time of the file. This corresponds to the `birthtime`\nfield from `stat` on Mac/BSD and `ftCreationTime` on Windows. This may not\nbe available on all platforms.","params":[],"computed":false,"optional":false,"tsType":{"repr":"","kind":"union","union":[{"repr":"number","kind":"keyword","keyword":"number"},{"repr":"null","kind":"keyword","keyword":"null"}]}},{"name":"name","location":{"filename":"deno.ts","line":1130,"col":4},"jsDoc":"The file or directory name.","params":[],"computed":false,"optional":false,"tsType":{"repr":"","kind":"union","union":[{"repr":"string","kind":"keyword","keyword":"string"},{"repr":"null","kind":"keyword","keyword":"null"}]}},{"name":"dev","location":{"filename":"deno.ts","line":1134,"col":4},"jsDoc":"ID of the device containing the file.\n\n_Linux/Mac OS only._","params":[],"computed":false,"optional":false,"tsType":{"repr":"","kind":"union","union":[{"repr":"number","kind":"keyword","keyword":"number"},{"repr":"null","kind":"keyword","keyword":"null"}]}},{"name":"ino","location":{"filename":"deno.ts","line":1138,"col":4},"jsDoc":"Inode number.\n\n_Linux/Mac OS only._","params":[],"computed":false,"optional":false,"tsType":{"repr":"","kind":"union","union":[{"repr":"number","kind":"keyword","keyword":"number"},{"repr":"null","kind":"keyword","keyword":"null"}]}},{"name":"mode","location":{"filename":"deno.ts","line":1143,"col":4},"jsDoc":"**UNSTABLE**: Match behavior with Go on Windows for `mode`.\n\nThe underlying raw `st_mode` bits that contain the standard Unix\npermissions for this file/directory.","params":[],"computed":false,"optional":false,"tsType":{"repr":"","kind":"union","union":[{"repr":"number","kind":"keyword","keyword":"number"},{"repr":"null","kind":"keyword","keyword":"null"}]}},{"name":"nlink","location":{"filename":"deno.ts","line":1147,"col":4},"jsDoc":"Number of hard links pointing to this file.\n\n_Linux/Mac OS only._","params":[],"computed":false,"optional":false,"tsType":{"repr":"","kind":"union","union":[{"repr":"number","kind":"keyword","keyword":"number"},{"repr":"null","kind":"keyword","keyword":"null"}]}},{"name":"uid","location":{"filename":"deno.ts","line":1151,"col":4},"jsDoc":"User ID of the owner of this file.\n\n_Linux/Mac OS only._","params":[],"computed":false,"optional":false,"tsType":{"repr":"","kind":"union","union":[{"repr":"number","kind":"keyword","keyword":"number"},{"repr":"null","kind":"keyword","keyword":"null"}]}},{"name":"gid","location":{"filename":"deno.ts","line":1155,"col":4},"jsDoc":"User ID of the owner of this file.\n\n_Linux/Mac OS only._","params":[],"computed":false,"optional":false,"tsType":{"repr":"","kind":"union","union":[{"repr":"number","kind":"keyword","keyword":"number"},{"repr":"null","kind":"keyword","keyword":"null"}]}},{"name":"rdev","location":{"filename":"deno.ts","line":1159,"col":4},"jsDoc":"Device ID of this file.\n\n_Linux/Mac OS only._","params":[],"computed":false,"optional":false,"tsType":{"repr":"","kind":"union","union":[{"repr":"number","kind":"keyword","keyword":"number"},{"repr":"null","kind":"keyword","keyword":"null"}]}},{"name":"blksize","location":{"filename":"deno.ts","line":1163,"col":4},"jsDoc":"Blocksize for filesystem I/O.\n\n_Linux/Mac OS only._","params":[],"computed":false,"optional":false,"tsType":{"repr":"","kind":"union","union":[{"repr":"number","kind":"keyword","keyword":"number"},{"repr":"null","kind":"keyword","keyword":"null"}]}},{"name":"blocks","location":{"filename":"deno.ts","line":1167,"col":4},"jsDoc":"Number of blocks allocated to the file, in 512-byte units.\n\n_Linux/Mac OS only._","params":[],"computed":false,"optional":false,"tsType":{"repr":"","kind":"union","union":[{"repr":"number","kind":"keyword","keyword":"number"},{"repr":"null","kind":"keyword","keyword":"null"}]}}],"callSignatures":[]}},{"kind":"function","name":"realpathSync","location":{"filename":"deno.ts","line":1186,"col":2},"jsDoc":"Returns absolute normalized path with, symbolic links resolved.\n\n      const realPath = Deno.realpathSync(\"./some/path\");\n\nRequires `allow-read` permission.","functionDef":{"params":[{"name":"path","tsType":{"repr":"string","kind":"keyword","keyword":"string"}}],"returnType":{"repr":"string","kind":"keyword","keyword":"string"},"isAsync":false,"isGenerator":false}},{"kind":"function","name":"realpath","location":{"filename":"deno.ts","line":1193,"col":2},"jsDoc":"Resolves to the absolute normalized path, with symbolic links resolved.\n\n      const realPath = await Deno.realpath(\"./some/path\");\n\nRequires `allow-read` permission.","functionDef":{"params":[{"name":"path","tsType":{"repr":"string","kind":"keyword","keyword":"string"}}],"returnType":{"repr":"Promise","kind":"typeRef","typeRef":{"typeParams":[{"repr":"string","kind":"keyword","keyword":"string"}],"typeName":"Promise"}},"isAsync":false,"isGenerator":false}},{"kind":"function","name":"readdirSync","location":{"filename":"deno.ts","line":1205,"col":2},"jsDoc":"UNSTABLE: need to consider streaming case\n\nSynchronously reads the directory given by `path` and returns an array of\n`Deno.FileInfo`.\n\n      const files = Deno.readdirSync(\"/\");\n\nRequires `allow-read` permission.","functionDef":{"params":[{"name":"path","tsType":{"repr":"string","kind":"keyword","keyword":"string"}}],"returnType":{"repr":"","kind":"array","array":{"repr":"FileInfo","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"FileInfo"}}},"isAsync":false,"isGenerator":false}},{"kind":"function","name":"readdir","location":{"filename":"deno.ts","line":1214,"col":2},"jsDoc":"UNSTABLE: Maybe need to return an `AsyncIterable`.\n\nReads the directory given by `path` and resolves to an array of `Deno.FileInfo`.\n\n      const files = await Deno.readdir(\"/\");\n\nRequires `allow-read` permission.","functionDef":{"params":[{"name":"path","tsType":{"repr":"string","kind":"keyword","keyword":"string"}}],"returnType":{"repr":"Promise","kind":"typeRef","typeRef":{"typeParams":[{"repr":"","kind":"array","array":{"repr":"FileInfo","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"FileInfo"}}}],"typeName":"Promise"}},"isAsync":false,"isGenerator":false}},{"kind":"function","name":"copyFileSync","location":{"filename":"deno.ts","line":1226,"col":2},"jsDoc":"Synchronously copies the contents and permissions of one file to another\nspecified path, by default creating a new file if needed, else overwriting.\nFails if target path is a directory or is unwritable.\n\n      Deno.copyFileSync(\"from.txt\", \"to.txt\");\n\nRequires `allow-read` permission on fromPath.\nRequires `allow-write` permission on toPath.","functionDef":{"params":[{"name":"fromPath","tsType":{"repr":"string","kind":"keyword","keyword":"string"}},{"name":"toPath","tsType":{"repr":"string","kind":"keyword","keyword":"string"}}],"returnType":{"repr":"void","kind":"keyword","keyword":"void"},"isAsync":false,"isGenerator":false}},{"kind":"function","name":"copyFile","location":{"filename":"deno.ts","line":1236,"col":2},"jsDoc":"Copies the contents and permissions of one file to another specified path,\nby default creating a new file if needed, else overwriting. Fails if target\npath is a directory or is unwritable.\n\n      await Deno.copyFile(\"from.txt\", \"to.txt\");\n\nRequires `allow-read` permission on fromPath.\nRequires `allow-write` permission on toPath.","functionDef":{"params":[{"name":"fromPath","tsType":{"repr":"string","kind":"keyword","keyword":"string"}},{"name":"toPath","tsType":{"repr":"string","kind":"keyword","keyword":"string"}}],"returnType":{"repr":"Promise","kind":"typeRef","typeRef":{"typeParams":[{"repr":"void","kind":"keyword","keyword":"void"}],"typeName":"Promise"}},"isAsync":false,"isGenerator":false}},{"kind":"function","name":"readlinkSync","location":{"filename":"deno.ts","line":1245,"col":2},"jsDoc":"Returns the destination of the named symbolic link.\n\n      const targetPath = Deno.readlinkSync(\"symlink/path\");\n\nRequires `allow-read` permission.","functionDef":{"params":[{"name":"path","tsType":{"repr":"string","kind":"keyword","keyword":"string"}}],"returnType":{"repr":"string","kind":"keyword","keyword":"string"},"isAsync":false,"isGenerator":false}},{"kind":"function","name":"readlink","location":{"filename":"deno.ts","line":1252,"col":2},"jsDoc":"Resolves to the destination of the named symbolic link.\n\n      const targetPath = await Deno.readlink(\"symlink/path\");\n\nRequires `allow-read` permission.","functionDef":{"params":[{"name":"path","tsType":{"repr":"string","kind":"keyword","keyword":"string"}}],"returnType":{"repr":"Promise","kind":"typeRef","typeRef":{"typeParams":[{"repr":"string","kind":"keyword","keyword":"string"}],"typeName":"Promise"}},"isAsync":false,"isGenerator":false}},{"kind":"function","name":"lstat","location":{"filename":"deno.ts","line":1263,"col":2},"jsDoc":"Resolves to a `Deno.FileInfo` for the specified `path`. If `path` is a\nsymlink, information for the symlink will be returned.\n\n      const fileInfo = await Deno.lstat(\"hello.txt\");\n      assert(fileInfo.isFile());\n\nRequires `allow-read` permission.","functionDef":{"params":[{"name":"path","tsType":{"repr":"string","kind":"keyword","keyword":"string"}}],"returnType":{"repr":"Promise","kind":"typeRef","typeRef":{"typeParams":[{"repr":"FileInfo","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"FileInfo"}}],"typeName":"Promise"}},"isAsync":false,"isGenerator":false}},{"kind":"function","name":"lstatSync","location":{"filename":"deno.ts","line":1272,"col":2},"jsDoc":"Synchronously returns a `Deno.FileInfo` for the specified `path`. If\n`path` is a symlink, information for the symlink will be returned.\n\n      const fileInfo = Deno.lstatSync(\"hello.txt\");\n      assert(fileInfo.isFile());\n\nRequires `allow-read` permission.","functionDef":{"params":[{"name":"path","tsType":{"repr":"string","kind":"keyword","keyword":"string"}}],"returnType":{"repr":"FileInfo","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"FileInfo"}},"isAsync":false,"isGenerator":false}},{"kind":"function","name":"stat","location":{"filename":"deno.ts","line":1281,"col":2},"jsDoc":"Resolves to a `Deno.FileInfo` for the specified `path`. Will always\nfollow symlinks.\n\n      const fileInfo = await Deno.stat(\"hello.txt\");\n      assert(fileInfo.isFile());\n\nRequires `allow-read` permission.","functionDef":{"params":[{"name":"path","tsType":{"repr":"string","kind":"keyword","keyword":"string"}}],"returnType":{"repr":"Promise","kind":"typeRef","typeRef":{"typeParams":[{"repr":"FileInfo","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"FileInfo"}}],"typeName":"Promise"}},"isAsync":false,"isGenerator":false}},{"kind":"function","name":"statSync","location":{"filename":"deno.ts","line":1290,"col":2},"jsDoc":"Synchronously returns a `Deno.FileInfo` for the specified `path`. Will\nalways follow symlinks.\n\n      const fileInfo = Deno.statSync(\"hello.txt\");\n      assert(fileInfo.isFile());\n\nRequires `allow-read` permission.","functionDef":{"params":[{"name":"path","tsType":{"repr":"string","kind":"keyword","keyword":"string"}}],"returnType":{"repr":"FileInfo","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"FileInfo"}},"isAsync":false,"isGenerator":false}},{"kind":"function","name":"linkSync","location":{"filename":"deno.ts","line":1299,"col":2},"jsDoc":"Creates `newpath` as a hard link to `oldpath`.\n\n      Deno.linkSync(\"old/name\", \"new/name\");\n\nRequires `allow-read` and `allow-write` permissions.","functionDef":{"params":[{"name":"oldpath","tsType":{"repr":"string","kind":"keyword","keyword":"string"}},{"name":"newpath","tsType":{"repr":"string","kind":"keyword","keyword":"string"}}],"returnType":{"repr":"void","kind":"keyword","keyword":"void"},"isAsync":false,"isGenerator":false}},{"kind":"function","name":"link","location":{"filename":"deno.ts","line":1306,"col":2},"jsDoc":"Creates `newpath` as a hard link to `oldpath`.\n\n      await Deno.link(\"old/name\", \"new/name\");\n\nRequires `allow-read` and `allow-write` permissions.","functionDef":{"params":[{"name":"oldpath","tsType":{"repr":"string","kind":"keyword","keyword":"string"}},{"name":"newpath","tsType":{"repr":"string","kind":"keyword","keyword":"string"}}],"returnType":{"repr":"Promise","kind":"typeRef","typeRef":{"typeParams":[{"repr":"void","kind":"keyword","keyword":"void"}],"typeName":"Promise"}},"isAsync":false,"isGenerator":false}},{"kind":"function","name":"symlinkSync","location":{"filename":"deno.ts","line":1319,"col":2},"jsDoc":"**UNSTABLE**: `type` argument type may be changed to `\"dir\" | \"file\"`.\n\nCreates `newpath` as a symbolic link to `oldpath`. The type argument can be\nset to `dir` or `file`. Is only available on Windows and ignored on other\nplatforms.\n\n      Deno.symlinkSync(\"old/name\", \"new/name\");\n\nRequires `allow-read` and `allow-write` permissions.","functionDef":{"params":[{"name":"oldpath","tsType":{"repr":"string","kind":"keyword","keyword":"string"}},{"name":"newpath","tsType":{"repr":"string","kind":"keyword","keyword":"string"}},{"name":"type","tsType":{"repr":"string","kind":"keyword","keyword":"string"}}],"returnType":{"repr":"void","kind":"keyword","keyword":"void"},"isAsync":false,"isGenerator":false}},{"kind":"function","name":"symlink","location":{"filename":"deno.ts","line":1334,"col":2},"jsDoc":"**UNSTABLE**: `type` argument may be changed to \"dir\" | \"file\"\n\nCreates `newpath` as a symbolic link to `oldpath`. The type argument can be\nset to `dir` or `file`. Is only available on Windows and ignored on other\nplatforms.\n\n      await Deno.symlink(\"old/name\", \"new/name\");\n\nRequires `allow-read` and `allow-write` permissions.","functionDef":{"params":[{"name":"oldpath","tsType":{"repr":"string","kind":"keyword","keyword":"string"}},{"name":"newpath","tsType":{"repr":"string","kind":"keyword","keyword":"string"}},{"name":"type","tsType":{"repr":"string","kind":"keyword","keyword":"string"}}],"returnType":{"repr":"Promise","kind":"typeRef","typeRef":{"typeParams":[{"repr":"void","kind":"keyword","keyword":"void"}],"typeName":"Promise"}},"isAsync":false,"isGenerator":false}},{"kind":"interface","name":"WriteFileOptions","location":{"filename":"deno.ts","line":1343,"col":2},"jsDoc":"Options for writing to a file.","interfaceDef":{"methods":[],"properties":[{"name":"append","location":{"filename":"deno.ts","line":1346,"col":4},"jsDoc":"Defaults to `false`. If set to `true`, will append to a file instead of\noverwriting previous contents.","params":[],"computed":false,"optional":true,"tsType":{"repr":"boolean","kind":"keyword","keyword":"boolean"}},{"name":"create","location":{"filename":"deno.ts","line":1349,"col":4},"jsDoc":"Sets the option to allow creating a new file, if one doesn't already\nexist at the specified path (defaults to `true`).","params":[],"computed":false,"optional":true,"tsType":{"repr":"boolean","kind":"keyword","keyword":"boolean"}},{"name":"mode","location":{"filename":"deno.ts","line":1351,"col":4},"jsDoc":"Permissions always applied to file.","params":[],"computed":false,"optional":true,"tsType":{"repr":"number","kind":"keyword","keyword":"number"}}],"callSignatures":[]}},{"kind":"function","name":"writeFileSync","location":{"filename":"deno.ts","line":1363,"col":2},"jsDoc":"Synchronously write data to the given path, by default creating a new\nfile if needed, else overwriting.\n\n      const encoder = new TextEncoder();\n      const data = encoder.encode(\"Hello world\\n\");\n      Deno.writeFileSync(\"hello.txt\", data);\n\nRequires `allow-write` permission, and `allow-read` if create is `false`.","functionDef":{"params":[{"name":"path","tsType":{"repr":"string","kind":"keyword","keyword":"string"}},{"name":"data","tsType":{"repr":"Uint8Array","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"Uint8Array"}}},{"name":"options","tsType":{"repr":"WriteFileOptions","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"WriteFileOptions"}}}],"returnType":{"repr":"void","kind":"keyword","keyword":"void"},"isAsync":false,"isGenerator":false}},{"kind":"function","name":"writeFile","location":{"filename":"deno.ts","line":1378,"col":2},"jsDoc":"Write data to the given path, by default creating a new file if needed,\nelse overwriting.\n\n      const encoder = new TextEncoder();\n      const data = encoder.encode(\"Hello world\\n\");\n      await Deno.writeFile(\"hello.txt\", data);\n\nRequires `allow-write` permission, and `allow-read` if create is `false`.","functionDef":{"params":[{"name":"path","tsType":{"repr":"string","kind":"keyword","keyword":"string"}},{"name":"data","tsType":{"repr":"Uint8Array","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"Uint8Array"}}},{"name":"options","tsType":{"repr":"WriteFileOptions","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"WriteFileOptions"}}}],"returnType":{"repr":"Promise","kind":"typeRef","typeRef":{"typeParams":[{"repr":"void","kind":"keyword","keyword":"void"}],"typeName":"Promise"}},"isAsync":false,"isGenerator":false}},{"kind":"function","name":"applySourceMap","location":{"filename":"deno.ts","line":1418,"col":2},"jsDoc":"UNSTABLE: new API, yet to be vetted.\n\nGiven a current location in a module, lookup the source location and return\nit.\n\nWhen Deno transpiles code, it keep source maps of the transpiled code. This\nfunction can be used to lookup the original location. This is\nautomatically done when accessing the `.stack` of an error, or when an\nuncaught error is logged. This function can be used to perform the lookup\nfor creating better error handling.\n\n**Note:** `line` and `column` are 1 indexed, which matches display\nexpectations, but is not typical of most index numbers in Deno.\n\nAn example:\n\n      const orig = Deno.applySourceMap({\n        location: \"file://my/module.ts\",\n        line: 5,\n        column: 15\n      });\n      console.log(`${orig.filename}:${orig.line}:${orig.column}`);","functionDef":{"params":[{"name":"location","tsType":{"repr":"Location","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"Location"}}}],"returnType":{"repr":"Location","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"Location"}},"isAsync":false,"isGenerator":false}},{"kind":"variable","name":"errors","location":{"filename":"deno.ts","line":1421,"col":2},"jsDoc":"A set of error constructors that are raised by Deno APIs.","variableDef":{"tsType":{"repr":"","kind":"typeLiteral","typeLiteral":{"methods":[],"properties":[{"name":"NotFound","params":[],"computed":false,"optional":false,"tsType":{"repr":"ErrorConstructor","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"ErrorConstructor"}}},{"name":"PermissionDenied","params":[],"computed":false,"optional":false,"tsType":{"repr":"ErrorConstructor","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"ErrorConstructor"}}},{"name":"ConnectionRefused","params":[],"computed":false,"optional":false,"tsType":{"repr":"ErrorConstructor","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"ErrorConstructor"}}},{"name":"ConnectionReset","params":[],"computed":false,"optional":false,"tsType":{"repr":"ErrorConstructor","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"ErrorConstructor"}}},{"name":"ConnectionAborted","params":[],"computed":false,"optional":false,"tsType":{"repr":"ErrorConstructor","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"ErrorConstructor"}}},{"name":"NotConnected","params":[],"computed":false,"optional":false,"tsType":{"repr":"ErrorConstructor","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"ErrorConstructor"}}},{"name":"AddrInUse","params":[],"computed":false,"optional":false,"tsType":{"repr":"ErrorConstructor","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"ErrorConstructor"}}},{"name":"AddrNotAvailable","params":[],"computed":false,"optional":false,"tsType":{"repr":"ErrorConstructor","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"ErrorConstructor"}}},{"name":"BrokenPipe","params":[],"computed":false,"optional":false,"tsType":{"repr":"ErrorConstructor","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"ErrorConstructor"}}},{"name":"AlreadyExists","params":[],"computed":false,"optional":false,"tsType":{"repr":"ErrorConstructor","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"ErrorConstructor"}}},{"name":"InvalidData","params":[],"computed":false,"optional":false,"tsType":{"repr":"ErrorConstructor","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"ErrorConstructor"}}},{"name":"TimedOut","params":[],"computed":false,"optional":false,"tsType":{"repr":"ErrorConstructor","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"ErrorConstructor"}}},{"name":"Interrupted","params":[],"computed":false,"optional":false,"tsType":{"repr":"ErrorConstructor","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"ErrorConstructor"}}},{"name":"WriteZero","params":[],"computed":false,"optional":false,"tsType":{"repr":"ErrorConstructor","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"ErrorConstructor"}}},{"name":"UnexpectedEof","params":[],"computed":false,"optional":false,"tsType":{"repr":"ErrorConstructor","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"ErrorConstructor"}}},{"name":"BadResource","params":[],"computed":false,"optional":false,"tsType":{"repr":"ErrorConstructor","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"ErrorConstructor"}}},{"name":"Http","params":[],"computed":false,"optional":false,"tsType":{"repr":"ErrorConstructor","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"ErrorConstructor"}}}],"callSignatures":[]}},"kind":"const"}},{"kind":"typeAlias","name":"PermissionName","location":{"filename":"deno.ts","line":1446,"col":2},"jsDoc":"**UNSTABLE**: potentially want names to overlap more with browser.\n\nThe permissions as granted by the caller.\n\nSee: https://w3c.github.io/permissions/#permission-registry","typeAliasDef":{"tsType":{"repr":"","kind":"union","union":[{"repr":"run","kind":"literal","literal":{"kind":"string","string":"run"}},{"repr":"read","kind":"literal","literal":{"kind":"string","string":"read"}},{"repr":"write","kind":"literal","literal":{"kind":"string","string":"write"}},{"repr":"net","kind":"literal","literal":{"kind":"string","string":"net"}},{"repr":"env","kind":"literal","literal":{"kind":"string","string":"env"}},{"repr":"plugin","kind":"literal","literal":{"kind":"string","string":"plugin"}},{"repr":"hrtime","kind":"literal","literal":{"kind":"string","string":"hrtime"}}]}}},{"kind":"typeAlias","name":"PermissionState","location":{"filename":"deno.ts","line":1458,"col":2},"jsDoc":"The current status of the permission.\n\nSee: https://w3c.github.io/permissions/#status-of-a-permission","typeAliasDef":{"tsType":{"repr":"","kind":"union","union":[{"repr":"granted","kind":"literal","literal":{"kind":"string","string":"granted"}},{"repr":"denied","kind":"literal","literal":{"kind":"string","string":"denied"}},{"repr":"prompt","kind":"literal","literal":{"kind":"string","string":"prompt"}}]}}},{"kind":"class","name":"Permissions","location":{"filename":"deno.ts","line":1498,"col":2},"jsDoc":null,"classDef":{"isAbstract":false,"constructors":[],"properties":[],"methods":[{"jsDoc":"Resolves to the current status of a permission.\n\n      const status = await Deno.permissions.query({ name: \"read\", path: \"/etc\" });\n      if (status.state === \"granted\") {\n        data = await Deno.readFile(\"/etc/passwd\");\n      }","accessibility":null,"isAbstract":false,"isStatic":false,"name":"query","kind":"method","functionDef":{"params":[{"name":"desc","tsType":{"repr":"PermissionDescriptor","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"PermissionDescriptor"}}}],"returnType":{"repr":"Promise","kind":"typeRef","typeRef":{"typeParams":[{"repr":"PermissionStatus","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"PermissionStatus"}}],"typeName":"Promise"}},"isAsync":false,"isGenerator":false},"location":{"filename":"deno.ts","line":1506,"col":4}},{"jsDoc":"Revokes a permission, and resolves to the state of the permission.\n\n      const status = await Deno.permissions.revoke({ name: \"run\" });\n      assert(status.state !== \"granted\")","accessibility":null,"isAbstract":false,"isStatic":false,"name":"revoke","kind":"method","functionDef":{"params":[{"name":"desc","tsType":{"repr":"PermissionDescriptor","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"PermissionDescriptor"}}}],"returnType":{"repr":"Promise","kind":"typeRef","typeRef":{"typeParams":[{"repr":"PermissionStatus","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"PermissionStatus"}}],"typeName":"Promise"}},"isAsync":false,"isGenerator":false},"location":{"filename":"deno.ts","line":1513,"col":4}},{"jsDoc":"Requests the permission, and resolves to the state of the permission.\n\n      const status = await Deno.permissions.request({ name: \"env\" });\n      if (status.state === \"granted\") {\n        console.log(Deno.homeDir());\n      } else {\n        console.log(\"'env' permission is denied.\");\n      }","accessibility":null,"isAbstract":false,"isStatic":false,"name":"request","kind":"method","functionDef":{"params":[{"name":"desc","tsType":{"repr":"PermissionDescriptor","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"PermissionDescriptor"}}}],"returnType":{"repr":"Promise","kind":"typeRef","typeRef":{"typeParams":[{"repr":"PermissionStatus","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"PermissionStatus"}}],"typeName":"Promise"}},"isAsync":false,"isGenerator":false},"location":{"filename":"deno.ts","line":1524,"col":4}}]}},{"kind":"variable","name":"permissions","location":{"filename":"deno.ts","line":1528,"col":2},"jsDoc":"**UNSTABLE**: maybe move to `navigator.permissions` to match web API.","variableDef":{"tsType":{"repr":"Permissions","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"Permissions"}},"kind":"const"}},{"kind":"class","name":"PermissionStatus","location":{"filename":"deno.ts","line":1531,"col":2},"jsDoc":"see: https://w3c.github.io/permissions/#permissionstatus","classDef":{"isAbstract":false,"constructors":[{"jsDoc":null,"accessibility":null,"name":"constructor","params":[{"name":"state","tsType":{"repr":"PermissionState","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"PermissionState"}}}],"location":{"filename":"deno.ts","line":1533,"col":4}}],"properties":[{"jsDoc":null,"tsType":{"repr":"PermissionState","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"PermissionState"}},"readonly":false,"accessibility":null,"isAbstract":false,"isStatic":false,"name":"state","location":{"filename":"deno.ts","line":1532,"col":4}}],"methods":[]}},{"kind":"function","name":"truncateSync","location":{"filename":"deno.ts","line":1544,"col":2},"jsDoc":"Synchronously truncates or extends the specified file, to reach the\nspecified `len`.\n\n      Deno.truncateSync(\"hello.txt\", 10);\n\nRequires `allow-write` permission.","functionDef":{"params":[{"name":"name","tsType":{"repr":"string","kind":"keyword","keyword":"string"}},{"name":"len","tsType":{"repr":"number","kind":"keyword","keyword":"number"}}],"returnType":{"repr":"void","kind":"keyword","keyword":"void"},"isAsync":false,"isGenerator":false}},{"kind":"function","name":"truncate","location":{"filename":"deno.ts","line":1551,"col":2},"jsDoc":"Truncates or extends the specified file, to reach the specified `len`.\n\n      await Deno.truncate(\"hello.txt\", 10);\n\nRequires `allow-write` permission.","functionDef":{"params":[{"name":"name","tsType":{"repr":"string","kind":"keyword","keyword":"string"}},{"name":"len","tsType":{"repr":"number","kind":"keyword","keyword":"number"}}],"returnType":{"repr":"Promise","kind":"typeRef","typeRef":{"typeParams":[{"repr":"void","kind":"keyword","keyword":"void"}],"typeName":"Promise"}},"isAsync":false,"isGenerator":false}},{"kind":"interface","name":"AsyncHandler","location":{"filename":"deno.ts","line":1553,"col":2},"jsDoc":null,"interfaceDef":{"methods":[],"properties":[],"callSignatures":[{"location":{"filename":"deno.ts","line":1554,"col":4},"jsDoc":null,"params":[{"name":"msg","tsType":{"repr":"Uint8Array","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"Uint8Array"}}}],"tsType":{"repr":"void","kind":"keyword","keyword":"void"}}]}},{"kind":"interface","name":"PluginOp","location":{"filename":"deno.ts","line":1557,"col":2},"jsDoc":null,"interfaceDef":{"methods":[{"name":"dispatch","location":{"filename":"deno.ts","line":1558,"col":4},"jsDoc":null,"params":[{"name":"control","tsType":{"repr":"Uint8Array","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"Uint8Array"}}},{"name":"zeroCopy","tsType":{"repr":"","kind":"union","union":[{"repr":"ArrayBufferView","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"ArrayBufferView"}},{"repr":"null","kind":"keyword","keyword":"null"}]}}],"returnType":{"repr":"","kind":"union","union":[{"repr":"Uint8Array","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"Uint8Array"}},{"repr":"null","kind":"keyword","keyword":"null"}]}},{"name":"setAsyncHandler","location":{"filename":"deno.ts","line":1562,"col":4},"jsDoc":null,"params":[{"name":"handler","tsType":{"repr":"AsyncHandler","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"AsyncHandler"}}}],"returnType":{"repr":"void","kind":"keyword","keyword":"void"}}],"properties":[],"callSignatures":[]}},{"kind":"interface","name":"Plugin","location":{"filename":"deno.ts","line":1565,"col":2},"jsDoc":null,"interfaceDef":{"methods":[],"properties":[{"name":"ops","location":{"filename":"deno.ts","line":1566,"col":4},"jsDoc":null,"params":[],"computed":false,"optional":false,"tsType":{"repr":"","kind":"typeLiteral","typeLiteral":{"methods":[],"properties":[],"callSignatures":[]}}}],"callSignatures":[]}},{"kind":"function","name":"openPlugin","location":{"filename":"deno.ts","line":1581,"col":2},"jsDoc":"**UNSTABLE**: new API, yet to be vetted.\n\nOpen and initalize a plugin.\n\n       const plugin = Deno.openPlugin(\"./path/to/some/plugin.so\");\n       const some_op = plugin.ops.some_op;\n       const response = some_op.dispatch(new Uint8Array([1,2,3,4]));\n       console.log(`Response from plugin ${response}`);\n\nRequires `allow-plugin` permission.","functionDef":{"params":[{"name":"filename","tsType":{"repr":"string","kind":"keyword","keyword":"string"}}],"returnType":{"repr":"Plugin","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"Plugin"}},"isAsync":false,"isGenerator":false}},{"kind":"typeAlias","name":"Transport","location":{"filename":"deno.ts","line":1583,"col":2},"jsDoc":null,"typeAliasDef":{"tsType":{"repr":"","kind":"union","union":[{"repr":"tcp","kind":"literal","literal":{"kind":"string","string":"tcp"}},{"repr":"udp","kind":"literal","literal":{"kind":"string","string":"udp"}}]}}},{"kind":"interface","name":"Addr","location":{"filename":"deno.ts","line":1585,"col":2},"jsDoc":null,"interfaceDef":{"methods":[],"properties":[{"name":"transport","location":{"filename":"deno.ts","line":1586,"col":4},"jsDoc":null,"params":[],"computed":false,"optional":false,"tsType":{"repr":"Transport","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"Transport"}}},{"name":"hostname","location":{"filename":"deno.ts","line":1587,"col":4},"jsDoc":null,"params":[],"computed":false,"optional":false,"tsType":{"repr":"string","kind":"keyword","keyword":"string"}},{"name":"port","location":{"filename":"deno.ts","line":1588,"col":4},"jsDoc":null,"params":[],"computed":false,"optional":false,"tsType":{"repr":"number","kind":"keyword","keyword":"number"}}],"callSignatures":[]}},{"kind":"interface","name":"UDPAddr","location":{"filename":"deno.ts","line":1591,"col":2},"jsDoc":null,"interfaceDef":{"methods":[],"properties":[{"name":"port","location":{"filename":"deno.ts","line":1592,"col":4},"jsDoc":null,"params":[],"computed":false,"optional":false,"tsType":{"repr":"number","kind":"keyword","keyword":"number"}},{"name":"transport","location":{"filename":"deno.ts","line":1593,"col":4},"jsDoc":null,"params":[],"computed":false,"optional":true,"tsType":{"repr":"Transport","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"Transport"}}},{"name":"hostname","location":{"filename":"deno.ts","line":1594,"col":4},"jsDoc":null,"params":[],"computed":false,"optional":true,"tsType":{"repr":"string","kind":"keyword","keyword":"string"}}],"callSignatures":[]}},{"kind":"enum","name":"ShutdownMode","location":{"filename":"deno.ts","line":1602,"col":2},"jsDoc":"**UNSTABLE**: Maybe remove `ShutdownMode` entirely.\n\nCorresponds to `SHUT_RD`, `SHUT_WR`, `SHUT_RDWR` on POSIX-like systems.\n\nSee: http://man7.org/linux/man-pages/man2/shutdown.2.html","enumDef":{"members":[{"name":"Read"},{"name":"Write"},{"name":"ReadWrite"}]}},{"kind":"function","name":"shutdown","location":{"filename":"deno.ts","line":1619,"col":2},"jsDoc":"**UNSTABLE**: Maybe should remove `how` parameter maybe remove\n`ShutdownMode` entirely.\n\nShutdown socket send and receive operations.\n\nMatches behavior of POSIX shutdown(3).\n\n      const listener = Deno.listen({ port: 80 });\n      const conn = await listener.accept();\n      Deno.shutdown(conn.rid, Deno.ShutdownMode.Write);","functionDef":{"params":[{"name":"rid","tsType":{"repr":"number","kind":"keyword","keyword":"number"}},{"name":"how","tsType":{"repr":"ShutdownMode","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"ShutdownMode"}}}],"returnType":{"repr":"void","kind":"keyword","keyword":"void"},"isAsync":false,"isGenerator":false}},{"kind":"function","name":"recvfrom","location":{"filename":"deno.ts","line":1627,"col":2},"jsDoc":"**UNSTABLE**: new API, yet to be vetted.\n\nWaits for the next message to the passed `rid` and writes it on the passed\n`Uint8Array`.\n\nResolves to the number of bytes written and the remote address.","functionDef":{"params":[{"name":"rid","tsType":{"repr":"number","kind":"keyword","keyword":"number"}},{"name":"p","tsType":{"repr":"Uint8Array","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"Uint8Array"}}}],"returnType":{"repr":"Promise","kind":"typeRef","typeRef":{"typeParams":[{"repr":"","kind":"tuple","tuple":[{"repr":"number","kind":"keyword","keyword":"number"},{"repr":"Addr","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"Addr"}}]}],"typeName":"Promise"}},"isAsync":false,"isGenerator":false}},{"kind":"interface","name":"UDPConn","location":{"filename":"deno.ts","line":1632,"col":2},"jsDoc":"**UNSTABLE**: new API, yet to be vetted.\n\nA generic transport listener for message-oriented protocols.","interfaceDef":{"methods":[{"name":"receive","location":{"filename":"deno.ts","line":1636,"col":4},"jsDoc":"**UNSTABLE**: new API, yet to be vetted.\n\nWaits for and resolves to the next message to the `UDPConn`.","params":[{"name":"p","tsType":{"repr":"Uint8Array","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"Uint8Array"}}}],"returnType":{"repr":"Promise","kind":"typeRef","typeRef":{"typeParams":[{"repr":"","kind":"tuple","tuple":[{"repr":"Uint8Array","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"Uint8Array"}},{"repr":"Addr","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"Addr"}}]}],"typeName":"Promise"}}},{"name":"send","location":{"filename":"deno.ts","line":1640,"col":4},"jsDoc":"UNSTABLE: new API, yet to be vetted.\n\nSends a message to the target.","params":[{"name":"p","tsType":{"repr":"Uint8Array","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"Uint8Array"}}},{"name":"addr","tsType":{"repr":"UDPAddr","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"UDPAddr"}}}],"returnType":{"repr":"Promise","kind":"typeRef","typeRef":{"typeParams":[{"repr":"void","kind":"keyword","keyword":"void"}],"typeName":"Promise"}}},{"name":"close","location":{"filename":"deno.ts","line":1645,"col":4},"jsDoc":"UNSTABLE: new API, yet to be vetted.\n\nClose closes the socket. Any pending message promises will be rejected\nwith errors.","params":[],"returnType":{"repr":"void","kind":"keyword","keyword":"void"}},{"name":"[Symbol.asyncIterator]","location":{"filename":"deno.ts","line":1648,"col":4},"jsDoc":null,"params":[],"returnType":{"repr":"AsyncIterator","kind":"typeRef","typeRef":{"typeParams":[{"repr":"","kind":"tuple","tuple":[{"repr":"Uint8Array","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"Uint8Array"}},{"repr":"Addr","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"Addr"}}]}],"typeName":"AsyncIterator"}}}],"properties":[{"name":"addr","location":{"filename":"deno.ts","line":1647,"col":4},"jsDoc":"Return the address of the `UDPConn`.","params":[],"computed":false,"optional":false,"tsType":{"repr":"Addr","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"Addr"}}}],"callSignatures":[]}},{"kind":"interface","name":"Listener","location":{"filename":"deno.ts","line":1652,"col":2},"jsDoc":"A generic network listener for stream-oriented protocols.","interfaceDef":{"methods":[{"name":"accept","location":{"filename":"deno.ts","line":1654,"col":4},"jsDoc":"Waits for and resolves to the next connection to the `Listener`.","params":[],"returnType":{"repr":"Promise","kind":"typeRef","typeRef":{"typeParams":[{"repr":"Conn","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"Conn"}}],"typeName":"Promise"}}},{"name":"close","location":{"filename":"deno.ts","line":1657,"col":4},"jsDoc":"Close closes the listener. Any pending accept promises will be rejected\nwith errors.","params":[],"returnType":{"repr":"void","kind":"keyword","keyword":"void"}},{"name":"[Symbol.asyncIterator]","location":{"filename":"deno.ts","line":1660,"col":4},"jsDoc":null,"params":[],"returnType":{"repr":"AsyncIterator","kind":"typeRef","typeRef":{"typeParams":[{"repr":"Conn","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"Conn"}}],"typeName":"AsyncIterator"}}}],"properties":[{"name":"addr","location":{"filename":"deno.ts","line":1659,"col":4},"jsDoc":"Return the address of the `Listener`.","params":[],"computed":false,"optional":false,"tsType":{"repr":"Addr","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"Addr"}}}],"callSignatures":[]}},{"kind":"interface","name":"Conn","location":{"filename":"deno.ts","line":1663,"col":2},"jsDoc":null,"interfaceDef":{"methods":[{"name":"closeRead","location":{"filename":"deno.ts","line":1672,"col":4},"jsDoc":"Shuts down (`shutdown(2)`) the reading side of the TCP connection. Most\ncallers should just use `close()`.","params":[],"returnType":{"repr":"void","kind":"keyword","keyword":"void"}},{"name":"closeWrite","location":{"filename":"deno.ts","line":1675,"col":4},"jsDoc":"Shuts down (`shutdown(2)`) the writing side of the TCP connection. Most\ncallers should just use `close()`.","params":[],"returnType":{"repr":"void","kind":"keyword","keyword":"void"}}],"properties":[{"name":"localAddr","location":{"filename":"deno.ts","line":1665,"col":4},"jsDoc":"The local address of the connection.","params":[],"computed":false,"optional":false,"tsType":{"repr":"Addr","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"Addr"}}},{"name":"remoteAddr","location":{"filename":"deno.ts","line":1667,"col":4},"jsDoc":"The remote address of the connection.","params":[],"computed":false,"optional":false,"tsType":{"repr":"Addr","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"Addr"}}},{"name":"rid","location":{"filename":"deno.ts","line":1669,"col":4},"jsDoc":"The resource ID of the connection.","params":[],"computed":false,"optional":false,"tsType":{"repr":"number","kind":"keyword","keyword":"number"}}],"callSignatures":[]}},{"kind":"interface","name":"ListenOptions","location":{"filename":"deno.ts","line":1678,"col":2},"jsDoc":null,"interfaceDef":{"methods":[],"properties":[{"name":"port","location":{"filename":"deno.ts","line":1680,"col":4},"jsDoc":"The port to listen on.","params":[],"computed":false,"optional":false,"tsType":{"repr":"number","kind":"keyword","keyword":"number"}},{"name":"hostname","location":{"filename":"deno.ts","line":1683,"col":4},"jsDoc":"A literal IP address or host name that can be resolved to an IP address.\nIf not specified, defaults to `0.0.0.0`.","params":[],"computed":false,"optional":true,"tsType":{"repr":"string","kind":"keyword","keyword":"string"}},{"name":"transport","location":{"filename":"deno.ts","line":1688,"col":4},"jsDoc":"Either `\"tcp\"` or `\"udp\"`. Defaults to `\"tcp\"`.\n\nIn the future: `\"tcp4\"`, `\"tcp6\"`, `\"udp4\"`, `\"udp6\"`, `\"ip\"`, `\"ip4\"`,\n`\"ip6\"`, `\"unix\"`, `\"unixgram\"`, and `\"unixpacket\"`.","params":[],"computed":false,"optional":true,"tsType":{"repr":"Transport","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"Transport"}}}],"callSignatures":[]}},{"kind":"function","name":"listen","location":{"filename":"deno.ts","line":1701,"col":2},"jsDoc":"**UNSTABLE**: new API\n\nListen announces on the local transport address.\n\n     Deno.listen({ port: 80 })\n     Deno.listen({ hostname: \"192.0.2.1\", port: 80 })\n     Deno.listen({ hostname: \"[2001:db8::1]\", port: 80 });\n     Deno.listen({ hostname: \"golang.org\", port: 80, transport: \"tcp\" });\n\nRequires `allow-net` permission.","functionDef":{"params":[{"name":"options","tsType":{"repr":"","kind":"intersection","intersection":[{"repr":"ListenOptions","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"ListenOptions"}},{"repr":"","kind":"typeLiteral","typeLiteral":{"methods":[],"properties":[{"name":"transport","params":[],"computed":false,"optional":true,"tsType":{"repr":"tcp","kind":"literal","literal":{"kind":"string","string":"tcp"}}}],"callSignatures":[]}}]}}],"returnType":{"repr":"Listener","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"Listener"}},"isAsync":false,"isGenerator":false}},{"kind":"function","name":"listen","location":{"filename":"deno.ts","line":1714,"col":2},"jsDoc":"**UNSTABLE**: new API\n\nListen announces on the local transport address.\n\n     Deno.listen({ port: 80 })\n     Deno.listen({ hostname: \"192.0.2.1\", port: 80 })\n     Deno.listen({ hostname: \"[2001:db8::1]\", port: 80 });\n     Deno.listen({ hostname: \"golang.org\", port: 80, transport: \"tcp\" });\n\nRequires `allow-net` permission.","functionDef":{"params":[{"name":"options","tsType":{"repr":"","kind":"intersection","intersection":[{"repr":"ListenOptions","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"ListenOptions"}},{"repr":"","kind":"typeLiteral","typeLiteral":{"methods":[],"properties":[{"name":"transport","params":[],"computed":false,"optional":false,"tsType":{"repr":"udp","kind":"literal","literal":{"kind":"string","string":"udp"}}}],"callSignatures":[]}}]}}],"returnType":{"repr":"UDPConn","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"UDPConn"}},"isAsync":false,"isGenerator":false}},{"kind":"function","name":"listen","location":{"filename":"deno.ts","line":1727,"col":2},"jsDoc":"**UNSTABLE**: new API\n\nListen announces on the local transport address.\n\n     Deno.listen({ port: 80 })\n     Deno.listen({ hostname: \"192.0.2.1\", port: 80 })\n     Deno.listen({ hostname: \"[2001:db8::1]\", port: 80 });\n     Deno.listen({ hostname: \"golang.org\", port: 80, transport: \"tcp\" });\n\nRequires `allow-net` permission.","functionDef":{"params":[{"name":"options","tsType":{"repr":"ListenOptions","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"ListenOptions"}}}],"returnType":{"repr":"","kind":"union","union":[{"repr":"Listener","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"Listener"}},{"repr":"UDPConn","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"UDPConn"}}]},"isAsync":false,"isGenerator":false}},{"kind":"interface","name":"ListenTLSOptions","location":{"filename":"deno.ts","line":1729,"col":2},"jsDoc":null,"interfaceDef":{"methods":[],"properties":[{"name":"certFile","location":{"filename":"deno.ts","line":1731,"col":4},"jsDoc":"Server certificate file.","params":[],"computed":false,"optional":false,"tsType":{"repr":"string","kind":"keyword","keyword":"string"}},{"name":"keyFile","location":{"filename":"deno.ts","line":1733,"col":4},"jsDoc":"Server public key file.","params":[],"computed":false,"optional":false,"tsType":{"repr":"string","kind":"keyword","keyword":"string"}}],"callSignatures":[]}},{"kind":"function","name":"listenTLS","location":{"filename":"deno.ts","line":1742,"col":2},"jsDoc":"Listen announces on the local transport address over TLS (transport layer\nsecurity).\n\n     Deno.listenTLS({ port: 443, certFile: \"./my_server.crt\", keyFile: \"./my_server.key\" });\n\nRequires `allow-net` permission.","functionDef":{"params":[{"name":"options","tsType":{"repr":"ListenTLSOptions","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"ListenTLSOptions"}}}],"returnType":{"repr":"Listener","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"Listener"}},"isAsync":false,"isGenerator":false}},{"kind":"interface","name":"ConnectOptions","location":{"filename":"deno.ts","line":1744,"col":2},"jsDoc":null,"interfaceDef":{"methods":[],"properties":[{"name":"port","location":{"filename":"deno.ts","line":1746,"col":4},"jsDoc":"The port to connect to.","params":[],"computed":false,"optional":false,"tsType":{"repr":"number","kind":"keyword","keyword":"number"}},{"name":"hostname","location":{"filename":"deno.ts","line":1749,"col":4},"jsDoc":"A literal IP address or host name that can be resolved to an IP address.\nIf not specified, defaults to `127.0.0.1`.","params":[],"computed":false,"optional":true,"tsType":{"repr":"string","kind":"keyword","keyword":"string"}},{"name":"transport","location":{"filename":"deno.ts","line":1754,"col":4},"jsDoc":"Either `\"tcp\"` or `\"udp\"`. Defaults to `\"tcp\"`.\n\nIn the future: `\"tcp4\"`, `\"tcp6\"`, `\"udp4\"`, `\"udp6\"`, `\"ip\"`, `\"ip4\"`,\n`\"ip6\"`, `\"unix\"`, `\"unixgram\"`, and `\"unixpacket\"`.","params":[],"computed":false,"optional":true,"tsType":{"repr":"Transport","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"Transport"}}}],"callSignatures":[]}},{"kind":"function","name":"connect","location":{"filename":"deno.ts","line":1766,"col":2},"jsDoc":"Connects to the address on the named transport.\n\n    Deno.connect({ port: 80 })\n    Deno.connect({ hostname: \"192.0.2.1\", port: 80 })\n    Deno.connect({ hostname: \"[2001:db8::1]\", port: 80 });\n    Deno.connect({ hostname: \"golang.org\", port: 80, transport: \"tcp\" })\n\nRequires `allow-net` permission.","functionDef":{"params":[{"name":"options","tsType":{"repr":"ConnectOptions","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"ConnectOptions"}}}],"returnType":{"repr":"Promise","kind":"typeRef","typeRef":{"typeParams":[{"repr":"Conn","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"Conn"}}],"typeName":"Promise"}},"isAsync":false,"isGenerator":false}},{"kind":"interface","name":"ConnectTLSOptions","location":{"filename":"deno.ts","line":1768,"col":2},"jsDoc":null,"interfaceDef":{"methods":[],"properties":[{"name":"port","location":{"filename":"deno.ts","line":1770,"col":4},"jsDoc":"The port to connect to.","params":[],"computed":false,"optional":false,"tsType":{"repr":"number","kind":"keyword","keyword":"number"}},{"name":"hostname","location":{"filename":"deno.ts","line":1773,"col":4},"jsDoc":"A literal IP address or host name that can be resolved to an IP address.\nIf not specified, defaults to `127.0.0.1`.","params":[],"computed":false,"optional":true,"tsType":{"repr":"string","kind":"keyword","keyword":"string"}},{"name":"certFile","location":{"filename":"deno.ts","line":1775,"col":4},"jsDoc":"Server certificate file.","params":[],"computed":false,"optional":true,"tsType":{"repr":"string","kind":"keyword","keyword":"string"}}],"callSignatures":[]}},{"kind":"function","name":"connectTLS","location":{"filename":"deno.ts","line":1781,"col":2},"jsDoc":"Establishes a secure connection over TLS (transport layer security).\n\nRequires `allow-net` permission.","functionDef":{"params":[{"name":"options","tsType":{"repr":"ConnectTLSOptions","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"ConnectTLSOptions"}}}],"returnType":{"repr":"Promise","kind":"typeRef","typeRef":{"typeParams":[{"repr":"Conn","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"Conn"}}],"typeName":"Promise"}},"isAsync":false,"isGenerator":false}},{"kind":"interface","name":"Metrics","location":{"filename":"deno.ts","line":1784,"col":2},"jsDoc":"**UNSTABLE**: not sure if broken or not","interfaceDef":{"methods":[],"properties":[{"name":"opsDispatched","location":{"filename":"deno.ts","line":1785,"col":4},"jsDoc":null,"params":[],"computed":false,"optional":false,"tsType":{"repr":"number","kind":"keyword","keyword":"number"}},{"name":"opsDispatchedSync","location":{"filename":"deno.ts","line":1786,"col":4},"jsDoc":null,"params":[],"computed":false,"optional":false,"tsType":{"repr":"number","kind":"keyword","keyword":"number"}},{"name":"opsDispatchedAsync","location":{"filename":"deno.ts","line":1787,"col":4},"jsDoc":null,"params":[],"computed":false,"optional":false,"tsType":{"repr":"number","kind":"keyword","keyword":"number"}},{"name":"opsDispatchedAsyncUnref","location":{"filename":"deno.ts","line":1788,"col":4},"jsDoc":null,"params":[],"computed":false,"optional":false,"tsType":{"repr":"number","kind":"keyword","keyword":"number"}},{"name":"opsCompleted","location":{"filename":"deno.ts","line":1789,"col":4},"jsDoc":null,"params":[],"computed":false,"optional":false,"tsType":{"repr":"number","kind":"keyword","keyword":"number"}},{"name":"opsCompletedSync","location":{"filename":"deno.ts","line":1790,"col":4},"jsDoc":null,"params":[],"computed":false,"optional":false,"tsType":{"repr":"number","kind":"keyword","keyword":"number"}},{"name":"opsCompletedAsync","location":{"filename":"deno.ts","line":1791,"col":4},"jsDoc":null,"params":[],"computed":false,"optional":false,"tsType":{"repr":"number","kind":"keyword","keyword":"number"}},{"name":"opsCompletedAsyncUnref","location":{"filename":"deno.ts","line":1792,"col":4},"jsDoc":null,"params":[],"computed":false,"optional":false,"tsType":{"repr":"number","kind":"keyword","keyword":"number"}},{"name":"bytesSentControl","location":{"filename":"deno.ts","line":1793,"col":4},"jsDoc":null,"params":[],"computed":false,"optional":false,"tsType":{"repr":"number","kind":"keyword","keyword":"number"}},{"name":"bytesSentData","location":{"filename":"deno.ts","line":1794,"col":4},"jsDoc":null,"params":[],"computed":false,"optional":false,"tsType":{"repr":"number","kind":"keyword","keyword":"number"}},{"name":"bytesReceived","location":{"filename":"deno.ts","line":1795,"col":4},"jsDoc":null,"params":[],"computed":false,"optional":false,"tsType":{"repr":"number","kind":"keyword","keyword":"number"}}],"callSignatures":[]}},{"kind":"function","name":"metrics","location":{"filename":"deno.ts","line":1819,"col":2},"jsDoc":"**UNSTABLE**: potentially broken.\n\nReceive metrics from the privileged side of Deno.\n\n     > console.table(Deno.metrics())\n     ┌─────────────────────────┬────────┐\n     │         (index)         │ Values │\n     ├─────────────────────────┼────────┤\n     │      opsDispatched      │   3    │\n     │    opsDispatchedSync    │   2    │\n     │   opsDispatchedAsync    │   1    │\n     │ opsDispatchedAsyncUnref │   0    │\n     │      opsCompleted       │   3    │\n     │    opsCompletedSync     │   2    │\n     │    opsCompletedAsync    │   1    │\n     │ opsCompletedAsyncUnref  │   0    │\n     │    bytesSentControl     │   73   │\n     │      bytesSentData      │   0    │\n     │      bytesReceived      │  375   │\n     └─────────────────────────┴────────┘","functionDef":{"params":[],"returnType":{"repr":"Metrics","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"Metrics"}},"isAsync":false,"isGenerator":false}},{"kind":"function","name":"resources","location":{"filename":"deno.ts","line":1830,"col":2},"jsDoc":"**UNSTABLE**: reconsider return type.\n\nReturns a map of open _file like_ resource ids along with their string\nrepresentations.","functionDef":{"params":[],"returnType":{"repr":"ResourceMap","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"ResourceMap"}},"isAsync":false,"isGenerator":false}},{"kind":"interface","name":"FsEvent","location":{"filename":"deno.ts","line":1833,"col":2},"jsDoc":"**UNSTABLE**: new API. Needs docs.","interfaceDef":{"methods":[],"properties":[{"name":"kind","location":{"filename":"deno.ts","line":1834,"col":4},"jsDoc":null,"params":[],"computed":false,"optional":false,"tsType":{"repr":"","kind":"union","union":[{"repr":"any","kind":"literal","literal":{"kind":"string","string":"any"}},{"repr":"access","kind":"literal","literal":{"kind":"string","string":"access"}},{"repr":"create","kind":"literal","literal":{"kind":"string","string":"create"}},{"repr":"modify","kind":"literal","literal":{"kind":"string","string":"modify"}},{"repr":"remove","kind":"literal","literal":{"kind":"string","string":"remove"}}]}},{"name":"paths","location":{"filename":"deno.ts","line":1835,"col":4},"jsDoc":null,"params":[],"computed":false,"optional":false,"tsType":{"repr":"","kind":"array","array":{"repr":"string","kind":"keyword","keyword":"string"}}}],"callSignatures":[]}},{"kind":"function","name":"fsEvents","location":{"filename":"deno.ts","line":1841,"col":2},"jsDoc":"**UNSTABLE**: new API. Needs docs.\n\nRecursive option is `true` by default.","functionDef":{"params":[{"name":"paths","tsType":{"repr":"","kind":"union","union":[{"repr":"string","kind":"keyword","keyword":"string"},{"repr":"","kind":"array","array":{"repr":"string","kind":"keyword","keyword":"string"}}]}},{"name":"options","tsType":{"repr":"","kind":"typeLiteral","typeLiteral":{"methods":[],"properties":[{"name":"recursive","params":[],"computed":false,"optional":false,"tsType":{"repr":"boolean","kind":"keyword","keyword":"boolean"}}],"callSignatures":[]}}}],"returnType":{"repr":"AsyncIterableIterator","kind":"typeRef","typeRef":{"typeParams":[{"repr":"FsEvent","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"FsEvent"}}],"typeName":"AsyncIterableIterator"}},"isAsync":false,"isGenerator":false}},{"kind":"function","name":"kill","location":{"filename":"deno.ts","line":1869,"col":2},"jsDoc":"**UNSTABLE**: the `signo` argument maybe shouldn't be number. Should throw\non Windows instead of silently succeeding.\n\nSend a signal to process under given `pid`. Linux/Mac OS only currently.\n\nIf `pid` is negative, the signal will be sent to the process group\nidentified by `pid`.\n\nCurrently no-op on Windows.\n\nRequires `allow-run` permission.","functionDef":{"params":[{"name":"pid","tsType":{"repr":"number","kind":"keyword","keyword":"number"}},{"name":"signo","tsType":{"repr":"number","kind":"keyword","keyword":"number"}}],"returnType":{"repr":"void","kind":"keyword","keyword":"void"},"isAsync":false,"isGenerator":false}},{"kind":"class","name":"Process","location":{"filename":"deno.ts","line":1873,"col":2},"jsDoc":"**UNSTABLE**: There are some issues to work out with respect to when and\nhow the process should be closed.","classDef":{"isAbstract":false,"constructors":[],"properties":[{"jsDoc":null,"tsType":{"repr":"number","kind":"keyword","keyword":"number"},"readonly":true,"accessibility":null,"isAbstract":false,"isStatic":false,"name":"rid","location":{"filename":"deno.ts","line":1874,"col":4}},{"jsDoc":null,"tsType":{"repr":"number","kind":"keyword","keyword":"number"},"readonly":true,"accessibility":null,"isAbstract":false,"isStatic":false,"name":"pid","location":{"filename":"deno.ts","line":1875,"col":4}},{"jsDoc":null,"tsType":{"repr":"WriteCloser","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"WriteCloser"}},"readonly":true,"accessibility":null,"isAbstract":false,"isStatic":false,"name":"stdin","location":{"filename":"deno.ts","line":1876,"col":4}},{"jsDoc":null,"tsType":{"repr":"ReadCloser","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"ReadCloser"}},"readonly":true,"accessibility":null,"isAbstract":false,"isStatic":false,"name":"stdout","location":{"filename":"deno.ts","line":1877,"col":4}},{"jsDoc":null,"tsType":{"repr":"ReadCloser","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"ReadCloser"}},"readonly":true,"accessibility":null,"isAbstract":false,"isStatic":false,"name":"stderr","location":{"filename":"deno.ts","line":1878,"col":4}}],"methods":[{"jsDoc":"Resolves to the current status of the process.","accessibility":null,"isAbstract":false,"isStatic":false,"name":"status","kind":"method","functionDef":{"params":[],"returnType":{"repr":"Promise","kind":"typeRef","typeRef":{"typeParams":[{"repr":"ProcessStatus","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"ProcessStatus"}}],"typeName":"Promise"}},"isAsync":false,"isGenerator":false},"location":{"filename":"deno.ts","line":1880,"col":4}},{"jsDoc":"Buffer the stdout and return it as `Uint8Array` after `Deno.EOF`.\n\nYou must set stdout to `\"piped\"` when creating the process.\n\nThis calls `close()` on stdout after its done.","accessibility":null,"isAbstract":false,"isStatic":false,"name":"output","kind":"method","functionDef":{"params":[],"returnType":{"repr":"Promise","kind":"typeRef","typeRef":{"typeParams":[{"repr":"Uint8Array","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"Uint8Array"}}],"typeName":"Promise"}},"isAsync":false,"isGenerator":false},"location":{"filename":"deno.ts","line":1886,"col":4}},{"jsDoc":"Buffer the stderr and return it as `Uint8Array` after `Deno.EOF`.\n\nYou must set stderr to `\"piped\"` when creating the process.\n\nThis calls `close()` on stderr after its done.","accessibility":null,"isAbstract":false,"isStatic":false,"name":"stderrOutput","kind":"method","functionDef":{"params":[],"returnType":{"repr":"Promise","kind":"typeRef","typeRef":{"typeParams":[{"repr":"Uint8Array","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"Uint8Array"}}],"typeName":"Promise"}},"isAsync":false,"isGenerator":false},"location":{"filename":"deno.ts","line":1892,"col":4}},{"jsDoc":null,"accessibility":null,"isAbstract":false,"isStatic":false,"name":"close","kind":"method","functionDef":{"params":[],"returnType":{"repr":"void","kind":"keyword","keyword":"void"},"isAsync":false,"isGenerator":false},"location":{"filename":"deno.ts","line":1893,"col":4}},{"jsDoc":null,"accessibility":null,"isAbstract":false,"isStatic":false,"name":"kill","kind":"method","functionDef":{"params":[{"name":"signo","tsType":{"repr":"number","kind":"keyword","keyword":"number"}}],"returnType":{"repr":"void","kind":"keyword","keyword":"void"},"isAsync":false,"isGenerator":false},"location":{"filename":"deno.ts","line":1894,"col":4}}]}},{"kind":"interface","name":"ProcessStatus","location":{"filename":"deno.ts","line":1897,"col":2},"jsDoc":null,"interfaceDef":{"methods":[],"properties":[{"name":"success","location":{"filename":"deno.ts","line":1898,"col":4},"jsDoc":null,"params":[],"computed":false,"optional":false,"tsType":{"repr":"boolean","kind":"keyword","keyword":"boolean"}},{"name":"code","location":{"filename":"deno.ts","line":1899,"col":4},"jsDoc":null,"params":[],"computed":false,"optional":true,"tsType":{"repr":"number","kind":"keyword","keyword":"number"}},{"name":"signal","location":{"filename":"deno.ts","line":1900,"col":4},"jsDoc":null,"params":[],"computed":false,"optional":true,"tsType":{"repr":"number","kind":"keyword","keyword":"number"}}],"callSignatures":[]}},{"kind":"interface","name":"RunOptions","location":{"filename":"deno.ts","line":1905,"col":2},"jsDoc":"**UNSTABLE**:  Maybe rename `args` to `argv` to differentiate from\n`Deno.args`.","interfaceDef":{"methods":[],"properties":[{"name":"args","location":{"filename":"deno.ts","line":1908,"col":4},"jsDoc":"Arguments to pass. Note, the first element needs to be a path to the\nbinary","params":[],"computed":false,"optional":false,"tsType":{"repr":"","kind":"array","array":{"repr":"string","kind":"keyword","keyword":"string"}}},{"name":"cwd","location":{"filename":"deno.ts","line":1909,"col":4},"jsDoc":null,"params":[],"computed":false,"optional":true,"tsType":{"repr":"string","kind":"keyword","keyword":"string"}},{"name":"env","location":{"filename":"deno.ts","line":1910,"col":4},"jsDoc":null,"params":[],"computed":false,"optional":true,"tsType":{"repr":"","kind":"typeLiteral","typeLiteral":{"methods":[],"properties":[],"callSignatures":[]}}},{"name":"stdout","location":{"filename":"deno.ts","line":1913,"col":4},"jsDoc":null,"params":[],"computed":false,"optional":true,"tsType":{"repr":"","kind":"union","union":[{"repr":"ProcessStdio","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"ProcessStdio"}},{"repr":"number","kind":"keyword","keyword":"number"}]}},{"name":"stderr","location":{"filename":"deno.ts","line":1914,"col":4},"jsDoc":null,"params":[],"computed":false,"optional":true,"tsType":{"repr":"","kind":"union","union":[{"repr":"ProcessStdio","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"ProcessStdio"}},{"repr":"number","kind":"keyword","keyword":"number"}]}},{"name":"stdin","location":{"filename":"deno.ts","line":1915,"col":4},"jsDoc":null,"params":[],"computed":false,"optional":true,"tsType":{"repr":"","kind":"union","union":[{"repr":"ProcessStdio","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"ProcessStdio"}},{"repr":"number","kind":"keyword","keyword":"number"}]}}],"callSignatures":[]}},{"kind":"function","name":"run","location":{"filename":"deno.ts","line":1931,"col":2},"jsDoc":"Spawns new subprocess.\n\nSubprocess uses same working directory as parent process unless `opt.cwd`\nis specified.\n\nEnvironmental variables for subprocess can be specified using `opt.env`\nmapping.\n\nBy default subprocess inherits stdio of parent process. To change that\n`opt.stdout`, `opt.stderr` and `opt.stdin` can be specified independently -\nthey can be set to either `ProcessStdio` or `rid` of open file.\n\nRequires `allow-run` permission.","functionDef":{"params":[{"name":"opt","tsType":{"repr":"RunOptions","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"RunOptions"}}}],"returnType":{"repr":"Process","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"Process"}},"isAsync":false,"isGenerator":false}},{"kind":"variable","name":"Signal","location":{"filename":"deno.ts","line":2003,"col":2},"jsDoc":"**UNSTABLE**: make platform independent.\n\nSignals numbers. This is platform dependent.","variableDef":{"tsType":{"repr":"","kind":"union","union":[{"repr":"MacOSSignal","kind":"typeQuery","typeQuery":"MacOSSignal"},{"repr":"LinuxSignal","kind":"typeQuery","typeQuery":"LinuxSignal"}]},"kind":"const"}},{"kind":"function","name":"inspect","location":{"filename":"deno.ts","line":2018,"col":2},"jsDoc":"**UNSTABLE**: `ConsoleOptions` rename to `InspectOptions`. Also the exact\nform of string output subject to change.\n\nConverts input into string that has the same format as printed by\n`console.log()`.","functionDef":{"params":[{"name":"value","tsType":{"repr":"unknown","kind":"keyword","keyword":"unknown"}},{"name":"options","tsType":{"repr":"ConsoleOptions","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"ConsoleOptions"}}}],"returnType":{"repr":"string","kind":"keyword","keyword":"string"},"isAsync":false,"isGenerator":false}},{"kind":"typeAlias","name":"OperatingSystem","location":{"filename":"deno.ts","line":2020,"col":2},"jsDoc":null,"typeAliasDef":{"tsType":{"repr":"","kind":"union","union":[{"repr":"mac","kind":"literal","literal":{"kind":"string","string":"mac"}},{"repr":"win","kind":"literal","literal":{"kind":"string","string":"win"}},{"repr":"linux","kind":"literal","literal":{"kind":"string","string":"linux"}}]}}},{"kind":"typeAlias","name":"Arch","location":{"filename":"deno.ts","line":2022,"col":2},"jsDoc":null,"typeAliasDef":{"tsType":{"repr":"","kind":"union","union":[{"repr":"x64","kind":"literal","literal":{"kind":"string","string":"x64"}},{"repr":"arm64","kind":"literal","literal":{"kind":"string","string":"arm64"}}]}}},{"kind":"variable","name":"build","location":{"filename":"deno.ts","line":2032,"col":2},"jsDoc":"Build related information.","variableDef":{"tsType":{"repr":"BuildInfo","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"BuildInfo"}},"kind":"const"}},{"kind":"variable","name":"version","location":{"filename":"deno.ts","line":2040,"col":2},"jsDoc":"Version related information.","variableDef":{"tsType":{"repr":"Version","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"Version"}},"kind":"const"}},{"kind":"enum","name":"DiagnosticCategory","location":{"filename":"deno.ts","line":2043,"col":2},"jsDoc":"The log category for a diagnostic message.","enumDef":{"members":[{"name":"Log"},{"name":"Debug"},{"name":"Info"},{"name":"Error"},{"name":"Warning"},{"name":"Suggestion"}]}},{"kind":"interface","name":"DiagnosticMessageChain","location":{"filename":"deno.ts","line":2052,"col":2},"jsDoc":null,"interfaceDef":{"methods":[],"properties":[{"name":"message","location":{"filename":"deno.ts","line":2053,"col":4},"jsDoc":null,"params":[],"computed":false,"optional":false,"tsType":{"repr":"string","kind":"keyword","keyword":"string"}},{"name":"category","location":{"filename":"deno.ts","line":2054,"col":4},"jsDoc":null,"params":[],"computed":false,"optional":false,"tsType":{"repr":"DiagnosticCategory","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"DiagnosticCategory"}}},{"name":"code","location":{"filename":"deno.ts","line":2055,"col":4},"jsDoc":null,"params":[],"computed":false,"optional":false,"tsType":{"repr":"number","kind":"keyword","keyword":"number"}},{"name":"next","location":{"filename":"deno.ts","line":2056,"col":4},"jsDoc":null,"params":[],"computed":false,"optional":true,"tsType":{"repr":"","kind":"array","array":{"repr":"DiagnosticMessageChain","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"DiagnosticMessageChain"}}}}],"callSignatures":[]}},{"kind":"interface","name":"DiagnosticItem","location":{"filename":"deno.ts","line":2059,"col":2},"jsDoc":null,"interfaceDef":{"methods":[],"properties":[{"name":"message","location":{"filename":"deno.ts","line":2061,"col":4},"jsDoc":"A string message summarizing the diagnostic.","params":[],"computed":false,"optional":false,"tsType":{"repr":"string","kind":"keyword","keyword":"string"}},{"name":"messageChain","location":{"filename":"deno.ts","line":2063,"col":4},"jsDoc":"An ordered array of further diagnostics.","params":[],"computed":false,"optional":true,"tsType":{"repr":"DiagnosticMessageChain","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"DiagnosticMessageChain"}}},{"name":"relatedInformation","location":{"filename":"deno.ts","line":2066,"col":4},"jsDoc":"Information related to the diagnostic. This is present when there is a\nsuggestion or other additional diagnostic information","params":[],"computed":false,"optional":true,"tsType":{"repr":"","kind":"array","array":{"repr":"DiagnosticItem","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"DiagnosticItem"}}}},{"name":"sourceLine","location":{"filename":"deno.ts","line":2068,"col":4},"jsDoc":"The text of the source line related to the diagnostic.","params":[],"computed":false,"optional":true,"tsType":{"repr":"string","kind":"keyword","keyword":"string"}},{"name":"lineNumber","location":{"filename":"deno.ts","line":2070,"col":4},"jsDoc":"The line number that is related to the diagnostic.","params":[],"computed":false,"optional":true,"tsType":{"repr":"number","kind":"keyword","keyword":"number"}},{"name":"scriptResourceName","location":{"filename":"deno.ts","line":2072,"col":4},"jsDoc":"The name of the script resource related to the diagnostic.","params":[],"computed":false,"optional":true,"tsType":{"repr":"string","kind":"keyword","keyword":"string"}},{"name":"startPosition","location":{"filename":"deno.ts","line":2074,"col":4},"jsDoc":"The start position related to the diagnostic.","params":[],"computed":false,"optional":true,"tsType":{"repr":"number","kind":"keyword","keyword":"number"}},{"name":"endPosition","location":{"filename":"deno.ts","line":2076,"col":4},"jsDoc":"The end position related to the diagnostic.","params":[],"computed":false,"optional":true,"tsType":{"repr":"number","kind":"keyword","keyword":"number"}},{"name":"category","location":{"filename":"deno.ts","line":2078,"col":4},"jsDoc":"The category of the diagnostic.","params":[],"computed":false,"optional":false,"tsType":{"repr":"DiagnosticCategory","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"DiagnosticCategory"}}},{"name":"code","location":{"filename":"deno.ts","line":2080,"col":4},"jsDoc":"A number identifier.","params":[],"computed":false,"optional":false,"tsType":{"repr":"number","kind":"keyword","keyword":"number"}},{"name":"startColumn","location":{"filename":"deno.ts","line":2082,"col":4},"jsDoc":"The the start column of the sourceLine related to the diagnostic.","params":[],"computed":false,"optional":true,"tsType":{"repr":"number","kind":"keyword","keyword":"number"}},{"name":"endColumn","location":{"filename":"deno.ts","line":2084,"col":4},"jsDoc":"The end column of the sourceLine related to the diagnostic.","params":[],"computed":false,"optional":true,"tsType":{"repr":"number","kind":"keyword","keyword":"number"}}],"callSignatures":[]}},{"kind":"interface","name":"Diagnostic","location":{"filename":"deno.ts","line":2087,"col":2},"jsDoc":null,"interfaceDef":{"methods":[],"properties":[{"name":"items","location":{"filename":"deno.ts","line":2089,"col":4},"jsDoc":"An array of diagnostic items.","params":[],"computed":false,"optional":false,"tsType":{"repr":"","kind":"array","array":{"repr":"DiagnosticItem","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"DiagnosticItem"}}}}],"callSignatures":[]}},{"kind":"function","name":"formatDiagnostics","location":{"filename":"deno.ts","line":2097,"col":2},"jsDoc":"**UNSTABLE**: new API, yet to be vetted.\n\nFormat an array of diagnostic items and return them as a single string.\n@param items An array of diagnostic items to format","functionDef":{"params":[{"name":"items","tsType":{"repr":"","kind":"array","array":{"repr":"DiagnosticItem","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"DiagnosticItem"}}}}],"returnType":{"repr":"string","kind":"keyword","keyword":"string"},"isAsync":false,"isGenerator":false}},{"kind":"interface","name":"CompilerOptions","location":{"filename":"deno.ts","line":2103,"col":2},"jsDoc":"**UNSTABLE**: new API, yet to be vetted.\n\nA specific subset TypeScript compiler options that can be supported by the\nDeno TypeScript compiler.","interfaceDef":{"methods":[],"properties":[{"name":"allowJs","location":{"filename":"deno.ts","line":2105,"col":4},"jsDoc":"Allow JavaScript files to be compiled. Defaults to `true`.","params":[],"computed":false,"optional":true,"tsType":{"repr":"boolean","kind":"keyword","keyword":"boolean"}},{"name":"allowSyntheticDefaultImports","location":{"filename":"deno.ts","line":2108,"col":4},"jsDoc":"Allow default imports from modules with no default export. This does not\naffect code emit, just typechecking. Defaults to `false`.","params":[],"computed":false,"optional":true,"tsType":{"repr":"boolean","kind":"keyword","keyword":"boolean"}},{"name":"allowUmdGlobalAccess","location":{"filename":"deno.ts","line":2110,"col":4},"jsDoc":"Allow accessing UMD globals from modules. Defaults to `false`.","params":[],"computed":false,"optional":true,"tsType":{"repr":"boolean","kind":"keyword","keyword":"boolean"}},{"name":"allowUnreachableCode","location":{"filename":"deno.ts","line":2112,"col":4},"jsDoc":"Do not report errors on unreachable code. Defaults to `false`.","params":[],"computed":false,"optional":true,"tsType":{"repr":"boolean","kind":"keyword","keyword":"boolean"}},{"name":"allowUnusedLabels","location":{"filename":"deno.ts","line":2114,"col":4},"jsDoc":"Do not report errors on unused labels. Defaults to `false`","params":[],"computed":false,"optional":true,"tsType":{"repr":"boolean","kind":"keyword","keyword":"boolean"}},{"name":"alwaysStrict","location":{"filename":"deno.ts","line":2117,"col":4},"jsDoc":"Parse in strict mode and emit `\"use strict\"` for each source file.\nDefaults to `true`.","params":[],"computed":false,"optional":true,"tsType":{"repr":"boolean","kind":"keyword","keyword":"boolean"}},{"name":"baseUrl","location":{"filename":"deno.ts","line":2120,"col":4},"jsDoc":"Base directory to resolve non-relative module names. Defaults to\n`undefined`.","params":[],"computed":false,"optional":true,"tsType":{"repr":"string","kind":"keyword","keyword":"string"}},{"name":"checkJs","location":{"filename":"deno.ts","line":2123,"col":4},"jsDoc":"Report errors in `.js` files. Use in conjunction with `allowJs`. Defaults\nto `false`.","params":[],"computed":false,"optional":true,"tsType":{"repr":"boolean","kind":"keyword","keyword":"boolean"}},{"name":"declaration","location":{"filename":"deno.ts","line":2125,"col":4},"jsDoc":"Generates corresponding `.d.ts` file. Defaults to `false`.","params":[],"computed":false,"optional":true,"tsType":{"repr":"boolean","kind":"keyword","keyword":"boolean"}},{"name":"declarationDir","location":{"filename":"deno.ts","line":2127,"col":4},"jsDoc":"Output directory for generated declaration files.","params":[],"computed":false,"optional":true,"tsType":{"repr":"string","kind":"keyword","keyword":"string"}},{"name":"declarationMap","location":{"filename":"deno.ts","line":2130,"col":4},"jsDoc":"Generates a source map for each corresponding `.d.ts` file. Defaults to\n`false`.","params":[],"computed":false,"optional":true,"tsType":{"repr":"boolean","kind":"keyword","keyword":"boolean"}},{"name":"downlevelIteration","location":{"filename":"deno.ts","line":2133,"col":4},"jsDoc":"Provide full support for iterables in `for..of`, spread and\ndestructuring when targeting ES5 or ES3. Defaults to `false`.","params":[],"computed":false,"optional":true,"tsType":{"repr":"boolean","kind":"keyword","keyword":"boolean"}},{"name":"emitBOM","location":{"filename":"deno.ts","line":2136,"col":4},"jsDoc":"Emit a UTF-8 Byte Order Mark (BOM) in the beginning of output files.\nDefaults to `false`.","params":[],"computed":false,"optional":true,"tsType":{"repr":"boolean","kind":"keyword","keyword":"boolean"}},{"name":"emitDeclarationOnly","location":{"filename":"deno.ts","line":2138,"col":4},"jsDoc":"Only emit `.d.ts` declaration files. Defaults to `false`.","params":[],"computed":false,"optional":true,"tsType":{"repr":"boolean","kind":"keyword","keyword":"boolean"}},{"name":"emitDecoratorMetadata","location":{"filename":"deno.ts","line":2142,"col":4},"jsDoc":"Emit design-type metadata for decorated declarations in source. See issue\n[microsoft/TypeScript#2577](https://github.com/Microsoft/TypeScript/issues/2577)\nfor details. Defaults to `false`.","params":[],"computed":false,"optional":true,"tsType":{"repr":"boolean","kind":"keyword","keyword":"boolean"}},{"name":"esModuleInterop","location":{"filename":"deno.ts","line":2146,"col":4},"jsDoc":"Emit `__importStar` and `__importDefault` helpers for runtime babel\necosystem compatibility and enable `allowSyntheticDefaultImports` for type\nsystem compatibility. Defaults to `true`.","params":[],"computed":false,"optional":true,"tsType":{"repr":"boolean","kind":"keyword","keyword":"boolean"}},{"name":"experimentalDecorators","location":{"filename":"deno.ts","line":2148,"col":4},"jsDoc":"Enables experimental support for ES decorators. Defaults to `false`.","params":[],"computed":false,"optional":true,"tsType":{"repr":"boolean","kind":"keyword","keyword":"boolean"}},{"name":"inlineSourceMap","location":{"filename":"deno.ts","line":2151,"col":4},"jsDoc":"Emit a single file with source maps instead of having a separate file.\nDefaults to `false`.","params":[],"computed":false,"optional":true,"tsType":{"repr":"boolean","kind":"keyword","keyword":"boolean"}},{"name":"inlineSources","location":{"filename":"deno.ts","line":2154,"col":4},"jsDoc":"Emit the source alongside the source maps within a single file; requires\n`inlineSourceMap` or `sourceMap` to be set. Defaults to `false`.","params":[],"computed":false,"optional":true,"tsType":{"repr":"boolean","kind":"keyword","keyword":"boolean"}},{"name":"isolatedModules","location":{"filename":"deno.ts","line":2157,"col":4},"jsDoc":"Perform additional checks to ensure that transpile only would be safe.\nDefaults to `false`.","params":[],"computed":false,"optional":true,"tsType":{"repr":"boolean","kind":"keyword","keyword":"boolean"}},{"name":"jsx","location":{"filename":"deno.ts","line":2160,"col":4},"jsDoc":"Support JSX in `.tsx` files: `\"react\"`, `\"preserve\"`, `\"react-native\"`.\nDefaults to `\"react\"`.","params":[],"computed":false,"optional":true,"tsType":{"repr":"","kind":"union","union":[{"repr":"react","kind":"literal","literal":{"kind":"string","string":"react"}},{"repr":"preserve","kind":"literal","literal":{"kind":"string","string":"preserve"}},{"repr":"react-native","kind":"literal","literal":{"kind":"string","string":"react-native"}}]}},{"name":"jsxFactory","location":{"filename":"deno.ts","line":2163,"col":4},"jsDoc":"Specify the JSX factory function to use when targeting react JSX emit,\ne.g. `React.createElement` or `h`. Defaults to `React.createElement`.","params":[],"computed":false,"optional":true,"tsType":{"repr":"string","kind":"keyword","keyword":"string"}},{"name":"keyofStringsOnly","location":{"filename":"deno.ts","line":2166,"col":4},"jsDoc":"Resolve keyof to string valued property names only (no numbers or\nsymbols). Defaults to `false`.","params":[],"computed":false,"optional":true,"tsType":{"repr":"string","kind":"keyword","keyword":"string"}},{"name":"useDefineForClassFields","location":{"filename":"deno.ts","line":2169,"col":4},"jsDoc":"Emit class fields with ECMAScript-standard semantics. Defaults to `false`.\nDoes not apply to `\"esnext\"` target.","params":[],"computed":false,"optional":true,"tsType":{"repr":"boolean","kind":"keyword","keyword":"boolean"}},{"name":"lib","location":{"filename":"deno.ts","line":2172,"col":4},"jsDoc":"List of library files to be included in the compilation. If omitted,\nthen the Deno main runtime libs are used.","params":[],"computed":false,"optional":true,"tsType":{"repr":"","kind":"array","array":{"repr":"string","kind":"keyword","keyword":"string"}}},{"name":"locale","location":{"filename":"deno.ts","line":2174,"col":4},"jsDoc":"The locale to use to show error messages.","params":[],"computed":false,"optional":true,"tsType":{"repr":"string","kind":"keyword","keyword":"string"}},{"name":"mapRoot","location":{"filename":"deno.ts","line":2180,"col":4},"jsDoc":"Specifies the location where debugger should locate map files instead of\ngenerated locations. Use this flag if the `.map` files will be located at\nrun-time in a different location than the `.js` files. The location\nspecified will be embedded in the source map to direct the debugger where\nthe map files will be located. Defaults to `undefined`.","params":[],"computed":false,"optional":true,"tsType":{"repr":"string","kind":"keyword","keyword":"string"}},{"name":"module","location":{"filename":"deno.ts","line":2183,"col":4},"jsDoc":"Specify the module format for the emitted code. Defaults to\n`\"esnext\"`.","params":[],"computed":false,"optional":true,"tsType":{"repr":"","kind":"union","union":[{"repr":"none","kind":"literal","literal":{"kind":"string","string":"none"}},{"repr":"commonjs","kind":"literal","literal":{"kind":"string","string":"commonjs"}},{"repr":"amd","kind":"literal","literal":{"kind":"string","string":"amd"}},{"repr":"system","kind":"literal","literal":{"kind":"string","string":"system"}},{"repr":"umd","kind":"literal","literal":{"kind":"string","string":"umd"}},{"repr":"es6","kind":"literal","literal":{"kind":"string","string":"es6"}},{"repr":"es2015","kind":"literal","literal":{"kind":"string","string":"es2015"}},{"repr":"esnext","kind":"literal","literal":{"kind":"string","string":"esnext"}}]}},{"name":"noEmitHelpers","location":{"filename":"deno.ts","line":2194,"col":4},"jsDoc":"Do not generate custom helper functions like `__extends` in compiled\noutput. Defaults to `false`.","params":[],"computed":false,"optional":true,"tsType":{"repr":"boolean","kind":"keyword","keyword":"boolean"}},{"name":"noFallthroughCasesInSwitch","location":{"filename":"deno.ts","line":2197,"col":4},"jsDoc":"Report errors for fallthrough cases in switch statement. Defaults to\n`false`.","params":[],"computed":false,"optional":true,"tsType":{"repr":"boolean","kind":"keyword","keyword":"boolean"}},{"name":"noImplicitAny","location":{"filename":"deno.ts","line":2200,"col":4},"jsDoc":"Raise error on expressions and declarations with an implied any type.\nDefaults to `true`.","params":[],"computed":false,"optional":true,"tsType":{"repr":"boolean","kind":"keyword","keyword":"boolean"}},{"name":"noImplicitReturns","location":{"filename":"deno.ts","line":2203,"col":4},"jsDoc":"Report an error when not all code paths in function return a value.\nDefaults to `false`.","params":[],"computed":false,"optional":true,"tsType":{"repr":"boolean","kind":"keyword","keyword":"boolean"}},{"name":"noImplicitThis","location":{"filename":"deno.ts","line":2206,"col":4},"jsDoc":"Raise error on `this` expressions with an implied `any` type. Defaults to\n`true`.","params":[],"computed":false,"optional":true,"tsType":{"repr":"boolean","kind":"keyword","keyword":"boolean"}},{"name":"noImplicitUseStrict","location":{"filename":"deno.ts","line":2209,"col":4},"jsDoc":"Do not emit `\"use strict\"` directives in module output. Defaults to\n`false`.","params":[],"computed":false,"optional":true,"tsType":{"repr":"boolean","kind":"keyword","keyword":"boolean"}},{"name":"noResolve","location":{"filename":"deno.ts","line":2212,"col":4},"jsDoc":"Do not add triple-slash references or module import targets to the list of\ncompiled files. Defaults to `false`.","params":[],"computed":false,"optional":true,"tsType":{"repr":"boolean","kind":"keyword","keyword":"boolean"}},{"name":"noStrictGenericChecks","location":{"filename":"deno.ts","line":2215,"col":4},"jsDoc":"Disable strict checking of generic signatures in function types. Defaults\nto `false`.","params":[],"computed":false,"optional":true,"tsType":{"repr":"boolean","kind":"keyword","keyword":"boolean"}},{"name":"noUnusedLocals","location":{"filename":"deno.ts","line":2217,"col":4},"jsDoc":"Report errors on unused locals. Defaults to `false`.","params":[],"computed":false,"optional":true,"tsType":{"repr":"boolean","kind":"keyword","keyword":"boolean"}},{"name":"noUnusedParameters","location":{"filename":"deno.ts","line":2219,"col":4},"jsDoc":"Report errors on unused parameters. Defaults to `false`.","params":[],"computed":false,"optional":true,"tsType":{"repr":"boolean","kind":"keyword","keyword":"boolean"}},{"name":"outDir","location":{"filename":"deno.ts","line":2223,"col":4},"jsDoc":"Redirect output structure to the directory. This only impacts\n`Deno.compile` and only changes the emitted file names. Defaults to\n`undefined`.","params":[],"computed":false,"optional":true,"tsType":{"repr":"string","kind":"keyword","keyword":"string"}},{"name":"paths","location":{"filename":"deno.ts","line":2226,"col":4},"jsDoc":"List of path mapping entries for module names to locations relative to the\n`baseUrl`. Defaults to `undefined`.","params":[],"computed":false,"optional":true,"tsType":{"repr":"Record","kind":"typeRef","typeRef":{"typeParams":[{"repr":"string","kind":"keyword","keyword":"string"},{"repr":"","kind":"array","array":{"repr":"string","kind":"keyword","keyword":"string"}}],"typeName":"Record"}}},{"name":"preserveConstEnums","location":{"filename":"deno.ts","line":2229,"col":4},"jsDoc":"Do not erase const enum declarations in generated code. Defaults to\n`false`.","params":[],"computed":false,"optional":true,"tsType":{"repr":"boolean","kind":"keyword","keyword":"boolean"}},{"name":"removeComments","location":{"filename":"deno.ts","line":2232,"col":4},"jsDoc":"Remove all comments except copy-right header comments beginning with\n`/*!`. Defaults to `true`.","params":[],"computed":false,"optional":true,"tsType":{"repr":"boolean","kind":"keyword","keyword":"boolean"}},{"name":"resolveJsonModule","location":{"filename":"deno.ts","line":2234,"col":4},"jsDoc":"Include modules imported with `.json` extension. Defaults to `true`.","params":[],"computed":false,"optional":true,"tsType":{"repr":"boolean","kind":"keyword","keyword":"boolean"}},{"name":"rootDir","location":{"filename":"deno.ts","line":2237,"col":4},"jsDoc":"Specifies the root directory of input files. Only use to control the\noutput directory structure with `outDir`. Defaults to `undefined`.","params":[],"computed":false,"optional":true,"tsType":{"repr":"string","kind":"keyword","keyword":"string"}},{"name":"rootDirs","location":{"filename":"deno.ts","line":2240,"col":4},"jsDoc":"List of _root_ folders whose combined content represent the structure of\nthe project at runtime. Defaults to `undefined`.","params":[],"computed":false,"optional":true,"tsType":{"repr":"","kind":"array","array":{"repr":"string","kind":"keyword","keyword":"string"}}},{"name":"sourceMap","location":{"filename":"deno.ts","line":2242,"col":4},"jsDoc":"Generates corresponding `.map` file. Defaults to `false`.","params":[],"computed":false,"optional":true,"tsType":{"repr":"boolean","kind":"keyword","keyword":"boolean"}},{"name":"sourceRoot","location":{"filename":"deno.ts","line":2248,"col":4},"jsDoc":"Specifies the location where debugger should locate TypeScript files\ninstead of source locations. Use this flag if the sources will be located\nat run-time in a different location than that at design-time. The location\nspecified will be embedded in the sourceMap to direct the debugger where\nthe source files will be located. Defaults to `undefined`.","params":[],"computed":false,"optional":true,"tsType":{"repr":"string","kind":"keyword","keyword":"string"}},{"name":"strict","location":{"filename":"deno.ts","line":2253,"col":4},"jsDoc":"Enable all strict type checking options. Enabling `strict` enables\n`noImplicitAny`, `noImplicitThis`, `alwaysStrict`, `strictBindCallApply`,\n`strictNullChecks`, `strictFunctionTypes` and\n`strictPropertyInitialization`. Defaults to `true`.","params":[],"computed":false,"optional":true,"tsType":{"repr":"boolean","kind":"keyword","keyword":"boolean"}},{"name":"strictBindCallApply","location":{"filename":"deno.ts","line":2256,"col":4},"jsDoc":"Enable stricter checking of the `bind`, `call`, and `apply` methods on\nfunctions. Defaults to `true`.","params":[],"computed":false,"optional":true,"tsType":{"repr":"boolean","kind":"keyword","keyword":"boolean"}},{"name":"strictFunctionTypes","location":{"filename":"deno.ts","line":2259,"col":4},"jsDoc":"Disable bivariant parameter checking for function types. Defaults to\n`true`.","params":[],"computed":false,"optional":true,"tsType":{"repr":"boolean","kind":"keyword","keyword":"boolean"}},{"name":"strictPropertyInitialization","location":{"filename":"deno.ts","line":2263,"col":4},"jsDoc":"Ensure non-undefined class properties are initialized in the constructor.\nThis option requires `strictNullChecks` be enabled in order to take effect.\nDefaults to `true`.","params":[],"computed":false,"optional":true,"tsType":{"repr":"boolean","kind":"keyword","keyword":"boolean"}},{"name":"strictNullChecks","location":{"filename":"deno.ts","line":2267,"col":4},"jsDoc":"In strict null checking mode, the `null` and `undefined` values are not in\nthe domain of every type and are only assignable to themselves and `any`\n(the one exception being that `undefined` is also assignable to `void`).","params":[],"computed":false,"optional":true,"tsType":{"repr":"boolean","kind":"keyword","keyword":"boolean"}},{"name":"suppressExcessPropertyErrors","location":{"filename":"deno.ts","line":2270,"col":4},"jsDoc":"Suppress excess property checks for object literals. Defaults to\n`false`.","params":[],"computed":false,"optional":true,"tsType":{"repr":"boolean","kind":"keyword","keyword":"boolean"}},{"name":"suppressImplicitAnyIndexErrors","location":{"filename":"deno.ts","line":2273,"col":4},"jsDoc":"Suppress `noImplicitAny` errors for indexing objects lacking index\nsignatures.","params":[],"computed":false,"optional":true,"tsType":{"repr":"boolean","kind":"keyword","keyword":"boolean"}},{"name":"target","location":{"filename":"deno.ts","line":2275,"col":4},"jsDoc":"Specify ECMAScript target version. Defaults to `esnext`.","params":[],"computed":false,"optional":true,"tsType":{"repr":"","kind":"union","union":[{"repr":"es3","kind":"literal","literal":{"kind":"string","string":"es3"}},{"repr":"es5","kind":"literal","literal":{"kind":"string","string":"es5"}},{"repr":"es6","kind":"literal","literal":{"kind":"string","string":"es6"}},{"repr":"es2015","kind":"literal","literal":{"kind":"string","string":"es2015"}},{"repr":"es2016","kind":"literal","literal":{"kind":"string","string":"es2016"}},{"repr":"es2017","kind":"literal","literal":{"kind":"string","string":"es2017"}},{"repr":"es2018","kind":"literal","literal":{"kind":"string","string":"es2018"}},{"repr":"es2019","kind":"literal","literal":{"kind":"string","string":"es2019"}},{"repr":"es2020","kind":"literal","literal":{"kind":"string","string":"es2020"}},{"repr":"esnext","kind":"literal","literal":{"kind":"string","string":"esnext"}}]}},{"name":"types","location":{"filename":"deno.ts","line":2300,"col":4},"jsDoc":"List of names of type definitions to include. Defaults to `undefined`.\n\nThe type definitions are resolved according to the normal Deno resolution\nirrespective of if sources are provided on the call. Like other Deno\nmodules, there is no \"magical\" resolution. For example:\n\n     Deno.compile(\n       \"./foo.js\",\n       undefined,\n       {\n         types: [ \"./foo.d.ts\", \"https://deno.land/x/example/types.d.ts\" ]\n       }\n     );","params":[],"computed":false,"optional":true,"tsType":{"repr":"","kind":"array","array":{"repr":"string","kind":"keyword","keyword":"string"}}}],"callSignatures":[]}},{"kind":"interface","name":"TranspileOnlyResult","location":{"filename":"deno.ts","line":2307,"col":2},"jsDoc":"**UNSTABLE**: new API, yet to be vetted.\n\nThe results of a transpile only command, where the `source` contains the\nemitted source, and `map` optionally contains the source map.","interfaceDef":{"methods":[],"properties":[{"name":"source","location":{"filename":"deno.ts","line":2308,"col":4},"jsDoc":null,"params":[],"computed":false,"optional":false,"tsType":{"repr":"string","kind":"keyword","keyword":"string"}},{"name":"map","location":{"filename":"deno.ts","line":2309,"col":4},"jsDoc":null,"params":[],"computed":false,"optional":true,"tsType":{"repr":"string","kind":"keyword","keyword":"string"}}],"callSignatures":[]}},{"kind":"function","name":"transpileOnly","location":{"filename":"deno.ts","line":2333,"col":2},"jsDoc":"**UNSTABLE**: new API, yet to be vetted.\n\nTakes a set of TypeScript sources and resolves to a map where the key was\nthe original file name provided in sources and the result contains the\n`source` and optionally the `map` from the transpile operation. This does no\ntype checking and validation, it effectively \"strips\" the types from the\nfile.\n\n     const results =  await Deno.transpileOnly({\n       \"foo.ts\": `const foo: string = \"foo\";`\n     });\n\n@param sources A map where the key is the filename and the value is the text\n               to transpile. The filename is only used in the transpile and\n               not resolved, for example to fill in the source name in the\n               source map.\n@param options An option object of options to send to the compiler. This is\n               a subset of ts.CompilerOptions which can be supported by Deno.\n               Many of the options related to type checking and emitting\n               type declaration files will have no impact on the output.","functionDef":{"params":[{"name":"sources","tsType":{"repr":"Record","kind":"typeRef","typeRef":{"typeParams":[{"repr":"string","kind":"keyword","keyword":"string"},{"repr":"string","kind":"keyword","keyword":"string"}],"typeName":"Record"}}},{"name":"options","tsType":{"repr":"CompilerOptions","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"CompilerOptions"}}}],"returnType":{"repr":"Promise","kind":"typeRef","typeRef":{"typeParams":[{"repr":"Record","kind":"typeRef","typeRef":{"typeParams":[{"repr":"string","kind":"keyword","keyword":"string"},{"repr":"TranspileOnlyResult","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"TranspileOnlyResult"}}],"typeName":"Record"}}],"typeName":"Promise"}},"isAsync":false,"isGenerator":false}},{"kind":"function","name":"compile","location":{"filename":"deno.ts","line":2367,"col":2},"jsDoc":"**UNSTABLE**: new API, yet to be vetted.\n\nTakes a root module name, any optionally a record set of sources. Resolves\nwith a compiled set of modules. If just a root name is provided, the modules\nwill be resolved as if the root module had been passed on the command line.\n\nIf sources are passed, all modules will be resolved out of this object, where\nthe key is the module name and the value is the content. The extension of\nthe module name will be used to determine the media type of the module.\n\n     const [ maybeDiagnostics1, output1 ] = await Deno.compile(\"foo.ts\");\n\n     const [ maybeDiagnostics2, output2 ] = await Deno.compile(\"/foo.ts\", {\n       \"/foo.ts\": `export * from \"./bar.ts\";`,\n       \"/bar.ts\": `export const bar = \"bar\";`\n     });\n\n@param rootName The root name of the module which will be used as the\n                \"starting point\". If no `sources` is specified, Deno will\n                resolve the module externally as if the `rootName` had been\n                specified on the command line.\n@param sources An optional key/value map of sources to be used when resolving\n               modules, where the key is the module name, and the value is\n               the source content. The extension of the key will determine\n               the media type of the file when processing. If supplied,\n               Deno will not attempt to resolve any modules externally.\n@param options An optional object of options to send to the compiler. This is\n               a subset of ts.CompilerOptions which can be supported by Deno.","functionDef":{"params":[{"name":"rootName","tsType":{"repr":"string","kind":"keyword","keyword":"string"}},{"name":"sources","tsType":{"repr":"Record","kind":"typeRef","typeRef":{"typeParams":[{"repr":"string","kind":"keyword","keyword":"string"},{"repr":"string","kind":"keyword","keyword":"string"}],"typeName":"Record"}}},{"name":"options","tsType":{"repr":"CompilerOptions","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"CompilerOptions"}}}],"returnType":{"repr":"Promise","kind":"typeRef","typeRef":{"typeParams":[{"repr":"","kind":"tuple","tuple":[{"repr":"","kind":"union","union":[{"repr":"","kind":"array","array":{"repr":"DiagnosticItem","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"DiagnosticItem"}}},{"repr":"undefined","kind":"keyword","keyword":"undefined"}]},{"repr":"Record","kind":"typeRef","typeRef":{"typeParams":[{"repr":"string","kind":"keyword","keyword":"string"},{"repr":"string","kind":"keyword","keyword":"string"}],"typeName":"Record"}}]}],"typeName":"Promise"}},"isAsync":false,"isGenerator":false}},{"kind":"function","name":"bundle","location":{"filename":"deno.ts","line":2408,"col":2},"jsDoc":"**UNSTABLE**: new API, yet to be vetted.\n\n`bundle()` is part the compiler API.  A full description of this functionality\ncan be found in the [manual](https://deno.land/std/manual.md#denobundle).\n\nTakes a root module name, and optionally a record set of sources. Resolves\nwith a single JavaScript string (and bundle diagnostics if issues arise with\nthe bundling) that is like the output of a `deno bundle` command. If just\na root name is provided, the modules will be resolved as if the root module\nhad been passed on the command line.\n\nIf sources are passed, all modules will be resolved out of this object, where\nthe key is the module name and the value is the content. The extension of the\nmodule name will be used to determine the media type of the module.\n\n     //equivalent to \"deno bundle foo.ts\" from the command line\n     const [ maybeDiagnostics1, output1 ] = await Deno.bundle(\"foo.ts\");\n\n     const [ maybeDiagnostics2, output2 ] = await Deno.bundle(\"/foo.ts\", {\n       \"/foo.ts\": `export * from \"./bar.ts\";`,\n       \"/bar.ts\": `export const bar = \"bar\";`\n     });\n\n@param rootName The root name of the module which will be used as the\n                \"starting point\". If no `sources` is specified, Deno will\n                resolve the module externally as if the `rootName` had been\n                specified on the command line.\n@param sources An optional key/value map of sources to be used when resolving\n               modules, where the key is the module name, and the value is\n               the source content. The extension of the key will determine\n               the media type of the file when processing. If supplied,\n               Deno will not attempt to resolve any modules externally.\n@param options An optional object of options to send to the compiler. This is\n               a subset of ts.CompilerOptions which can be supported by Deno.","functionDef":{"params":[{"name":"rootName","tsType":{"repr":"string","kind":"keyword","keyword":"string"}},{"name":"sources","tsType":{"repr":"Record","kind":"typeRef","typeRef":{"typeParams":[{"repr":"string","kind":"keyword","keyword":"string"},{"repr":"string","kind":"keyword","keyword":"string"}],"typeName":"Record"}}},{"name":"options","tsType":{"repr":"CompilerOptions","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"CompilerOptions"}}}],"returnType":{"repr":"Promise","kind":"typeRef","typeRef":{"typeParams":[{"repr":"","kind":"tuple","tuple":[{"repr":"","kind":"union","union":[{"repr":"","kind":"array","array":{"repr":"DiagnosticItem","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"DiagnosticItem"}}},{"repr":"undefined","kind":"keyword","keyword":"undefined"}]},{"repr":"string","kind":"keyword","keyword":"string"}]}],"typeName":"Promise"}},"isAsync":false,"isGenerator":false}},{"kind":"variable","name":"args","location":{"filename":"deno.ts","line":2423,"col":2},"jsDoc":"Returns the script arguments to the program. If for example we run a\nprogram:\n\n     deno --allow-read https://deno.land/std/examples/cat.ts /etc/passwd\n\nThen `Deno.args` will contain:\n\n     [ \"/etc/passwd\" ]","variableDef":{"tsType":{"repr":"","kind":"array","array":{"repr":"string","kind":"keyword","keyword":"string"}},"kind":"const"}},{"kind":"class","name":"SignalStream","location":{"filename":"deno.ts","line":2429,"col":2},"jsDoc":"**UNSTABLE**: new API, yet to be vetted.\n\nRepresents the stream of signals, implements both `AsyncIterator` and\n`PromiseLike`.","classDef":{"isAbstract":false,"constructors":[{"jsDoc":null,"accessibility":null,"name":"constructor","params":[{"name":"signal","tsType":{"repr":"Deno.Signal","kind":"typeQuery","typeQuery":"Deno.Signal"}}],"location":{"filename":"deno.ts","line":2431,"col":4}}],"properties":[],"methods":[{"jsDoc":null,"accessibility":null,"isAbstract":false,"isStatic":false,"name":"then","kind":"method","functionDef":{"params":[{"name":"f","tsType":{"repr":"","kind":"fnOrConstructor","fnOrConstructor":{"constructor":false,"tsType":{"repr":"","kind":"union","union":[{"repr":"T","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"T"}},{"repr":"Promise","kind":"typeRef","typeRef":{"typeParams":[{"repr":"T","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"T"}}],"typeName":"Promise"}}]},"params":[{"name":"v","tsType":{"repr":"void","kind":"keyword","keyword":"void"}}]}}},{"name":"g","tsType":{"repr":"","kind":"fnOrConstructor","fnOrConstructor":{"constructor":false,"tsType":{"repr":"","kind":"union","union":[{"repr":"S","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"S"}},{"repr":"Promise","kind":"typeRef","typeRef":{"typeParams":[{"repr":"S","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"S"}}],"typeName":"Promise"}}]},"params":[{"name":"v","tsType":{"repr":"void","kind":"keyword","keyword":"void"}}]}}}],"returnType":{"repr":"Promise","kind":"typeRef","typeRef":{"typeParams":[{"repr":"","kind":"union","union":[{"repr":"T","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"T"}},{"repr":"S","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"S"}}]}],"typeName":"Promise"}},"isAsync":false,"isGenerator":false},"location":{"filename":"deno.ts","line":2432,"col":4}},{"jsDoc":null,"accessibility":null,"isAbstract":false,"isStatic":false,"name":"next","kind":"method","functionDef":{"params":[],"returnType":{"repr":"Promise","kind":"typeRef","typeRef":{"typeParams":[{"repr":"IteratorResult","kind":"typeRef","typeRef":{"typeParams":[{"repr":"void","kind":"keyword","keyword":"void"}],"typeName":"IteratorResult"}}],"typeName":"Promise"}},"isAsync":false,"isGenerator":false},"location":{"filename":"deno.ts","line":2436,"col":4}},{"jsDoc":null,"accessibility":null,"isAbstract":false,"isStatic":false,"name":"[Symbol.asyncIterator]","kind":"method","functionDef":{"params":[],"returnType":{"repr":"AsyncIterableIterator","kind":"typeRef","typeRef":{"typeParams":[{"repr":"void","kind":"keyword","keyword":"void"}],"typeName":"AsyncIterableIterator"}},"isAsync":false,"isGenerator":false},"location":{"filename":"deno.ts","line":2437,"col":4}},{"jsDoc":null,"accessibility":null,"isAbstract":false,"isStatic":false,"name":"dispose","kind":"method","functionDef":{"params":[],"returnType":{"repr":"void","kind":"keyword","keyword":"void"},"isAsync":false,"isGenerator":false},"location":{"filename":"deno.ts","line":2438,"col":4}}]}},{"kind":"function","name":"signal","location":{"filename":"deno.ts","line":2467,"col":2},"jsDoc":"**UNSTABLE**: new API, yet to be vetted.\n\nReturns the stream of the given signal number. You can use it as an async\niterator.\n\n     for await (const _ of Deno.signal(Deno.Signal.SIGTERM)) {\n       console.log(\"got SIGTERM!\");\n     }\n\nYou can also use it as a promise. In this case you can only receive the\nfirst one.\n\n     await Deno.signal(Deno.Signal.SIGTERM);\n     console.log(\"SIGTERM received!\")\n\nIf you want to stop receiving the signals, you can use `.dispose()` method\nof the signal stream object.\n\n     const sig = Deno.signal(Deno.Signal.SIGTERM);\n     setTimeout(() => { sig.dispose(); }, 5000);\n     for await (const _ of sig) {\n       console.log(\"SIGTERM!\")\n     }\n\nThe above for-await loop exits after 5 seconds when `sig.dispose()` is\ncalled.","functionDef":{"params":[{"name":"signo","tsType":{"repr":"number","kind":"keyword","keyword":"number"}}],"returnType":{"repr":"SignalStream","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"SignalStream"}},"isAsync":false,"isGenerator":false}},{"kind":"variable","name":"signals","location":{"filename":"deno.ts","line":2470,"col":2},"jsDoc":"**UNSTABLE**: new API, yet to be vetted.","variableDef":{"tsType":{"repr":"","kind":"typeLiteral","typeLiteral":{"methods":[],"properties":[{"name":"alarm","params":[],"computed":false,"optional":false,"tsType":{"repr":"","kind":"fnOrConstructor","fnOrConstructor":{"constructor":false,"tsType":{"repr":"SignalStream","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"SignalStream"}},"params":[]}}},{"name":"child","params":[],"computed":false,"optional":false,"tsType":{"repr":"","kind":"fnOrConstructor","fnOrConstructor":{"constructor":false,"tsType":{"repr":"SignalStream","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"SignalStream"}},"params":[]}}},{"name":"hungup","params":[],"computed":false,"optional":false,"tsType":{"repr":"","kind":"fnOrConstructor","fnOrConstructor":{"constructor":false,"tsType":{"repr":"SignalStream","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"SignalStream"}},"params":[]}}},{"name":"interrupt","params":[],"computed":false,"optional":false,"tsType":{"repr":"","kind":"fnOrConstructor","fnOrConstructor":{"constructor":false,"tsType":{"repr":"SignalStream","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"SignalStream"}},"params":[]}}},{"name":"io","params":[],"computed":false,"optional":false,"tsType":{"repr":"","kind":"fnOrConstructor","fnOrConstructor":{"constructor":false,"tsType":{"repr":"SignalStream","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"SignalStream"}},"params":[]}}},{"name":"pipe","params":[],"computed":false,"optional":false,"tsType":{"repr":"","kind":"fnOrConstructor","fnOrConstructor":{"constructor":false,"tsType":{"repr":"SignalStream","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"SignalStream"}},"params":[]}}},{"name":"quit","params":[],"computed":false,"optional":false,"tsType":{"repr":"","kind":"fnOrConstructor","fnOrConstructor":{"constructor":false,"tsType":{"repr":"SignalStream","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"SignalStream"}},"params":[]}}},{"name":"terminate","params":[],"computed":false,"optional":false,"tsType":{"repr":"","kind":"fnOrConstructor","fnOrConstructor":{"constructor":false,"tsType":{"repr":"SignalStream","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"SignalStream"}},"params":[]}}},{"name":"userDefined1","params":[],"computed":false,"optional":false,"tsType":{"repr":"","kind":"fnOrConstructor","fnOrConstructor":{"constructor":false,"tsType":{"repr":"SignalStream","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"SignalStream"}},"params":[]}}},{"name":"userDefined2","params":[],"computed":false,"optional":false,"tsType":{"repr":"","kind":"fnOrConstructor","fnOrConstructor":{"constructor":false,"tsType":{"repr":"SignalStream","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"SignalStream"}},"params":[]}}},{"name":"windowChange","params":[],"computed":false,"optional":false,"tsType":{"repr":"","kind":"fnOrConstructor","fnOrConstructor":{"constructor":false,"tsType":{"repr":"SignalStream","kind":"typeRef","typeRef":{"typeParams":null,"typeName":"SignalStream"}},"params":[]}}}],"callSignatures":[]}},"kind":"const"}},{"kind":"variable","name":"symbols","location":{"filename":"deno.ts","line":2520,"col":2},"jsDoc":"**UNSTABLE**: new API. Maybe move `Deno.EOF` here.\n\nSpecial Deno related symbols.","variableDef":{"tsType":{"repr":"","kind":"typeLiteral","typeLiteral":{"methods":[],"properties":[{"name":"internal","params":[],"computed":false,"optional":false,"tsType":{"repr":"","kind":"typeOperator","typeOperator":{"operator":"unique","tsType":{"repr":"symbol","kind":"keyword","keyword":"symbol"}}}},{"name":"customInspect","params":[],"computed":false,"optional":false,"tsType":{"repr":"","kind":"typeOperator","typeOperator":{"operator":"unique","tsType":{"repr":"symbol","kind":"keyword","keyword":"symbol"}}}}],"callSignatures":[]}},"kind":"const"}}]}}]
