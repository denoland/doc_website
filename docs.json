[
  {
    "kind": "variable",
    "name": "fizz",
    "snippet": "export const fizz = \"fizz\";",
    "location": { "filename": "./bar.ts", "line": 1, "col": 0 },
    "jsDoc": null,
    "variableDef": { "tsType": null, "kind": "const" }
  },
  {
    "kind": "variable",
    "name": "buzz",
    "snippet": "export const buzz = \"buzz\";",
    "location": { "filename": "./bar.ts", "line": 3, "col": 0 },
    "jsDoc": null,
    "variableDef": { "tsType": null, "kind": "const" }
  },
  {
    "kind": "variable",
    "name": "fizzBuzz",
    "snippet": "export const fizzBuzz: string = \"fizzBuzz\";",
    "location": { "filename": "test.ts", "line": 7, "col": 0 },
    "jsDoc": "Something about fizzBuzz",
    "variableDef": {
      "tsType": { "repr": "string", "kind": "keyword", "keyword": "string" },
      "kind": "const"
    }
  },
  {
    "kind": "function",
    "name": "diagnostics",
    "snippet": "export function diagnostics(a: Promise<string>, b: () => Record<string, string>): Promise<[DiagnosticItem[] | undefined, Record<string, string>]>",
    "location": { "filename": "test.ts", "line": 12, "col": 0 },
    "jsDoc": "Complicated function",
    "functionDef": {
      "params": [
        {
          "name": "a",
          "tsType": {
            "repr": "Promise",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": [
                { "repr": "string", "kind": "keyword", "keyword": "string" }
              ],
              "typeName": "Promise"
            }
          }
        },
        {
          "name": "b",
          "tsType": {
            "repr": "",
            "kind": "fnOrConstructor",
            "fnOrConstructor": {
              "constructor": false,
              "tsType": {
                "repr": "Record",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": [
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    { "repr": "string", "kind": "keyword", "keyword": "string" }
                  ],
                  "typeName": "Record"
                }
              },
              "params": []
            }
          }
        }
      ],
      "returnType": {
        "repr": "Promise",
        "kind": "typeRef",
        "typeRef": {
          "typeParams": [
            {
              "repr": "",
              "kind": "tuple",
              "tuple": [
                {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "",
                      "kind": "array",
                      "array": {
                        "repr": "DiagnosticItem",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "DiagnosticItem"
                        }
                      }
                    },
                    {
                      "repr": "undefined",
                      "kind": "keyword",
                      "keyword": "undefined"
                    }
                  ]
                },
                {
                  "repr": "Record",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      }
                    ],
                    "typeName": "Record"
                  }
                }
              ]
            }
          ],
          "typeName": "Promise"
        }
      },
      "isAsync": false,
      "isGenerator": false
    }
  },
  {
    "kind": "function",
    "name": "foo",
    "snippet": "export function foo(a: string, b: number): void",
    "location": { "filename": "test.ts", "line": 23, "col": 0 },
    "jsDoc": "Hello there, this is a multiline JSdoc.\n\nIt has many lines\n\nOr not that many?",
    "functionDef": {
      "params": [
        {
          "name": "a",
          "tsType": { "repr": "string", "kind": "keyword", "keyword": "string" }
        },
        {
          "name": "b",
          "tsType": { "repr": "number", "kind": "keyword", "keyword": "number" }
        }
      ],
      "returnType": { "repr": "void", "kind": "keyword", "keyword": "void" },
      "isAsync": false,
      "isGenerator": false
    }
  },
  {
    "kind": "function",
    "name": "bar",
    "snippet": "export function bar(a: string, b: number): void",
    "location": { "filename": "test.ts", "line": 28, "col": 0 },
    "jsDoc": "This is single line JSdoc",
    "functionDef": {
      "params": [
        {
          "name": "a",
          "tsType": { "repr": "string", "kind": "keyword", "keyword": "string" }
        },
        {
          "name": "b",
          "tsType": { "repr": "number", "kind": "keyword", "keyword": "number" }
        }
      ],
      "returnType": { "repr": "void", "kind": "keyword", "keyword": "void" },
      "isAsync": false,
      "isGenerator": false
    }
  },
  {
    "kind": "class",
    "name": "Foobar",
    "snippet": "export class Foobar extends Fizz implements Buzz",
    "location": { "filename": "test.ts", "line": 33, "col": 0 },
    "jsDoc": "Class doc",
    "classDef": {
      "isAbstract": false,
      "constructors": [
        {
          "jsDoc": "Constructor js doc",
          "snippet": "constructor(name: string, private private2: number, protected protected2: number)",
          "accessibility": null,
          "name": "constructor",
          "params": [
            {
              "name": "name",
              "tsType": {
                "repr": "string",
                "kind": "keyword",
                "keyword": "string"
              }
            },
            { "name": "<TODO>", "tsType": null },
            { "name": "<TODO>", "tsType": null }
          ],
          "location": { "filename": "test.ts", "line": 48, "col": 4 }
        }
      ],
      "properties": [
        {
          "jsDoc": null,
          "snippet": "private private1: boolean;",
          "tsType": {
            "repr": "boolean",
            "kind": "keyword",
            "keyword": "boolean"
          },
          "readonly": false,
          "accessibility": "private",
          "isAbstract": false,
          "isStatic": false,
          "name": "private1",
          "location": { "filename": "test.ts", "line": 34, "col": 4 }
        },
        {
          "jsDoc": "Js doc for protected1",
          "snippet": "protected protected1: number;",
          "tsType": {
            "repr": "number",
            "kind": "keyword",
            "keyword": "number"
          },
          "readonly": false,
          "accessibility": "protected",
          "isAbstract": false,
          "isStatic": false,
          "name": "protected1",
          "location": { "filename": "test.ts", "line": 36, "col": 4 }
        },
        {
          "jsDoc": null,
          "snippet": "public public1: boolean;",
          "tsType": {
            "repr": "boolean",
            "kind": "keyword",
            "keyword": "boolean"
          },
          "readonly": false,
          "accessibility": "public",
          "isAbstract": false,
          "isStatic": false,
          "name": "public1",
          "location": { "filename": "test.ts", "line": 37, "col": 4 }
        },
        {
          "jsDoc": "Js doc for public2\n\nFoobar\n\nFoo",
          "snippet": "public2: number;",
          "tsType": {
            "repr": "number",
            "kind": "keyword",
            "keyword": "number"
          },
          "readonly": false,
          "accessibility": null,
          "isAbstract": false,
          "isStatic": false,
          "name": "public2",
          "location": { "filename": "test.ts", "line": 45, "col": 4 }
        }
      ],
      "methods": [
        {
          "jsDoc": "Async foo method",
          "snippet": "async foo(): Promise<void>",
          "accessibility": null,
          "isAbstract": false,
          "isStatic": false,
          "name": "foo",
          "kind": "method",
          "functionDef": {
            "params": [],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  { "repr": "void", "kind": "keyword", "keyword": "void" }
                ],
                "typeName": "Promise"
              }
            },
            "isAsync": true,
            "isGenerator": false
          },
          "location": { "filename": "test.ts", "line": 51, "col": 4 }
        },
        {
          "jsDoc": "Sync bar method",
          "snippet": "bar(): void",
          "accessibility": null,
          "isAbstract": false,
          "isStatic": false,
          "name": "bar",
          "kind": "method",
          "functionDef": {
            "params": [],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false
          },
          "location": { "filename": "test.ts", "line": 56, "col": 4 }
        }
      ]
    }
  },
  {
    "kind": "interface",
    "name": "Reader",
    "snippet": "export interface Reader {\n    /** Read n bytes */\n    read(buf: Uint8Array, something: unknown): Promise<number>\n}",
    "location": { "filename": "test.ts", "line": 64, "col": 0 },
    "jsDoc": "Interface js doc",
    "interfaceDef": {
      "methods": [
        {
          "name": "read",
          "snippet": "read(buf: Uint8Array, something: unknown): Promise<number>",
          "location": { "filename": "test.ts", "line": 66, "col": 4 },
          "jsDoc": "Read n bytes",
          "params": [
            {
              "name": "buf",
              "tsType": {
                "repr": "Uint8Array",
                "kind": "typeRef",
                "typeRef": { "typeParams": null, "typeName": "Uint8Array" }
              }
            },
            {
              "name": "something",
              "tsType": {
                "repr": "unknown",
                "kind": "keyword",
                "keyword": "unknown"
              }
            }
          ],
          "returnType": {
            "repr": "Promise",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": [
                { "repr": "number", "kind": "keyword", "keyword": "number" }
              ],
              "typeName": "Promise"
            }
          }
        }
      ],
      "properties": [],
      "callSignatures": []
    }
  },
  {
    "kind": "typeAlias",
    "name": "NumberArray",
    "snippet": "export type NumberArray = Array<number>;",
    "location": { "filename": "test.ts", "line": 70, "col": 0 },
    "jsDoc": "Array holding numbers",
    "typeAliasDef": {
      "tsType": {
        "repr": "Array",
        "kind": "typeRef",
        "typeRef": {
          "typeParams": [
            { "repr": "number", "kind": "keyword", "keyword": "number" }
          ],
          "typeName": "Array"
        }
      }
    }
  },
  {
    "kind": "typeAlias",
    "name": "OperatingSystem",
    "snippet": "export type OperatingSystem = \"mac\" | \"win\" | \"linux\";",
    "location": { "filename": "test.ts", "line": 71, "col": 0 },
    "jsDoc": null,
    "typeAliasDef": {
      "tsType": {
        "repr": "",
        "kind": "union",
        "union": [
          {
            "repr": "mac",
            "kind": "literal",
            "literal": { "kind": "string", "string": "mac" }
          },
          {
            "repr": "win",
            "kind": "literal",
            "literal": { "kind": "string", "string": "win" }
          },
          {
            "repr": "linux",
            "kind": "literal",
            "literal": { "kind": "string", "string": "linux" }
          }
        ]
      }
    }
  },
  {
    "kind": "typeAlias",
    "name": "Arch",
    "snippet": "export type Arch = \"x64\" | \"arm64\";",
    "location": { "filename": "test.ts", "line": 72, "col": 0 },
    "jsDoc": null,
    "typeAliasDef": {
      "tsType": {
        "repr": "",
        "kind": "union",
        "union": [
          {
            "repr": "x64",
            "kind": "literal",
            "literal": { "kind": "string", "string": "x64" }
          },
          {
            "repr": "arm64",
            "kind": "literal",
            "literal": { "kind": "string", "string": "arm64" }
          }
        ]
      }
    }
  },
  {
    "kind": "typeAlias",
    "name": "BuildInfo",
    "snippet": "export type BuildInfo = OperatingSystem | Arch;",
    "location": { "filename": "test.ts", "line": 73, "col": 0 },
    "jsDoc": null,
    "typeAliasDef": {
      "tsType": {
        "repr": "",
        "kind": "union",
        "union": [
          {
            "repr": "OperatingSystem",
            "kind": "typeRef",
            "typeRef": { "typeParams": null, "typeName": "OperatingSystem" }
          },
          {
            "repr": "Arch",
            "kind": "typeRef",
            "typeRef": { "typeParams": null, "typeName": "Arch" }
          }
        ]
      }
    }
  },
  {
    "kind": "typeAlias",
    "name": "ReadonlyArray",
    "snippet": "export type ReadonlyArray<T> = Array<T>;",
    "location": { "filename": "test.ts", "line": 74, "col": 0 },
    "jsDoc": null,
    "typeAliasDef": {
      "tsType": {
        "repr": "Array",
        "kind": "typeRef",
        "typeRef": {
          "typeParams": [
            {
              "repr": "T",
              "kind": "typeRef",
              "typeRef": { "typeParams": null, "typeName": "T" }
            }
          ],
          "typeName": "Array"
        }
      }
    }
  },
  {
    "kind": "enum",
    "name": "Hello",
    "snippet": "export enum Hello {\n    World = \"world\",\n    Fizz = \"fizz\",\n    Buzz = \"buzz\",\n}",
    "location": { "filename": "test.ts", "line": 79, "col": 0 },
    "jsDoc": "Some enum for good measure",
    "enumDef": {
      "members": [{ "name": "World" }, { "name": "Fizz" }, { "name": "Buzz" }]
    }
  },
  {
    "kind": "namespace",
    "name": "Deno",
    "snippet": "export namespace Deno {\n    /** Export var JSdoc */\n    export var x = 1;  \n\n    /**\n     * Nested namespace JSdoc\n     */\n    export namespace Nested {\n        /** nestedConst JSdoc */\n        export const nestedConst = \"a\";\n    }\n\n    /** Nested.Deeply namespace JSdoc */\n    export namespace Nested.Deeply {\n        /** \n         * nestedDeeplyConst JSdoc \n         */\n        export const nestedDeeplyConst = \"a\";\n    }\n}",
    "location": { "filename": "test.ts", "line": 86, "col": 0 },
    "jsDoc": "Root namespace JSdoc",
    "namespaceDef": {
      "elements": [
        {
          "kind": "variable",
          "name": "x",
          "snippet": "export var x = 1;",
          "location": { "filename": "test.ts", "line": 88, "col": 4 },
          "jsDoc": "Export var JSdoc",
          "variableDef": { "tsType": null, "kind": "var" }
        },
        {
          "kind": "namespace",
          "name": "Nested",
          "snippet": "export namespace Nested {\n        /** nestedConst JSdoc */\n        export const nestedConst = \"a\";\n    }",
          "location": { "filename": "test.ts", "line": 93, "col": 4 },
          "jsDoc": "Nested namespace JSdoc",
          "namespaceDef": {
            "elements": [
              {
                "kind": "variable",
                "name": "nestedConst",
                "snippet": "export const nestedConst = \"a\";",
                "location": { "filename": "test.ts", "line": 95, "col": 8 },
                "jsDoc": "nestedConst JSdoc",
                "variableDef": { "tsType": null, "kind": "const" }
              }
            ]
          }
        },
        {
          "kind": "namespace",
          "name": "Nested",
          "snippet": "export namespace Nested.Deeply {\n        /** \n         * nestedDeeplyConst JSdoc \n         */\n        export const nestedDeeplyConst = \"a\";\n    }",
          "location": { "filename": "test.ts", "line": 99, "col": 4 },
          "jsDoc": "Nested.Deeply namespace JSdoc",
          "namespaceDef": {
            "elements": [
              {
                "kind": "namespace",
                "name": "Deeply",
                "snippet": "Deeply {\n        /** \n         * nestedDeeplyConst JSdoc \n         */\n        export const nestedDeeplyConst = \"a\";\n    }",
                "location": { "filename": "test.ts", "line": 99, "col": 28 },
                "jsDoc": null,
                "namespaceDef": {
                  "elements": [
                    {
                      "kind": "variable",
                      "name": "nestedDeeplyConst",
                      "snippet": "export const nestedDeeplyConst = \"a\";",
                      "location": {
                        "filename": "test.ts",
                        "line": 103,
                        "col": 8
                      },
                      "jsDoc": "nestedDeeplyConst JSdoc",
                      "variableDef": { "tsType": null, "kind": "const" }
                    }
                  ]
                }
              }
            ]
          }
        }
      ]
    }
  }
]
